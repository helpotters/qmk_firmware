   1               		.file	"ssd1306_sh1106.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.i2c_transmit_P.constprop.0,"ax",@progbits
  12               	i2c_transmit_P.constprop.0:
  13               	.LVL0:
  14               	.LFB46:
  15               		.file 1 "drivers/oled/ssd1306_sh1106.c"
   1:drivers/oled/ssd1306_sh1106.c **** /*
   2:drivers/oled/ssd1306_sh1106.c **** Copyright 2019 Ryan Caltabiano <https://github.com/XScorpion2>
   3:drivers/oled/ssd1306_sh1106.c **** 
   4:drivers/oled/ssd1306_sh1106.c **** This program is free software: you can redistribute it and/or modify
   5:drivers/oled/ssd1306_sh1106.c **** it under the terms of the GNU General Public License as published by
   6:drivers/oled/ssd1306_sh1106.c **** the Free Software Foundation, either version 2 of the License, or
   7:drivers/oled/ssd1306_sh1106.c **** (at your option) any later version.
   8:drivers/oled/ssd1306_sh1106.c **** 
   9:drivers/oled/ssd1306_sh1106.c **** This program is distributed in the hope that it will be useful,
  10:drivers/oled/ssd1306_sh1106.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:drivers/oled/ssd1306_sh1106.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:drivers/oled/ssd1306_sh1106.c **** GNU General Public License for more details.
  13:drivers/oled/ssd1306_sh1106.c **** 
  14:drivers/oled/ssd1306_sh1106.c **** You should have received a copy of the GNU General Public License
  15:drivers/oled/ssd1306_sh1106.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:drivers/oled/ssd1306_sh1106.c **** */
  17:drivers/oled/ssd1306_sh1106.c **** #include "i2c_master.h"
  18:drivers/oled/ssd1306_sh1106.c **** #include "oled_driver.h"
  19:drivers/oled/ssd1306_sh1106.c **** #include OLED_FONT_H
  20:drivers/oled/ssd1306_sh1106.c **** #include "timer.h"
  21:drivers/oled/ssd1306_sh1106.c **** #include "print.h"
  22:drivers/oled/ssd1306_sh1106.c **** 
  23:drivers/oled/ssd1306_sh1106.c **** #include <string.h>
  24:drivers/oled/ssd1306_sh1106.c **** 
  25:drivers/oled/ssd1306_sh1106.c **** #include "progmem.h"
  26:drivers/oled/ssd1306_sh1106.c **** 
  27:drivers/oled/ssd1306_sh1106.c **** #include "keyboard.h"
  28:drivers/oled/ssd1306_sh1106.c **** 
  29:drivers/oled/ssd1306_sh1106.c **** // Used commands from spec sheet: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
  30:drivers/oled/ssd1306_sh1106.c **** // for SH1106: https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf
  31:drivers/oled/ssd1306_sh1106.c **** 
  32:drivers/oled/ssd1306_sh1106.c **** // Fundamental Commands
  33:drivers/oled/ssd1306_sh1106.c **** #define CONTRAST 0x81
  34:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON 0xA5
  35:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ALL_ON_RESUME 0xA4
  36:drivers/oled/ssd1306_sh1106.c **** #define NORMAL_DISPLAY 0xA6
  37:drivers/oled/ssd1306_sh1106.c **** #define INVERT_DISPLAY 0xA7
  38:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_ON 0xAF
  39:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFF 0xAE
  40:drivers/oled/ssd1306_sh1106.c **** #define NOP 0xE3
  41:drivers/oled/ssd1306_sh1106.c **** 
  42:drivers/oled/ssd1306_sh1106.c **** // Scrolling Commands
  43:drivers/oled/ssd1306_sh1106.c **** #define ACTIVATE_SCROLL 0x2F
  44:drivers/oled/ssd1306_sh1106.c **** #define DEACTIVATE_SCROLL 0x2E
  45:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT 0x26
  46:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT 0x27
  47:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_RIGHT_UP 0x29
  48:drivers/oled/ssd1306_sh1106.c **** #define SCROLL_LEFT_UP 0x2A
  49:drivers/oled/ssd1306_sh1106.c **** 
  50:drivers/oled/ssd1306_sh1106.c **** // Addressing Setting Commands
  51:drivers/oled/ssd1306_sh1106.c **** #define MEMORY_MODE 0x20
  52:drivers/oled/ssd1306_sh1106.c **** #define COLUMN_ADDR 0x21
  53:drivers/oled/ssd1306_sh1106.c **** #define PAGE_ADDR 0x22
  54:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_LSB 0x00
  55:drivers/oled/ssd1306_sh1106.c **** #define PAM_SETCOLUMN_MSB 0x10
  56:drivers/oled/ssd1306_sh1106.c **** #define PAM_PAGE_ADDR 0xB0  // 0xb0 -- 0xb7
  57:drivers/oled/ssd1306_sh1106.c **** 
  58:drivers/oled/ssd1306_sh1106.c **** // Hardware Configuration Commands
  59:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_START_LINE 0x40
  60:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP 0xA0
  61:drivers/oled/ssd1306_sh1106.c **** #define SEGMENT_REMAP_INV 0xA1
  62:drivers/oled/ssd1306_sh1106.c **** #define MULTIPLEX_RATIO 0xA8
  63:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_INC 0xC0
  64:drivers/oled/ssd1306_sh1106.c **** #define COM_SCAN_DEC 0xC8
  65:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_OFFSET 0xD3
  66:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS 0xDA
  67:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ 0x02
  68:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT 0x12
  69:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_SEQ_LR 0x22
  70:drivers/oled/ssd1306_sh1106.c **** #define COM_PINS_ALT_LR 0x32
  71:drivers/oled/ssd1306_sh1106.c **** 
  72:drivers/oled/ssd1306_sh1106.c **** // Timing & Driving Commands
  73:drivers/oled/ssd1306_sh1106.c **** #define DISPLAY_CLOCK 0xD5
  74:drivers/oled/ssd1306_sh1106.c **** #define PRE_CHARGE_PERIOD 0xD9
  75:drivers/oled/ssd1306_sh1106.c **** #define VCOM_DETECT 0xDB
  76:drivers/oled/ssd1306_sh1106.c **** 
  77:drivers/oled/ssd1306_sh1106.c **** // Advance Graphic Commands
  78:drivers/oled/ssd1306_sh1106.c **** #define FADE_BLINK 0x23
  79:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_FADE 0x20
  80:drivers/oled/ssd1306_sh1106.c **** #define ENABLE_BLINK 0x30
  81:drivers/oled/ssd1306_sh1106.c **** 
  82:drivers/oled/ssd1306_sh1106.c **** // Charge Pump Commands
  83:drivers/oled/ssd1306_sh1106.c **** #define CHARGE_PUMP 0x8D
  84:drivers/oled/ssd1306_sh1106.c **** 
  85:drivers/oled/ssd1306_sh1106.c **** // Misc defines
  86:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_COUNT
  87:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_COUNT (sizeof(OLED_BLOCK_TYPE) * 8)
  88:drivers/oled/ssd1306_sh1106.c **** #endif
  89:drivers/oled/ssd1306_sh1106.c **** #ifndef OLED_BLOCK_SIZE
  90:drivers/oled/ssd1306_sh1106.c **** #    define OLED_BLOCK_SIZE (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT)
  91:drivers/oled/ssd1306_sh1106.c **** #endif
  92:drivers/oled/ssd1306_sh1106.c **** 
  93:drivers/oled/ssd1306_sh1106.c **** #define OLED_ALL_BLOCKS_MASK (((((OLED_BLOCK_TYPE)1 << (OLED_BLOCK_COUNT - 1)) - 1) << 1) | 1)
  94:drivers/oled/ssd1306_sh1106.c **** 
  95:drivers/oled/ssd1306_sh1106.c **** // i2c defines
  96:drivers/oled/ssd1306_sh1106.c **** #define I2C_CMD 0x00
  97:drivers/oled/ssd1306_sh1106.c **** #define I2C_DATA 0x40
  98:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
  99:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit_P((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data)
 100:drivers/oled/ssd1306_sh1106.c **** #else  // defined(__AVR__)
 101:drivers/oled/ssd1306_sh1106.c **** #    define I2C_TRANSMIT_P(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), 
 102:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 103:drivers/oled/ssd1306_sh1106.c **** #define I2C_TRANSMIT(data) i2c_transmit((OLED_DISPLAY_ADDRESS << 1), &data[0], sizeof(data), OLED_I
 104:drivers/oled/ssd1306_sh1106.c **** #define I2C_WRITE_REG(mode, data, size) i2c_writeReg((OLED_DISPLAY_ADDRESS << 1), mode, data, size,
 105:drivers/oled/ssd1306_sh1106.c **** 
 106:drivers/oled/ssd1306_sh1106.c **** #define HAS_FLAGS(bits, flags) ((bits & flags) == flags)
 107:drivers/oled/ssd1306_sh1106.c **** 
 108:drivers/oled/ssd1306_sh1106.c **** // Display buffer's is the same as the OLED memory layout
 109:drivers/oled/ssd1306_sh1106.c **** // this is so we don't end up with rounding errors with
 110:drivers/oled/ssd1306_sh1106.c **** // parts of the display unusable or don't get cleared correctly
 111:drivers/oled/ssd1306_sh1106.c **** // and also allows for drawing & inverting
 112:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_buffer[OLED_MATRIX_SIZE];
 113:drivers/oled/ssd1306_sh1106.c **** uint8_t *       oled_cursor;
 114:drivers/oled/ssd1306_sh1106.c **** OLED_BLOCK_TYPE oled_dirty          = 0;
 115:drivers/oled/ssd1306_sh1106.c **** bool            oled_initialized    = false;
 116:drivers/oled/ssd1306_sh1106.c **** bool            oled_active         = false;
 117:drivers/oled/ssd1306_sh1106.c **** bool            oled_scrolling      = false;
 118:drivers/oled/ssd1306_sh1106.c **** bool            oled_inverted       = false;
 119:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_brightness     = OLED_BRIGHTNESS;
 120:drivers/oled/ssd1306_sh1106.c **** oled_rotation_t oled_rotation       = 0;
 121:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_rotation_width = 0;
 122:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_speed   = 0;  // this holds the speed after being remapped to ssd1306 i
 123:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_start   = 0;
 124:drivers/oled/ssd1306_sh1106.c **** uint8_t         oled_scroll_end     = 7;
 125:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 126:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_timeout;
 127:drivers/oled/ssd1306_sh1106.c **** #endif
 128:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 129:drivers/oled/ssd1306_sh1106.c **** uint32_t oled_scroll_timeout;
 130:drivers/oled/ssd1306_sh1106.c **** #endif
 131:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 132:drivers/oled/ssd1306_sh1106.c **** uint16_t oled_update_timeout;
 133:drivers/oled/ssd1306_sh1106.c **** #endif
 134:drivers/oled/ssd1306_sh1106.c **** 
 135:drivers/oled/ssd1306_sh1106.c **** // Internal variables to reduce math instructions
 136:drivers/oled/ssd1306_sh1106.c **** 
 137:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 138:drivers/oled/ssd1306_sh1106.c **** // identical to i2c_transmit, but for PROGMEM since all initialization is in PROGMEM arrays current
 139:drivers/oled/ssd1306_sh1106.c **** // probably should move this into i2c_master...
 140:drivers/oled/ssd1306_sh1106.c **** static i2c_status_t i2c_transmit_P(uint8_t address, const uint8_t *data, uint16_t length, uint16_t 
  16               		.loc 1 140 21 view -0
  17               		.cfi_startproc
  18               		.loc 1 140 21 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 6C01      		movw r12,r24
  56 0012 7B01      		movw r14,r22
  57               	.LVL1:
 141:drivers/oled/ssd1306_sh1106.c ****     i2c_status_t status = i2c_start(address | I2C_WRITE, timeout);
  58               		.loc 1 141 5 is_stmt 1 view .LVU2
  59               		.loc 1 141 27 is_stmt 0 view .LVU3
  60 0014 64E6      		ldi r22,lo8(100)
  61 0016 70E0      		ldi r23,0
  62               	.LVL2:
  63               		.loc 1 141 27 view .LVU4
  64 0018 88E7      		ldi r24,lo8(120)
  65               	.LVL3:
  66               		.loc 1 141 27 view .LVU5
  67 001a 0E94 0000 		call i2c_start
  68               	.LVL4:
  69 001e EC01      		movw r28,r24
  70               	.LVL5:
 142:drivers/oled/ssd1306_sh1106.c **** 
 143:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = 0; i < length && status >= 0; i++) {
  71               		.loc 1 143 5 is_stmt 1 view .LVU6
  72               	.LBB4:
  73               		.loc 1 143 10 view .LVU7
  74               		.loc 1 143 37 view .LVU8
  75 0020 8601      		movw r16,r12
  76 0022 EC0C      		add r14,r12
  77 0024 FD1C      		adc r15,r13
  78               	.LVL6:
  79               		.loc 1 143 37 is_stmt 0 view .LVU9
  80 0026 97FD      		sbrc r25,7
  81 0028 00C0      		rjmp .L2
  82               	.LVL7:
  83               	.L3:
 144:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
  84               		.loc 1 144 9 is_stmt 1 view .LVU10
  85               	.LBB5:
  86               		.loc 1 144 28 view .LVU11
  87               		.loc 1 144 28 view .LVU12
  88               		.loc 1 144 28 view .LVU13
  89 002a F801      		movw r30,r16
  90               	/* #APP */
  91               	 ;  144 "drivers/oled/ssd1306_sh1106.c" 1
  92 002c 8491      		lpm r24, Z
  93               		
  94               	 ;  0 "" 2
  95               	.LVL8:
  96               		.loc 1 144 28 view .LVU14
  97               	/* #NOAPP */
  98               	.LBE5:
  99               		.loc 1 144 18 is_stmt 0 view .LVU15
 100 002e 64E6      		ldi r22,lo8(100)
 101 0030 70E0      		ldi r23,0
 102 0032 0E94 0000 		call i2c_write
 103               	.LVL9:
 104               		.loc 1 144 18 view .LVU16
 105 0036 EC01      		movw r28,r24
 106               	.LVL10:
 145:drivers/oled/ssd1306_sh1106.c ****         if (status) break;
 107               		.loc 1 145 9 is_stmt 1 view .LVU17
 108               		.loc 1 145 12 is_stmt 0 view .LVU18
 109 0038 892B      		or r24,r25
 110 003a 01F4      		brne .L2
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 111               		.loc 1 143 54 is_stmt 1 view .LVU19
 112               	.LVL11:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 113               		.loc 1 143 37 view .LVU20
 114 003c 0F5F      		subi r16,-1
 115 003e 1F4F      		sbci r17,-1
 116               	.LVL12:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 117               		.loc 1 143 37 is_stmt 0 view .LVU21
 118 0040 E016      		cp r14,r16
 119 0042 F106      		cpc r15,r17
 120 0044 01F4      		brne .L3
 121               	.LVL13:
 122               	.L2:
 143:drivers/oled/ssd1306_sh1106.c ****         status = i2c_write(pgm_read_byte((const char *)data++), timeout);
 123               		.loc 1 143 37 view .LVU22
 124               	.LBE4:
 146:drivers/oled/ssd1306_sh1106.c ****     }
 147:drivers/oled/ssd1306_sh1106.c **** 
 148:drivers/oled/ssd1306_sh1106.c ****     i2c_stop();
 125               		.loc 1 148 5 is_stmt 1 view .LVU23
 126 0046 0E94 0000 		call i2c_stop
 127               	.LVL14:
 149:drivers/oled/ssd1306_sh1106.c **** 
 150:drivers/oled/ssd1306_sh1106.c ****     return status;
 128               		.loc 1 150 5 view .LVU24
 151:drivers/oled/ssd1306_sh1106.c **** }
 129               		.loc 1 151 1 is_stmt 0 view .LVU25
 130 004a CE01      		movw r24,r28
 131               	/* epilogue start */
 132 004c DF91      		pop r29
 133 004e CF91      		pop r28
 134               	.LVL15:
 135               		.loc 1 151 1 view .LVU26
 136 0050 1F91      		pop r17
 137 0052 0F91      		pop r16
 138 0054 FF90      		pop r15
 139 0056 EF90      		pop r14
 140 0058 DF90      		pop r13
 141 005a CF90      		pop r12
 142 005c 0895      		ret
 143               		.cfi_endproc
 144               	.LFE46:
 146               		.section	.text.oled_init_user,"ax",@progbits
 147               		.weak	oled_init_user
 149               	oled_init_user:
 150               	.LVL16:
 151               	.LFB9:
 152:drivers/oled/ssd1306_sh1106.c **** #endif
 153:drivers/oled/ssd1306_sh1106.c **** 
 154:drivers/oled/ssd1306_sh1106.c **** // Flips the rendering bits for a character at the current cursor position
 155:drivers/oled/ssd1306_sh1106.c **** static void InvertCharacter(uint8_t *cursor) {
 156:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 157:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 158:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 159:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 160:drivers/oled/ssd1306_sh1106.c ****     }
 161:drivers/oled/ssd1306_sh1106.c **** }
 162:drivers/oled/ssd1306_sh1106.c **** 
 163:drivers/oled/ssd1306_sh1106.c **** bool oled_init(oled_rotation_t rotation) {
 164:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 165:drivers/oled/ssd1306_sh1106.c ****     if (!is_keyboard_master()) {
 166:drivers/oled/ssd1306_sh1106.c ****         return true;
 167:drivers/oled/ssd1306_sh1106.c ****     }
 168:drivers/oled/ssd1306_sh1106.c **** #endif
 169:drivers/oled/ssd1306_sh1106.c **** 
 170:drivers/oled/ssd1306_sh1106.c ****     oled_rotation = oled_init_user(rotation);
 171:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 172:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 173:drivers/oled/ssd1306_sh1106.c ****     } else {
 174:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_HEIGHT;
 175:drivers/oled/ssd1306_sh1106.c ****     }
 176:drivers/oled/ssd1306_sh1106.c ****     i2c_init();
 177:drivers/oled/ssd1306_sh1106.c **** 
 178:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup1[] = {
 179:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 180:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFF,
 181:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_CLOCK,
 182:drivers/oled/ssd1306_sh1106.c ****         0x80,
 183:drivers/oled/ssd1306_sh1106.c ****         MULTIPLEX_RATIO,
 184:drivers/oled/ssd1306_sh1106.c ****         OLED_DISPLAY_HEIGHT - 1,
 185:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_OFFSET,
 186:drivers/oled/ssd1306_sh1106.c ****         0x00,
 187:drivers/oled/ssd1306_sh1106.c ****         DISPLAY_START_LINE | 0x00,
 188:drivers/oled/ssd1306_sh1106.c ****         CHARGE_PUMP,
 189:drivers/oled/ssd1306_sh1106.c ****         0x14,
 190:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC != OLED_IC_SH1106)
 191:drivers/oled/ssd1306_sh1106.c ****         // MEMORY_MODE is unsupported on SH1106 (Page Addressing only)
 192:drivers/oled/ssd1306_sh1106.c ****         MEMORY_MODE,
 193:drivers/oled/ssd1306_sh1106.c ****         0x00,  // Horizontal addressing mode
 194:drivers/oled/ssd1306_sh1106.c **** #endif
 195:drivers/oled/ssd1306_sh1106.c ****     };
 196:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup1) != I2C_STATUS_SUCCESS) {
 197:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 198:drivers/oled/ssd1306_sh1106.c ****         return false;
 199:drivers/oled/ssd1306_sh1106.c ****     }
 200:drivers/oled/ssd1306_sh1106.c **** 
 201:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_180)) {
 202:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 203:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 204:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 205:drivers/oled/ssd1306_sh1106.c ****             return false;
 206:drivers/oled/ssd1306_sh1106.c ****         }
 207:drivers/oled/ssd1306_sh1106.c ****     } else {
 208:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_flipped[] = {I2C_CMD, SEGMENT_REMAP, COM_SCAN_INC};
 209:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 210:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 211:drivers/oled/ssd1306_sh1106.c ****             return false;
 212:drivers/oled/ssd1306_sh1106.c ****         }
 213:drivers/oled/ssd1306_sh1106.c ****     }
 214:drivers/oled/ssd1306_sh1106.c **** 
 215:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_setup2[] = {I2C_CMD, COM_PINS, OLED_COM_PINS, CONTRAST, OL
 216:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 217:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 218:drivers/oled/ssd1306_sh1106.c ****         return false;
 219:drivers/oled/ssd1306_sh1106.c ****     }
 220:drivers/oled/ssd1306_sh1106.c **** 
 221:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 222:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 223:drivers/oled/ssd1306_sh1106.c **** #endif
 224:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 225:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 226:drivers/oled/ssd1306_sh1106.c **** #endif
 227:drivers/oled/ssd1306_sh1106.c **** 
 228:drivers/oled/ssd1306_sh1106.c ****     oled_clear();
 229:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 230:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 231:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 232:drivers/oled/ssd1306_sh1106.c ****     return true;
 233:drivers/oled/ssd1306_sh1106.c **** }
 234:drivers/oled/ssd1306_sh1106.c **** 
 235:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) oled_rotation_t oled_init_user(oled_rotation_t rotation) { return rotation; }
 152               		.loc 1 235 80 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158               		.loc 1 235 82 view .LVU28
 159               	/* epilogue start */
 160               		.loc 1 235 99 is_stmt 0 view .LVU29
 161 0000 0895      		ret
 162               		.cfi_endproc
 163               	.LFE9:
 165               		.section	.text.oled_clear,"ax",@progbits
 166               	.global	oled_clear
 168               	oled_clear:
 169               	.LFB10:
 236:drivers/oled/ssd1306_sh1106.c **** 
 237:drivers/oled/ssd1306_sh1106.c **** void oled_clear(void) {
 170               		.loc 1 237 23 is_stmt 1 view -0
 171               		.cfi_startproc
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 0 */
 175               	.L__stack_usage = 0
 238:drivers/oled/ssd1306_sh1106.c ****     memset(oled_buffer, 0, sizeof(oled_buffer));
 176               		.loc 1 238 5 view .LVU31
 177 0000 E0E0      		ldi r30,lo8(oled_buffer)
 178 0002 F0E0      		ldi r31,hi8(oled_buffer)
 179 0004 80E0      		ldi r24,0
 180 0006 92E0      		ldi r25,lo8(2)
 181 0008 DF01      		movw r26,r30
 182 000a 9C01      		movw r18,r24
 183               		0:
 184 000c 1D92      		st X+,__zero_reg__
 185 000e 2150      		subi r18,1
 186 0010 3040      		sbci r19,0
 187 0012 01F4      		brne 0b
 239:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[0];
 188               		.loc 1 239 5 view .LVU32
 189               		.loc 1 239 17 is_stmt 0 view .LVU33
 190 0014 F093 0000 		sts oled_cursor+1,r31
 191 0018 E093 0000 		sts oled_cursor,r30
 240:drivers/oled/ssd1306_sh1106.c ****     oled_dirty  = OLED_ALL_BLOCKS_MASK;
 192               		.loc 1 240 5 is_stmt 1 view .LVU34
 193               		.loc 1 240 17 is_stmt 0 view .LVU35
 194 001c 8FEF      		ldi r24,lo8(-1)
 195 001e 9FEF      		ldi r25,lo8(-1)
 196 0020 9093 0000 		sts oled_dirty+1,r25
 197 0024 8093 0000 		sts oled_dirty,r24
 198               	/* epilogue start */
 241:drivers/oled/ssd1306_sh1106.c **** }
 199               		.loc 1 241 1 view .LVU36
 200 0028 0895      		ret
 201               		.cfi_endproc
 202               	.LFE10:
 204               		.section	.text.oled_init,"ax",@progbits
 205               	.global	oled_init
 207               	oled_init:
 208               	.LVL17:
 209               	.LFB8:
 163:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 210               		.loc 1 163 42 is_stmt 1 view -0
 211               		.cfi_startproc
 163:drivers/oled/ssd1306_sh1106.c **** #if defined(USE_I2C) && defined(SPLIT_KEYBOARD)
 212               		.loc 1 163 42 is_stmt 0 view .LVU38
 213 0000 CF93      		push r28
 214               	.LCFI8:
 215               		.cfi_def_cfa_offset 3
 216               		.cfi_offset 28, -2
 217 0002 DF93      		push r29
 218               	.LCFI9:
 219               		.cfi_def_cfa_offset 4
 220               		.cfi_offset 29, -3
 221 0004 00D0      		rcall .
 222 0006 00D0      		rcall .
 223               	.LCFI10:
 224               		.cfi_def_cfa_offset 8
 225 0008 CDB7      		in r28,__SP_L__
 226 000a DEB7      		in r29,__SP_H__
 227               	.LCFI11:
 228               		.cfi_def_cfa_register 28
 229               	/* prologue: function */
 230               	/* frame size = 4 */
 231               	/* stack size = 6 */
 232               	.L__stack_usage = 6
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 233               		.loc 1 170 5 is_stmt 1 view .LVU39
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 234               		.loc 1 170 21 is_stmt 0 view .LVU40
 235 000c 0E94 0000 		call oled_init_user
 236               	.LVL18:
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 237               		.loc 1 171 5 is_stmt 1 view .LVU41
 171:drivers/oled/ssd1306_sh1106.c ****         oled_rotation_width = OLED_DISPLAY_WIDTH;
 238               		.loc 1 171 8 is_stmt 0 view .LVU42
 239 0010 90E2      		ldi r25,lo8(32)
 240 0012 80FF      		sbrs r24,0
 241 0014 90E8      		ldi r25,lo8(-128)
 242               	.L8:
 170:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 243               		.loc 1 170 19 view .LVU43
 244 0016 8093 0000 		sts oled_rotation,r24
 172:drivers/oled/ssd1306_sh1106.c ****     } else {
 245               		.loc 1 172 29 view .LVU44
 246 001a 9093 0000 		sts oled_rotation_width,r25
 176:drivers/oled/ssd1306_sh1106.c **** 
 247               		.loc 1 176 5 is_stmt 1 view .LVU45
 248 001e 0E94 0000 		call i2c_init
 249               	.LVL19:
 178:drivers/oled/ssd1306_sh1106.c ****         I2C_CMD,
 250               		.loc 1 178 5 view .LVU46
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 251               		.loc 1 196 5 view .LVU47
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 252               		.loc 1 196 9 is_stmt 0 view .LVU48
 253 0022 6DE0      		ldi r22,lo8(13)
 254 0024 70E0      		ldi r23,0
 255 0026 80E0      		ldi r24,lo8(display_setup1.29)
 256 0028 90E0      		ldi r25,hi8(display_setup1.29)
 257 002a 0E94 0000 		call i2c_transmit_P.constprop.0
 258               	.LVL20:
 196:drivers/oled/ssd1306_sh1106.c ****         print("oled_init cmd set 1 failed\n");
 259               		.loc 1 196 8 view .LVU49
 260 002e 892B      		or r24,r25
 261 0030 01F0      		breq .L9
 197:drivers/oled/ssd1306_sh1106.c ****         return false;
 262               		.loc 1 197 9 is_stmt 1 view .LVU50
 263               	.LBB6:
 197:drivers/oled/ssd1306_sh1106.c ****         return false;
 264               		.loc 1 197 9 view .LVU51
 197:drivers/oled/ssd1306_sh1106.c ****         return false;
 265               		.loc 1 197 9 view .LVU52
 266               	.LBE6:
 267 0032 80E0      		ldi r24,lo8(__c.28)
 268 0034 90E0      		ldi r25,hi8(__c.28)
 269               	.L21:
 217:drivers/oled/ssd1306_sh1106.c ****         return false;
 270               		.loc 1 217 9 is_stmt 0 view .LVU53
 271 0036 0E94 0000 		call xputs
 272               	.LVL21:
 218:drivers/oled/ssd1306_sh1106.c ****     }
 273               		.loc 1 218 9 is_stmt 1 view .LVU54
 218:drivers/oled/ssd1306_sh1106.c ****     }
 274               		.loc 1 218 16 is_stmt 0 view .LVU55
 275 003a 80E0      		ldi r24,0
 276               	.L7:
 277               	/* epilogue start */
 233:drivers/oled/ssd1306_sh1106.c **** 
 278               		.loc 1 233 1 view .LVU56
 279 003c 0F90      		pop __tmp_reg__
 280 003e 0F90      		pop __tmp_reg__
 281 0040 0F90      		pop __tmp_reg__
 282 0042 0F90      		pop __tmp_reg__
 283 0044 DF91      		pop r29
 284 0046 CF91      		pop r28
 285 0048 0895      		ret
 286               	.L9:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 287               		.loc 1 201 5 is_stmt 1 view .LVU57
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 288               		.loc 1 201 8 is_stmt 0 view .LVU58
 289 004a 8091 0000 		lds r24,oled_rotation
 290               	.LBB7:
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 291               		.loc 1 203 13 view .LVU59
 292 004e 63E0      		ldi r22,lo8(3)
 293 0050 70E0      		ldi r23,0
 294               	.LBE7:
 201:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, SEGMENT_REMAP_INV, COM_SCAN_DEC};
 295               		.loc 1 201 8 view .LVU60
 296 0052 81FD      		sbrc r24,1
 297 0054 00C0      		rjmp .L11
 298               	.LBB9:
 202:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 299               		.loc 1 202 9 is_stmt 1 view .LVU61
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 300               		.loc 1 203 9 view .LVU62
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 301               		.loc 1 203 13 is_stmt 0 view .LVU63
 302 0056 80E0      		ldi r24,lo8(display_normal.27)
 303 0058 90E0      		ldi r25,hi8(display_normal.27)
 304 005a 0E94 0000 		call i2c_transmit_P.constprop.0
 305               	.LVL22:
 203:drivers/oled/ssd1306_sh1106.c ****             print("oled_init cmd normal rotation failed\n");
 306               		.loc 1 203 12 view .LVU64
 307 005e 892B      		or r24,r25
 308 0060 01F0      		breq .L12
 204:drivers/oled/ssd1306_sh1106.c ****             return false;
 309               		.loc 1 204 13 is_stmt 1 view .LVU65
 310               	.LBB8:
 204:drivers/oled/ssd1306_sh1106.c ****             return false;
 311               		.loc 1 204 13 view .LVU66
 204:drivers/oled/ssd1306_sh1106.c ****             return false;
 312               		.loc 1 204 13 view .LVU67
 313               	.LBE8:
 314 0062 80E0      		ldi r24,lo8(__c.26)
 315 0064 90E0      		ldi r25,hi8(__c.26)
 316 0066 00C0      		rjmp .L21
 317               	.L11:
 318               	.LBE9:
 319               	.LBB10:
 208:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_flipped) != I2C_STATUS_SUCCESS) {
 320               		.loc 1 208 9 view .LVU68
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 321               		.loc 1 209 9 view .LVU69
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 322               		.loc 1 209 13 is_stmt 0 view .LVU70
 323 0068 80E0      		ldi r24,lo8(display_flipped.25)
 324 006a 90E0      		ldi r25,hi8(display_flipped.25)
 325 006c 0E94 0000 		call i2c_transmit_P.constprop.0
 326               	.LVL23:
 209:drivers/oled/ssd1306_sh1106.c ****             print("display_flipped failed\n");
 327               		.loc 1 209 12 view .LVU71
 328 0070 892B      		or r24,r25
 329 0072 01F0      		breq .L12
 210:drivers/oled/ssd1306_sh1106.c ****             return false;
 330               		.loc 1 210 13 is_stmt 1 view .LVU72
 331               	.LBB11:
 210:drivers/oled/ssd1306_sh1106.c ****             return false;
 332               		.loc 1 210 13 view .LVU73
 210:drivers/oled/ssd1306_sh1106.c ****             return false;
 333               		.loc 1 210 13 view .LVU74
 334               	.LBE11:
 335 0074 80E0      		ldi r24,lo8(__c.24)
 336 0076 90E0      		ldi r25,hi8(__c.24)
 337 0078 00C0      		rjmp .L21
 338               	.L12:
 339               	.LBE10:
 215:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT_P(display_setup2) != I2C_STATUS_SUCCESS) {
 340               		.loc 1 215 5 view .LVU75
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 341               		.loc 1 216 5 view .LVU76
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 342               		.loc 1 216 9 is_stmt 0 view .LVU77
 343 007a 6DE0      		ldi r22,lo8(13)
 344 007c 70E0      		ldi r23,0
 345 007e 80E0      		ldi r24,lo8(display_setup2.23)
 346 0080 90E0      		ldi r25,hi8(display_setup2.23)
 347 0082 0E94 0000 		call i2c_transmit_P.constprop.0
 348               	.LVL24:
 216:drivers/oled/ssd1306_sh1106.c ****         print("display_setup2 failed\n");
 349               		.loc 1 216 8 view .LVU78
 350 0086 892B      		or r24,r25
 351 0088 01F0      		breq .L13
 217:drivers/oled/ssd1306_sh1106.c ****         return false;
 352               		.loc 1 217 9 is_stmt 1 view .LVU79
 353               	.LBB12:
 217:drivers/oled/ssd1306_sh1106.c ****         return false;
 354               		.loc 1 217 9 view .LVU80
 217:drivers/oled/ssd1306_sh1106.c ****         return false;
 355               		.loc 1 217 9 view .LVU81
 356               	.LBE12:
 357 008a 80E0      		ldi r24,lo8(__c.22)
 358 008c 90E0      		ldi r25,hi8(__c.22)
 359 008e 00C0      		rjmp .L21
 360               	.L13:
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 361               		.loc 1 222 5 view .LVU82
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 362               		.loc 1 222 20 is_stmt 0 view .LVU83
 363 0090 0E94 0000 		call timer_read32
 364               	.LVL25:
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 365               		.loc 1 222 35 view .LVU84
 366 0094 DC01      		movw r26,r24
 367 0096 CB01      		movw r24,r22
 368 0098 805A      		subi r24,-96
 369 009a 9541      		sbci r25,21
 370 009c AF4F      		sbci r26,-1
 371 009e BF4F      		sbci r27,-1
 222:drivers/oled/ssd1306_sh1106.c **** #endif
 372               		.loc 1 222 18 view .LVU85
 373 00a0 8093 0000 		sts oled_timeout,r24
 374 00a4 9093 0000 		sts oled_timeout+1,r25
 375 00a8 A093 0000 		sts oled_timeout+2,r26
 376 00ac B093 0000 		sts oled_timeout+3,r27
 228:drivers/oled/ssd1306_sh1106.c ****     oled_initialized = true;
 377               		.loc 1 228 5 is_stmt 1 view .LVU86
 378 00b0 0E94 0000 		call oled_clear
 379               	.LVL26:
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 380               		.loc 1 229 5 view .LVU87
 229:drivers/oled/ssd1306_sh1106.c ****     oled_active      = true;
 381               		.loc 1 229 22 is_stmt 0 view .LVU88
 382 00b4 81E0      		ldi r24,lo8(1)
 383 00b6 8093 0000 		sts oled_initialized,r24
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 384               		.loc 1 230 5 is_stmt 1 view .LVU89
 230:drivers/oled/ssd1306_sh1106.c ****     oled_scrolling   = false;
 385               		.loc 1 230 22 is_stmt 0 view .LVU90
 386 00ba 8093 0000 		sts oled_active,r24
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 387               		.loc 1 231 5 is_stmt 1 view .LVU91
 231:drivers/oled/ssd1306_sh1106.c ****     return true;
 388               		.loc 1 231 22 is_stmt 0 view .LVU92
 389 00be 1092 0000 		sts oled_scrolling,__zero_reg__
 232:drivers/oled/ssd1306_sh1106.c **** }
 390               		.loc 1 232 5 is_stmt 1 view .LVU93
 232:drivers/oled/ssd1306_sh1106.c **** }
 391               		.loc 1 232 12 is_stmt 0 view .LVU94
 392 00c2 00C0      		rjmp .L7
 393               		.cfi_endproc
 394               	.LFE8:
 396               		.section	.text.crot,"ax",@progbits
 397               	.global	crot
 399               	crot:
 400               	.LVL27:
 401               	.LFB13:
 242:drivers/oled/ssd1306_sh1106.c **** 
 243:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds(uint8_t update_start, uint8_t *cmd_array) {
 244:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_page   = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_WIDTH;
 246:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 247:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 248:drivers/oled/ssd1306_sh1106.c ****     // Commands for Page Addressing Mode. Sets starting page and column; has no end bound.
 249:drivers/oled/ssd1306_sh1106.c ****     // Column value must be split into high and low nybble and sent as two commands.
 250:drivers/oled/ssd1306_sh1106.c ****     cmd_array[0] = PAM_PAGE_ADDR | start_page;
 251:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = PAM_SETCOLUMN_LSB | ((OLED_COLUMN_OFFSET + start_column) & 0x0f);
 252:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = PAM_SETCOLUMN_MSB | ((OLED_COLUMN_OFFSET + start_column) >> 4 & 0x0f);
 253:drivers/oled/ssd1306_sh1106.c ****     cmd_array[3] = NOP;
 254:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = NOP;
 255:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = NOP;
 256:drivers/oled/ssd1306_sh1106.c **** #else
 257:drivers/oled/ssd1306_sh1106.c ****     // Commands for use in Horizontal Addressing mode.
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = start_column;
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 261:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 262:drivers/oled/ssd1306_sh1106.c **** #endif
 263:drivers/oled/ssd1306_sh1106.c **** }
 264:drivers/oled/ssd1306_sh1106.c **** 
 265:drivers/oled/ssd1306_sh1106.c **** static void calc_bounds_90(uint8_t update_start, uint8_t *cmd_array) {
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 268:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 269:drivers/oled/ssd1306_sh1106.c ****     ;
 270:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 271:drivers/oled/ssd1306_sh1106.c **** }
 272:drivers/oled/ssd1306_sh1106.c **** 
 273:drivers/oled/ssd1306_sh1106.c **** uint8_t crot(uint8_t a, int8_t n) {
 402               		.loc 1 273 35 is_stmt 1 view -0
 403               		.cfi_startproc
 404               	/* prologue: function */
 405               	/* frame size = 0 */
 406               	/* stack size = 0 */
 407               	.L__stack_usage = 0
 408               		.loc 1 273 35 is_stmt 0 view .LVU96
 409 0000 982F      		mov r25,r24
 274:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 410               		.loc 1 274 5 is_stmt 1 view .LVU97
 411               	.LVL28:
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 412               		.loc 1 275 5 view .LVU98
 276:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 413               		.loc 1 276 5 view .LVU99
 275:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 414               		.loc 1 275 7 is_stmt 0 view .LVU100
 415 0002 6770      		andi r22,lo8(7)
 416               	.LVL29:
 417               		.loc 1 276 14 view .LVU101
 418 0004 262F      		mov r18,r22
 419 0006 062E      		mov __tmp_reg__,r22
 420 0008 000C      		lsl r0
 421 000a 330B      		sbc r19,r19
 422               		.loc 1 276 19 view .LVU102
 423 000c 00C0      		rjmp 2f
 424               		1:
 425 000e 880F      		lsl r24
 426               		2:
 427 0010 6A95      		dec r22
 428 0012 02F4      		brpl 1b
 429               	.LVL30:
 430               		.loc 1 276 19 view .LVU103
 431 0014 3195      		neg r19
 432 0016 2195      		neg r18
 433 0018 3109      		sbc r19,__zero_reg__
 434 001a 2770      		andi r18,7
 435 001c 3327      		clr r19
 436 001e 00C0      		rjmp 2f
 437               		1:
 438 0020 9695      		lsr r25
 439               		2:
 440 0022 2A95      		dec r18
 441 0024 02F4      		brpl 1b
 442               	.LVL31:
 277:drivers/oled/ssd1306_sh1106.c **** }
 443               		.loc 1 277 1 view .LVU104
 444 0026 892B      		or r24,r25
 445               	/* epilogue start */
 446 0028 0895      		ret
 447               		.cfi_endproc
 448               	.LFE13:
 450               		.section	.text.oled_set_cursor,"ax",@progbits
 451               	.global	oled_set_cursor
 453               	oled_set_cursor:
 454               	.LVL32:
 455               	.LFB16:
 278:drivers/oled/ssd1306_sh1106.c **** 
 279:drivers/oled/ssd1306_sh1106.c **** static void rotate_90(const uint8_t *src, uint8_t *dest) {
 280:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 281:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 282:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 283:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 284:drivers/oled/ssd1306_sh1106.c ****         }
 285:drivers/oled/ssd1306_sh1106.c ****     }
 286:drivers/oled/ssd1306_sh1106.c **** }
 287:drivers/oled/ssd1306_sh1106.c **** 
 288:drivers/oled/ssd1306_sh1106.c **** void oled_render(void) {
 289:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 290:drivers/oled/ssd1306_sh1106.c ****         return;
 291:drivers/oled/ssd1306_sh1106.c ****     }
 292:drivers/oled/ssd1306_sh1106.c **** 
 293:drivers/oled/ssd1306_sh1106.c ****     // Do we have work to do?
 294:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= OLED_ALL_BLOCKS_MASK;
 295:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 296:drivers/oled/ssd1306_sh1106.c ****         return;
 297:drivers/oled/ssd1306_sh1106.c ****     }
 298:drivers/oled/ssd1306_sh1106.c **** 
 299:drivers/oled/ssd1306_sh1106.c ****     // Find first dirty block
 300:drivers/oled/ssd1306_sh1106.c ****     uint8_t update_start = 0;
 301:drivers/oled/ssd1306_sh1106.c ****     while (!(oled_dirty & ((OLED_BLOCK_TYPE)1 << update_start))) {
 302:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 303:drivers/oled/ssd1306_sh1106.c ****     }
 304:drivers/oled/ssd1306_sh1106.c **** 
 305:drivers/oled/ssd1306_sh1106.c ****     // Set column & page position
 306:drivers/oled/ssd1306_sh1106.c ****     static uint8_t display_start[] = {I2C_CMD, COLUMN_ADDR, 0, OLED_DISPLAY_WIDTH - 1, PAGE_ADDR, 0
 307:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 308:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 309:drivers/oled/ssd1306_sh1106.c ****     } else {
 310:drivers/oled/ssd1306_sh1106.c ****         calc_bounds_90(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 311:drivers/oled/ssd1306_sh1106.c ****     }
 312:drivers/oled/ssd1306_sh1106.c **** 
 313:drivers/oled/ssd1306_sh1106.c ****     // Send column & page position
 314:drivers/oled/ssd1306_sh1106.c ****     if (I2C_TRANSMIT(display_start) != I2C_STATUS_SUCCESS) {
 315:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 316:drivers/oled/ssd1306_sh1106.c ****         return;
 317:drivers/oled/ssd1306_sh1106.c ****     }
 318:drivers/oled/ssd1306_sh1106.c **** 
 319:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 320:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 321:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &oled_buffer[OLED_BLOCK_SIZE * update_start], OLED_BLOCK_SIZE) 
 322:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 323:drivers/oled/ssd1306_sh1106.c ****             return;
 324:drivers/oled/ssd1306_sh1106.c ****         }
 325:drivers/oled/ssd1306_sh1106.c ****     } else {
 326:drivers/oled/ssd1306_sh1106.c ****         // Rotate the render chunks
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t source_map[] = OLED_SOURCE_MAP;
 328:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 329:drivers/oled/ssd1306_sh1106.c **** 
 330:drivers/oled/ssd1306_sh1106.c ****         static uint8_t temp_buffer[OLED_BLOCK_SIZE];
 331:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 332:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 333:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 334:drivers/oled/ssd1306_sh1106.c ****         }
 335:drivers/oled/ssd1306_sh1106.c **** 
 336:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk after rotating
 337:drivers/oled/ssd1306_sh1106.c ****         if (I2C_WRITE_REG(I2C_DATA, &temp_buffer[0], OLED_BLOCK_SIZE) != I2C_STATUS_SUCCESS) {
 338:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 339:drivers/oled/ssd1306_sh1106.c ****             return;
 340:drivers/oled/ssd1306_sh1106.c ****         }
 341:drivers/oled/ssd1306_sh1106.c ****     }
 342:drivers/oled/ssd1306_sh1106.c **** 
 343:drivers/oled/ssd1306_sh1106.c ****     // Turn on display if it is off
 344:drivers/oled/ssd1306_sh1106.c ****     oled_on();
 345:drivers/oled/ssd1306_sh1106.c **** 
 346:drivers/oled/ssd1306_sh1106.c ****     // Clear dirty flag
 347:drivers/oled/ssd1306_sh1106.c ****     oled_dirty &= ~((OLED_BLOCK_TYPE)1 << update_start);
 348:drivers/oled/ssd1306_sh1106.c **** }
 349:drivers/oled/ssd1306_sh1106.c **** 
 350:drivers/oled/ssd1306_sh1106.c **** void oled_set_cursor(uint8_t col, uint8_t line) {
 456               		.loc 1 350 49 is_stmt 1 view -0
 457               		.cfi_startproc
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 0 */
 461               	.L__stack_usage = 0
 351:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = line * oled_rotation_width + col * OLED_FONT_WIDTH;
 462               		.loc 1 351 5 view .LVU106
 463               		.loc 1 351 27 is_stmt 0 view .LVU107
 464 0000 2091 0000 		lds r18,oled_rotation_width
 465               		.loc 1 351 55 view .LVU108
 466 0004 36E0      		ldi r19,lo8(6)
 467 0006 839F      		mul r24,r19
 468 0008 C001      		movw r24,r0
 469 000a 1124      		clr __zero_reg__
 470               	.LVL33:
 471               		.loc 1 351 49 view .LVU109
 472 000c 629F      		mul r22,r18
 473 000e 800D      		add r24,r0
 474 0010 911D      		adc r25,r1
 475 0012 1124      		clr __zero_reg__
 476               	.LVL34:
 352:drivers/oled/ssd1306_sh1106.c **** 
 353:drivers/oled/ssd1306_sh1106.c ****     // Out of bounds?
 354:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 477               		.loc 1 354 5 is_stmt 1 view .LVU110
 478               		.loc 1 354 8 is_stmt 0 view .LVU111
 479 0014 8115      		cp r24,__zero_reg__
 480 0016 22E0      		ldi r18,2
 481 0018 9207      		cpc r25,r18
 482 001a 04F0      		brlt .L24
 483 001c 90E0      		ldi r25,0
 484 001e 80E0      		ldi r24,0
 485               	.LVL35:
 486               	.L24:
 355:drivers/oled/ssd1306_sh1106.c ****         index = 0;
 356:drivers/oled/ssd1306_sh1106.c ****     }
 357:drivers/oled/ssd1306_sh1106.c **** 
 358:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[index];
 487               		.loc 1 358 5 is_stmt 1 view .LVU112
 488               		.loc 1 358 19 is_stmt 0 view .LVU113
 489 0020 8050      		subi r24,lo8(-(oled_buffer))
 490 0022 9040      		sbci r25,hi8(-(oled_buffer))
 491               	.LVL36:
 492               		.loc 1 358 17 view .LVU114
 493 0024 9093 0000 		sts oled_cursor+1,r25
 494 0028 8093 0000 		sts oled_cursor,r24
 495               	/* epilogue start */
 359:drivers/oled/ssd1306_sh1106.c **** }
 496               		.loc 1 359 1 view .LVU115
 497 002c 0895      		ret
 498               		.cfi_endproc
 499               	.LFE16:
 501               		.section	.text.oled_advance_char,"ax",@progbits
 502               	.global	oled_advance_char
 504               	oled_advance_char:
 505               	.LFB18:
 360:drivers/oled/ssd1306_sh1106.c **** 
 361:drivers/oled/ssd1306_sh1106.c **** void oled_advance_page(bool clearPageRemainder) {
 362:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 363:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 364:drivers/oled/ssd1306_sh1106.c **** 
 365:drivers/oled/ssd1306_sh1106.c ****     if (clearPageRemainder) {
 366:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 367:drivers/oled/ssd1306_sh1106.c ****         remaining = remaining / OLED_FONT_WIDTH;
 368:drivers/oled/ssd1306_sh1106.c **** 
 369:drivers/oled/ssd1306_sh1106.c ****         // Write empty character until next line
 370:drivers/oled/ssd1306_sh1106.c ****         while (remaining--) oled_write_char(' ', false);
 371:drivers/oled/ssd1306_sh1106.c ****     } else {
 372:drivers/oled/ssd1306_sh1106.c ****         // Next page index out of bounds?
 373:drivers/oled/ssd1306_sh1106.c ****         if (index + remaining >= OLED_MATRIX_SIZE) {
 374:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 375:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 376:drivers/oled/ssd1306_sh1106.c ****         }
 377:drivers/oled/ssd1306_sh1106.c **** 
 378:drivers/oled/ssd1306_sh1106.c ****         oled_cursor = &oled_buffer[index + remaining];
 379:drivers/oled/ssd1306_sh1106.c ****     }
 380:drivers/oled/ssd1306_sh1106.c **** }
 381:drivers/oled/ssd1306_sh1106.c **** 
 382:drivers/oled/ssd1306_sh1106.c **** void oled_advance_char(void) {
 506               		.loc 1 382 30 is_stmt 1 view -0
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 383:drivers/oled/ssd1306_sh1106.c ****     uint16_t nextIndex      = oled_cursor - &oled_buffer[0] + OLED_FONT_WIDTH;
 512               		.loc 1 383 5 view .LVU117
 513               		.loc 1 383 43 is_stmt 0 view .LVU118
 514 0000 2091 0000 		lds r18,oled_cursor
 515 0004 3091 0000 		lds r19,oled_cursor+1
 516               		.loc 1 383 61 view .LVU119
 517 0008 2050      		subi r18,lo8(oled_buffer-6)
 518 000a 3040      		sbci r19,hi8(oled_buffer-6)
 519               	.LVL37:
 384:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remainingSpace = oled_rotation_width - (nextIndex % oled_rotation_width);
 520               		.loc 1 384 5 is_stmt 1 view .LVU120
 521               		.loc 1 384 51 is_stmt 0 view .LVU121
 522 000c 4091 0000 		lds r20,oled_rotation_width
 523               		.loc 1 384 64 view .LVU122
 524 0010 642F      		mov r22,r20
 525 0012 70E0      		ldi r23,0
 526 0014 C901      		movw r24,r18
 527 0016 0E94 0000 		call __udivmodhi4
 528               		.loc 1 384 14 view .LVU123
 529 001a 481B      		sub r20,r24
 530               	.LVL38:
 385:drivers/oled/ssd1306_sh1106.c **** 
 386:drivers/oled/ssd1306_sh1106.c ****     // Do we have enough space on the current line for the next character
 387:drivers/oled/ssd1306_sh1106.c ****     if (remainingSpace < OLED_FONT_WIDTH) {
 531               		.loc 1 387 5 is_stmt 1 view .LVU124
 532               		.loc 1 387 8 is_stmt 0 view .LVU125
 533 001c 4630      		cpi r20,lo8(6)
 534 001e 00F4      		brsh .L26
 388:drivers/oled/ssd1306_sh1106.c ****         nextIndex += remainingSpace;
 535               		.loc 1 388 9 is_stmt 1 view .LVU126
 536               		.loc 1 388 19 is_stmt 0 view .LVU127
 537 0020 240F      		add r18,r20
 538 0022 311D      		adc r19,__zero_reg__
 539               	.LVL39:
 540               	.L26:
 389:drivers/oled/ssd1306_sh1106.c ****     }
 390:drivers/oled/ssd1306_sh1106.c **** 
 391:drivers/oled/ssd1306_sh1106.c ****     // Did we go out of bounds
 392:drivers/oled/ssd1306_sh1106.c ****     if (nextIndex >= OLED_MATRIX_SIZE) {
 541               		.loc 1 392 5 is_stmt 1 view .LVU128
 542               		.loc 1 392 8 is_stmt 0 view .LVU129
 543 0024 2115      		cp r18,__zero_reg__
 544 0026 82E0      		ldi r24,2
 545 0028 3807      		cpc r19,r24
 546 002a 00F0      		brlo .L27
 393:drivers/oled/ssd1306_sh1106.c ****         nextIndex = 0;
 547               		.loc 1 393 19 view .LVU130
 548 002c 30E0      		ldi r19,0
 549 002e 20E0      		ldi r18,0
 550               	.LVL40:
 551               	.L27:
 394:drivers/oled/ssd1306_sh1106.c ****     }
 395:drivers/oled/ssd1306_sh1106.c **** 
 396:drivers/oled/ssd1306_sh1106.c ****     // Update cursor position
 397:drivers/oled/ssd1306_sh1106.c ****     oled_cursor = &oled_buffer[nextIndex];
 552               		.loc 1 397 5 is_stmt 1 view .LVU131
 553               		.loc 1 397 19 is_stmt 0 view .LVU132
 554 0030 2050      		subi r18,lo8(-(oled_buffer))
 555 0032 3040      		sbci r19,hi8(-(oled_buffer))
 556               	.LVL41:
 557               		.loc 1 397 17 view .LVU133
 558 0034 3093 0000 		sts oled_cursor+1,r19
 559 0038 2093 0000 		sts oled_cursor,r18
 560               	/* epilogue start */
 398:drivers/oled/ssd1306_sh1106.c **** }
 561               		.loc 1 398 1 view .LVU134
 562 003c 0895      		ret
 563               		.cfi_endproc
 564               	.LFE18:
 566               		.section	.text.oled_write_char,"ax",@progbits
 567               	.global	oled_write_char
 569               	oled_write_char:
 570               	.LVL42:
 571               	.LFB19:
 399:drivers/oled/ssd1306_sh1106.c **** 
 400:drivers/oled/ssd1306_sh1106.c **** // Main handler that writes character data to the display buffer
 401:drivers/oled/ssd1306_sh1106.c **** void oled_write_char(const char data, bool invert) {
 572               		.loc 1 401 52 is_stmt 1 view -0
 573               		.cfi_startproc
 574               		.loc 1 401 52 is_stmt 0 view .LVU136
 575 0000 1F93      		push r17
 576               	.LCFI12:
 577               		.cfi_def_cfa_offset 3
 578               		.cfi_offset 17, -2
 579 0002 CF93      		push r28
 580               	.LCFI13:
 581               		.cfi_def_cfa_offset 4
 582               		.cfi_offset 28, -3
 583 0004 DF93      		push r29
 584               	.LCFI14:
 585               		.cfi_def_cfa_offset 5
 586               		.cfi_offset 29, -4
 587               	/* prologue: function */
 588               	/* frame size = 0 */
 589               	/* stack size = 3 */
 590               	.L__stack_usage = 3
 591 0006 982F      		mov r25,r24
 592 0008 162F      		mov r17,r22
 402:drivers/oled/ssd1306_sh1106.c ****     // Advance to the next line if newline
 403:drivers/oled/ssd1306_sh1106.c ****     if (data == '\n') {
 593               		.loc 1 403 5 is_stmt 1 view .LVU137
 404:drivers/oled/ssd1306_sh1106.c ****         // Old source wrote ' ' until end of line...
 405:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(true);
 594               		.loc 1 405 9 is_stmt 0 view .LVU138
 595 000a 81E0      		ldi r24,lo8(1)
 596               	.LVL43:
 403:drivers/oled/ssd1306_sh1106.c ****         // Old source wrote ' ' until end of line...
 597               		.loc 1 403 8 view .LVU139
 598 000c 9A30      		cpi r25,lo8(10)
 599 000e 01F0      		breq .L39
 406:drivers/oled/ssd1306_sh1106.c ****         return;
 407:drivers/oled/ssd1306_sh1106.c ****     }
 408:drivers/oled/ssd1306_sh1106.c **** 
 409:drivers/oled/ssd1306_sh1106.c ****     if (data == '\r') {
 600               		.loc 1 409 5 is_stmt 1 view .LVU140
 601               		.loc 1 409 8 is_stmt 0 view .LVU141
 602 0010 9D30      		cpi r25,lo8(13)
 603 0012 01F4      		brne .L30
 410:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 604               		.loc 1 410 9 is_stmt 1 view .LVU142
 605 0014 80E0      		ldi r24,0
 606               	.L39:
 607               	/* epilogue start */
 411:drivers/oled/ssd1306_sh1106.c ****         return;
 412:drivers/oled/ssd1306_sh1106.c ****     }
 413:drivers/oled/ssd1306_sh1106.c **** 
 414:drivers/oled/ssd1306_sh1106.c ****     // copy the current render buffer to check for dirty after
 415:drivers/oled/ssd1306_sh1106.c ****     static uint8_t oled_temp_buffer[OLED_FONT_WIDTH];
 416:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 417:drivers/oled/ssd1306_sh1106.c **** 
 418:drivers/oled/ssd1306_sh1106.c ****     _Static_assert(sizeof(font) >= ((OLED_FONT_END + 1 - OLED_FONT_START) * OLED_FONT_WIDTH), "OLED
 419:drivers/oled/ssd1306_sh1106.c **** 
 420:drivers/oled/ssd1306_sh1106.c ****     // set the reder buffer data
 421:drivers/oled/ssd1306_sh1106.c ****     uint8_t cast_data = (uint8_t)data;  // font based on unsigned type for index
 422:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 423:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 424:drivers/oled/ssd1306_sh1106.c ****     } else {
 425:drivers/oled/ssd1306_sh1106.c ****         const uint8_t *glyph = &font[(cast_data - OLED_FONT_START) * OLED_FONT_WIDTH];
 426:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 427:drivers/oled/ssd1306_sh1106.c ****     }
 428:drivers/oled/ssd1306_sh1106.c **** 
 429:drivers/oled/ssd1306_sh1106.c ****     // Invert if needed
 430:drivers/oled/ssd1306_sh1106.c ****     if (invert) {
 431:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 432:drivers/oled/ssd1306_sh1106.c ****     }
 433:drivers/oled/ssd1306_sh1106.c **** 
 434:drivers/oled/ssd1306_sh1106.c ****     // Dirty check
 435:drivers/oled/ssd1306_sh1106.c ****     if (memcmp(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH)) {
 436:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 437:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 438:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 439:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << ((index + OLED_FONT_WIDTH - 1) / OLED_BLOCK_SIZE));
 440:drivers/oled/ssd1306_sh1106.c ****     }
 441:drivers/oled/ssd1306_sh1106.c **** 
 442:drivers/oled/ssd1306_sh1106.c ****     // Finally move to the next char
 443:drivers/oled/ssd1306_sh1106.c ****     oled_advance_char();
 444:drivers/oled/ssd1306_sh1106.c **** }
 608               		.loc 1 444 1 is_stmt 0 view .LVU143
 609 0016 DF91      		pop r29
 610 0018 CF91      		pop r28
 611 001a 1F91      		pop r17
 410:drivers/oled/ssd1306_sh1106.c ****         oled_advance_page(false);
 612               		.loc 1 410 9 view .LVU144
 613 001c 0C94 0000 		jmp oled_advance_page
 614               	.LVL44:
 615               	.L30:
 415:drivers/oled/ssd1306_sh1106.c ****     memcpy(&oled_temp_buffer, oled_cursor, OLED_FONT_WIDTH);
 616               		.loc 1 415 5 is_stmt 1 view .LVU145
 416:drivers/oled/ssd1306_sh1106.c **** 
 617               		.loc 1 416 5 view .LVU146
 618 0020 C091 0000 		lds r28,oled_cursor
 619 0024 D091 0000 		lds r29,oled_cursor+1
 620 0028 86E0      		ldi r24,lo8(6)
 621 002a FE01      		movw r30,r28
 622 002c A0E0      		ldi r26,lo8(oled_temp_buffer.14)
 623 002e B0E0      		ldi r27,hi8(oled_temp_buffer.14)
 624               		0:
 625 0030 0190      		ld r0,Z+
 626 0032 0D92      		st X+,r0
 627 0034 8A95      		dec r24
 628 0036 01F4      		brne 0b
 418:drivers/oled/ssd1306_sh1106.c **** 
 629               		.loc 1 418 5 view .LVU147
 421:drivers/oled/ssd1306_sh1106.c ****     if (cast_data < OLED_FONT_START || cast_data > OLED_FONT_END) {
 630               		.loc 1 421 5 view .LVU148
 631               	.LVL45:
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 632               		.loc 1 422 5 view .LVU149
 422:drivers/oled/ssd1306_sh1106.c ****         memset(oled_cursor, 0x00, OLED_FONT_WIDTH);
 633               		.loc 1 422 8 is_stmt 0 view .LVU150
 634 0038 903E      		cpi r25,lo8(-32)
 635 003a 00F0      		brlo .L31
 423:drivers/oled/ssd1306_sh1106.c ****     } else {
 636               		.loc 1 423 9 is_stmt 1 view .LVU151
 637 003c 86E0      		ldi r24,lo8(6)
 638 003e FE01      		movw r30,r28
 639               		0:
 640 0040 1192      		st Z+,__zero_reg__
 641 0042 8A95      		dec r24
 642 0044 01F4      		brne 0b
 643               	.LVL46:
 644               	.L32:
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 645               		.loc 1 430 5 view .LVU152
 430:drivers/oled/ssd1306_sh1106.c ****         InvertCharacter(oled_cursor);
 646               		.loc 1 430 8 is_stmt 0 view .LVU153
 647 0046 1111      		cpse r17,__zero_reg__
 648 0048 00C0      		rjmp .L33
 649               	.L38:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 650               		.loc 1 435 5 is_stmt 1 view .LVU154
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 651               		.loc 1 435 9 is_stmt 0 view .LVU155
 652 004a C091 0000 		lds r28,oled_cursor
 653 004e D091 0000 		lds r29,oled_cursor+1
 654 0052 46E0      		ldi r20,lo8(6)
 655 0054 50E0      		ldi r21,0
 656 0056 BE01      		movw r22,r28
 657 0058 80E0      		ldi r24,lo8(oled_temp_buffer.14)
 658 005a 90E0      		ldi r25,hi8(oled_temp_buffer.14)
 659 005c 0E94 0000 		call memcmp
 660               	.LVL47:
 435:drivers/oled/ssd1306_sh1106.c ****         uint16_t index = oled_cursor - &oled_buffer[0];
 661               		.loc 1 435 8 view .LVU156
 662 0060 892B      		or r24,r25
 663 0062 01F4      		brne .L34
 664               	.L35:
 443:drivers/oled/ssd1306_sh1106.c **** }
 665               		.loc 1 443 5 is_stmt 1 view .LVU157
 666               	/* epilogue start */
 667               		.loc 1 444 1 is_stmt 0 view .LVU158
 668 0064 DF91      		pop r29
 669 0066 CF91      		pop r28
 670 0068 1F91      		pop r17
 671               	.LVL48:
 443:drivers/oled/ssd1306_sh1106.c **** }
 672               		.loc 1 443 5 view .LVU159
 673 006a 0C94 0000 		jmp oled_advance_char
 674               	.LVL49:
 675               	.L31:
 676               	.LBB17:
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 677               		.loc 1 425 9 is_stmt 1 view .LVU160
 426:drivers/oled/ssd1306_sh1106.c ****     }
 678               		.loc 1 426 9 view .LVU161
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 679               		.loc 1 425 68 is_stmt 0 view .LVU162
 680 006e F6E0      		ldi r31,lo8(6)
 681 0070 9F9F      		mul r25,r31
 682 0072 B001      		movw r22,r0
 683 0074 1124      		clr __zero_reg__
 425:drivers/oled/ssd1306_sh1106.c ****         memcpy_P(oled_cursor, glyph, OLED_FONT_WIDTH);
 684               		.loc 1 425 24 view .LVU163
 685 0076 6050      		subi r22,lo8(-(font))
 686 0078 7040      		sbci r23,hi8(-(font))
 426:drivers/oled/ssd1306_sh1106.c ****     }
 687               		.loc 1 426 9 view .LVU164
 688 007a 46E0      		ldi r20,lo8(6)
 689 007c 50E0      		ldi r21,0
 690 007e CE01      		movw r24,r28
 691 0080 0E94 0000 		call memcpy_P
 692               	.LVL50:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 693               		.loc 1 426 9 view .LVU165
 694 0084 00C0      		rjmp .L32
 695               	.LVL51:
 696               	.L33:
 426:drivers/oled/ssd1306_sh1106.c ****     }
 697               		.loc 1 426 9 view .LVU166
 698               	.LBE17:
 431:drivers/oled/ssd1306_sh1106.c ****     }
 699               		.loc 1 431 9 view .LVU167
 700 0086 E091 0000 		lds r30,oled_cursor
 701 008a F091 0000 		lds r31,oled_cursor+1
 431:drivers/oled/ssd1306_sh1106.c ****     }
 702               		.loc 1 431 9 is_stmt 1 view .LVU168
 703               	.LVL52:
 704               	.LBB18:
 705               	.LBI18:
 155:drivers/oled/ssd1306_sh1106.c ****     const uint8_t *end = cursor + OLED_FONT_WIDTH;
 706               		.loc 1 155 13 view .LVU169
 707               	.LBB19:
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 708               		.loc 1 156 5 view .LVU170
 156:drivers/oled/ssd1306_sh1106.c ****     while (cursor < end) {
 709               		.loc 1 156 20 is_stmt 0 view .LVU171
 710 008e 9F01      		movw r18,r30
 711 0090 2A5F      		subi r18,-6
 712 0092 3F4F      		sbci r19,-1
 713               	.LVL53:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 714               		.loc 1 157 5 is_stmt 1 view .LVU172
 715               	.L36:
 157:drivers/oled/ssd1306_sh1106.c ****         *cursor = ~(*cursor);
 716               		.loc 1 157 19 view .LVU173
 717 0094 2E17      		cp r18,r30
 718 0096 3F07      		cpc r19,r31
 719 0098 01F0      		breq .L38
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 720               		.loc 1 158 9 view .LVU174
 158:drivers/oled/ssd1306_sh1106.c ****         cursor++;
 721               		.loc 1 158 17 is_stmt 0 view .LVU175
 722 009a 8081      		ld r24,Z
 723 009c 8095      		com r24
 724 009e 8193      		st Z+,r24
 725               	.LVL54:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 726               		.loc 1 159 9 is_stmt 1 view .LVU176
 159:drivers/oled/ssd1306_sh1106.c ****     }
 727               		.loc 1 159 9 is_stmt 0 view .LVU177
 728 00a0 00C0      		rjmp .L36
 729               	.LVL55:
 730               	.L34:
 159:drivers/oled/ssd1306_sh1106.c ****     }
 731               		.loc 1 159 9 view .LVU178
 732               	.LBE19:
 733               	.LBE18:
 734               	.LBB20:
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 735               		.loc 1 436 9 is_stmt 1 view .LVU179
 436:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 736               		.loc 1 436 38 is_stmt 0 view .LVU180
 737 00a2 C050      		subi r28,lo8(oled_buffer)
 738 00a4 D040      		sbci r29,hi8(oled_buffer)
 739               	.LVL56:
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 740               		.loc 1 437 9 is_stmt 1 view .LVU181
 439:drivers/oled/ssd1306_sh1106.c ****     }
 741               		.loc 1 439 9 view .LVU182
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 742               		.loc 1 437 53 is_stmt 0 view .LVU183
 743 00a6 CE01      		movw r24,r28
 744 00a8 25E0      		ldi r18,5
 745               		1:
 746 00aa 9695      		lsr r25
 747 00ac 8795      		ror r24
 748 00ae 2A95      		dec r18
 749 00b0 01F4      		brne 1b
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 750               		.loc 1 437 43 view .LVU184
 751 00b2 21E0      		ldi r18,lo8(1)
 752 00b4 30E0      		ldi r19,0
 753 00b6 A901      		movw r20,r18
 754 00b8 00C0      		rjmp 2f
 755               		1:
 756 00ba 440F      		lsl r20
 757 00bc 551F      		rol r21
 758               		2:
 759 00be 8A95      		dec r24
 760 00c0 02F4      		brpl 1b
 761 00c2 CA01      		movw r24,r20
 437:drivers/oled/ssd1306_sh1106.c ****         // Edgecase check if the written data spans the 2 chunks
 762               		.loc 1 437 20 view .LVU185
 763 00c4 4091 0000 		lds r20,oled_dirty
 764 00c8 5091 0000 		lds r21,oled_dirty+1
 765 00cc 842B      		or r24,r20
 766 00ce 952B      		or r25,r21
 439:drivers/oled/ssd1306_sh1106.c ****     }
 767               		.loc 1 439 72 view .LVU186
 768 00d0 2596      		adiw r28,5
 769               	.LVL57:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 770               		.loc 1 439 77 view .LVU187
 771 00d2 45E0      		ldi r20,5
 772               		1:
 773 00d4 D695      		lsr r29
 774 00d6 C795      		ror r28
 775 00d8 4A95      		dec r20
 776 00da 01F4      		brne 1b
 777               	.LVL58:
 439:drivers/oled/ssd1306_sh1106.c ****     }
 778               		.loc 1 439 43 view .LVU188
 779 00dc 00C0      		rjmp 2f
 780               		1:
 781 00de 220F      		lsl r18
 782 00e0 331F      		rol r19
 783               		2:
 784 00e2 CA95      		dec r28
 785 00e4 02F4      		brpl 1b
 439:drivers/oled/ssd1306_sh1106.c ****     }
 786               		.loc 1 439 20 view .LVU189
 787 00e6 822B      		or r24,r18
 788 00e8 932B      		or r25,r19
 789 00ea 9093 0000 		sts oled_dirty+1,r25
 790 00ee 8093 0000 		sts oled_dirty,r24
 791 00f2 00C0      		rjmp .L35
 792               	.LBE20:
 793               		.cfi_endproc
 794               	.LFE19:
 796               		.section	.text.oled_advance_page,"ax",@progbits
 797               	.global	oled_advance_page
 799               	oled_advance_page:
 800               	.LVL59:
 801               	.LFB17:
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 802               		.loc 1 361 49 is_stmt 1 view -0
 803               		.cfi_startproc
 361:drivers/oled/ssd1306_sh1106.c ****     uint16_t index     = oled_cursor - &oled_buffer[0];
 804               		.loc 1 361 49 is_stmt 0 view .LVU191
 805 0000 CF93      		push r28
 806               	.LCFI15:
 807               		.cfi_def_cfa_offset 3
 808               		.cfi_offset 28, -2
 809               	/* prologue: function */
 810               	/* frame size = 0 */
 811               	/* stack size = 1 */
 812               	.L__stack_usage = 1
 813 0002 E82F      		mov r30,r24
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 814               		.loc 1 362 5 is_stmt 1 view .LVU192
 362:drivers/oled/ssd1306_sh1106.c ****     uint8_t  remaining = oled_rotation_width - (index % oled_rotation_width);
 815               		.loc 1 362 38 is_stmt 0 view .LVU193
 816 0004 2091 0000 		lds r18,oled_cursor
 817 0008 3091 0000 		lds r19,oled_cursor+1
 818 000c 2050      		subi r18,lo8(oled_buffer)
 819 000e 3040      		sbci r19,hi8(oled_buffer)
 820               	.LVL60:
 363:drivers/oled/ssd1306_sh1106.c **** 
 821               		.loc 1 363 5 is_stmt 1 view .LVU194
 363:drivers/oled/ssd1306_sh1106.c **** 
 822               		.loc 1 363 46 is_stmt 0 view .LVU195
 823 0010 4091 0000 		lds r20,oled_rotation_width
 363:drivers/oled/ssd1306_sh1106.c **** 
 824               		.loc 1 363 55 view .LVU196
 825 0014 642F      		mov r22,r20
 826 0016 70E0      		ldi r23,0
 827 0018 C901      		movw r24,r18
 828               	.LVL61:
 363:drivers/oled/ssd1306_sh1106.c **** 
 829               		.loc 1 363 55 view .LVU197
 830 001a 0E94 0000 		call __udivmodhi4
 363:drivers/oled/ssd1306_sh1106.c **** 
 831               		.loc 1 363 14 view .LVU198
 832 001e 481B      		sub r20,r24
 833 0020 842F      		mov r24,r20
 834               	.LVL62:
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 835               		.loc 1 365 5 is_stmt 1 view .LVU199
 365:drivers/oled/ssd1306_sh1106.c ****         // Remaining Char count
 836               		.loc 1 365 8 is_stmt 0 view .LVU200
 837 0022 EE23      		tst r30
 838 0024 01F0      		breq .L41
 367:drivers/oled/ssd1306_sh1106.c **** 
 839               		.loc 1 367 9 is_stmt 1 view .LVU201
 367:drivers/oled/ssd1306_sh1106.c **** 
 840               		.loc 1 367 19 is_stmt 0 view .LVU202
 841 0026 66E0      		ldi r22,lo8(6)
 842 0028 0E94 0000 		call __udivmodqi4
 843 002c C82F      		mov r28,r24
 844               	.LVL63:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 845               		.loc 1 370 9 is_stmt 1 view .LVU203
 846               	.L42:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 847               		.loc 1 370 16 discriminator 1 view .LVU204
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 848               		.loc 1 370 25 is_stmt 0 discriminator 1 view .LVU205
 849               	.LVL64:
 850 002e C150      		subi r28,1
 851 0030 00F4      		brcc .L43
 852               	.L40:
 853               	/* epilogue start */
 380:drivers/oled/ssd1306_sh1106.c **** 
 854               		.loc 1 380 1 view .LVU206
 855 0032 CF91      		pop r28
 856 0034 0895      		ret
 857               	.LVL65:
 858               	.L43:
 370:drivers/oled/ssd1306_sh1106.c ****     } else {
 859               		.loc 1 370 29 is_stmt 1 discriminator 2 view .LVU207
 860 0036 60E0      		ldi r22,0
 861 0038 80E2      		ldi r24,lo8(32)
 862 003a 0E94 0000 		call oled_write_char
 863               	.LVL66:
 864 003e 00C0      		rjmp .L42
 865               	.LVL67:
 866               	.L41:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 867               		.loc 1 373 9 view .LVU208
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 868               		.loc 1 373 19 is_stmt 0 view .LVU209
 869 0040 A901      		movw r20,r18
 870               	.LVL68:
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 871               		.loc 1 373 19 view .LVU210
 872 0042 480F      		add r20,r24
 873 0044 511D      		adc r21,__zero_reg__
 373:drivers/oled/ssd1306_sh1106.c ****             index     = 0;
 874               		.loc 1 373 12 view .LVU211
 875 0046 4115      		cp r20,__zero_reg__
 876 0048 5240      		sbci r21,2
 877 004a 00F0      		brlo .L45
 375:drivers/oled/ssd1306_sh1106.c ****         }
 878               		.loc 1 375 23 view .LVU212
 879 004c 80E0      		ldi r24,0
 880               	.LVL69:
 374:drivers/oled/ssd1306_sh1106.c ****             remaining = 0;
 881               		.loc 1 374 23 view .LVU213
 882 004e 30E0      		ldi r19,0
 883 0050 20E0      		ldi r18,0
 884               	.LVL70:
 885               	.L45:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 886               		.loc 1 378 9 is_stmt 1 view .LVU214
 378:drivers/oled/ssd1306_sh1106.c ****     }
 887               		.loc 1 378 42 is_stmt 0 view .LVU215
 888 0052 280F      		add r18,r24
 889 0054 311D      		adc r19,__zero_reg__
 890               	.LVL71:
 378:drivers/oled/ssd1306_sh1106.c ****     }
 891               		.loc 1 378 23 view .LVU216
 892 0056 2050      		subi r18,lo8(-(oled_buffer))
 893 0058 3040      		sbci r19,hi8(-(oled_buffer))
 378:drivers/oled/ssd1306_sh1106.c ****     }
 894               		.loc 1 378 21 view .LVU217
 895 005a 3093 0000 		sts oled_cursor+1,r19
 896 005e 2093 0000 		sts oled_cursor,r18
 380:drivers/oled/ssd1306_sh1106.c **** 
 897               		.loc 1 380 1 view .LVU218
 898 0062 00C0      		rjmp .L40
 899               		.cfi_endproc
 900               	.LFE17:
 902               		.section	.text.oled_write,"ax",@progbits
 903               	.global	oled_write
 905               	oled_write:
 906               	.LVL72:
 907               	.LFB20:
 445:drivers/oled/ssd1306_sh1106.c **** 
 446:drivers/oled/ssd1306_sh1106.c **** void oled_write(const char *data, bool invert) {
 908               		.loc 1 446 48 is_stmt 1 view -0
 909               		.cfi_startproc
 910               		.loc 1 446 48 is_stmt 0 view .LVU220
 911 0000 FF92      		push r15
 912               	.LCFI16:
 913               		.cfi_def_cfa_offset 3
 914               		.cfi_offset 15, -2
 915 0002 0F93      		push r16
 916               	.LCFI17:
 917               		.cfi_def_cfa_offset 4
 918               		.cfi_offset 16, -3
 919 0004 1F93      		push r17
 920               	.LCFI18:
 921               		.cfi_def_cfa_offset 5
 922               		.cfi_offset 17, -4
 923 0006 CF93      		push r28
 924               	.LCFI19:
 925               		.cfi_def_cfa_offset 6
 926               		.cfi_offset 28, -5
 927 0008 DF93      		push r29
 928               	.LCFI20:
 929               		.cfi_def_cfa_offset 7
 930               		.cfi_offset 29, -6
 931               	/* prologue: function */
 932               	/* frame size = 0 */
 933               	/* stack size = 5 */
 934               	.L__stack_usage = 5
 935 000a EC01      		movw r28,r24
 936 000c F62E      		mov r15,r22
 447:drivers/oled/ssd1306_sh1106.c ****     const char *end = data + strlen(data);
 937               		.loc 1 447 5 is_stmt 1 view .LVU221
 938               		.loc 1 447 30 is_stmt 0 view .LVU222
 939 000e FC01      		movw r30,r24
 940               		0:
 941 0010 0190      		ld __tmp_reg__,Z+
 942 0012 0020      		tst __tmp_reg__
 943 0014 01F4      		brne 0b
 944               		.loc 1 447 17 view .LVU223
 945 0016 8F01      		movw r16,r30
 946 0018 0150      		subi r16,1
 947 001a 1109      		sbc r17,__zero_reg__
 948               	.LVL73:
 448:drivers/oled/ssd1306_sh1106.c ****     while (data < end) {
 949               		.loc 1 448 5 is_stmt 1 view .LVU224
 950               	.L47:
 951               		.loc 1 448 17 view .LVU225
 952 001c C017      		cp r28,r16
 953 001e D107      		cpc r29,r17
 954 0020 00F0      		brlo .L48
 955               	/* epilogue start */
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 450:drivers/oled/ssd1306_sh1106.c ****         data++;
 451:drivers/oled/ssd1306_sh1106.c ****     }
 452:drivers/oled/ssd1306_sh1106.c **** }
 956               		.loc 1 452 1 is_stmt 0 view .LVU226
 957 0022 DF91      		pop r29
 958 0024 CF91      		pop r28
 959               	.LVL74:
 960               		.loc 1 452 1 view .LVU227
 961 0026 1F91      		pop r17
 962 0028 0F91      		pop r16
 963               	.LVL75:
 964               		.loc 1 452 1 view .LVU228
 965 002a FF90      		pop r15
 966               	.LVL76:
 967               		.loc 1 452 1 view .LVU229
 968 002c 0895      		ret
 969               	.LVL77:
 970               	.L48:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 971               		.loc 1 449 9 is_stmt 1 view .LVU230
 972 002e 6F2D      		mov r22,r15
 973 0030 8991      		ld r24,Y+
 974               	.LVL78:
 449:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(*data, invert);
 975               		.loc 1 449 9 is_stmt 0 view .LVU231
 976 0032 0E94 0000 		call oled_write_char
 977               	.LVL79:
 450:drivers/oled/ssd1306_sh1106.c ****     }
 978               		.loc 1 450 9 is_stmt 1 view .LVU232
 450:drivers/oled/ssd1306_sh1106.c ****     }
 979               		.loc 1 450 9 is_stmt 0 view .LVU233
 980 0036 00C0      		rjmp .L47
 981               		.cfi_endproc
 982               	.LFE20:
 984               		.section	.text.oled_write_ln,"ax",@progbits
 985               	.global	oled_write_ln
 987               	oled_write_ln:
 988               	.LVL80:
 989               	.LFB21:
 453:drivers/oled/ssd1306_sh1106.c **** 
 454:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln(const char *data, bool invert) {
 990               		.loc 1 454 51 is_stmt 1 view -0
 991               		.cfi_startproc
 992               	/* prologue: function */
 993               	/* frame size = 0 */
 994               	/* stack size = 0 */
 995               	.L__stack_usage = 0
 455:drivers/oled/ssd1306_sh1106.c ****     oled_write(data, invert);
 996               		.loc 1 455 5 view .LVU235
 997 0000 0E94 0000 		call oled_write
 998               	.LVL81:
 456:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 999               		.loc 1 456 5 view .LVU236
 1000 0004 81E0      		ldi r24,lo8(1)
 1001 0006 0C94 0000 		jmp oled_advance_page
 1002               	.LVL82:
 1003               		.cfi_endproc
 1004               	.LFE21:
 1006               		.section	.text.oled_pan,"ax",@progbits
 1007               	.global	oled_pan
 1009               	oled_pan:
 1010               	.LVL83:
 1011               	.LFB22:
 457:drivers/oled/ssd1306_sh1106.c **** }
 458:drivers/oled/ssd1306_sh1106.c **** 
 459:drivers/oled/ssd1306_sh1106.c **** void oled_pan(bool left) {
 1012               		.loc 1 459 26 view -0
 1013               		.cfi_startproc
 1014               		.loc 1 459 26 is_stmt 0 view .LVU238
 1015 0000 EF92      		push r14
 1016               	.LCFI21:
 1017               		.cfi_def_cfa_offset 3
 1018               		.cfi_offset 14, -2
 1019 0002 FF92      		push r15
 1020               	.LCFI22:
 1021               		.cfi_def_cfa_offset 4
 1022               		.cfi_offset 15, -3
 1023 0004 1F93      		push r17
 1024               	.LCFI23:
 1025               		.cfi_def_cfa_offset 5
 1026               		.cfi_offset 17, -4
 1027 0006 CF93      		push r28
 1028               	.LCFI24:
 1029               		.cfi_def_cfa_offset 6
 1030               		.cfi_offset 28, -5
 1031 0008 DF93      		push r29
 1032               	.LCFI25:
 1033               		.cfi_def_cfa_offset 7
 1034               		.cfi_offset 29, -6
 1035               	/* prologue: function */
 1036               	/* frame size = 0 */
 1037               	/* stack size = 5 */
 1038               	.L__stack_usage = 5
 1039 000a 182F      		mov r17,r24
 460:drivers/oled/ssd1306_sh1106.c ****     uint16_t i = 0;
 1040               		.loc 1 460 5 is_stmt 1 view .LVU239
 1041               	.LVL84:
 461:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t y = 0; y < OLED_DISPLAY_HEIGHT / 8; y++) {
 1042               		.loc 1 461 5 view .LVU240
 1043               	.LBB21:
 1044               		.loc 1 461 10 view .LVU241
 1045               		.loc 1 461 28 view .LVU242
 1046 000c C0E0      		ldi r28,lo8(oled_buffer)
 1047 000e D0E0      		ldi r29,hi8(oled_buffer)
 1048 0010 80E0      		ldi r24,lo8(oled_buffer+512)
 1049 0012 E82E      		mov r14,r24
 1050 0014 80E0      		ldi r24,hi8(oled_buffer+512)
 1051 0016 F82E      		mov r15,r24
 1052               	.LVL85:
 1053               	.L52:
 462:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1054               		.loc 1 462 9 view .LVU243
 1055 0018 CE01      		movw r24,r28
 1056 001a 0196      		adiw r24,1
 1057               	.LBB22:
 463:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 464:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 465:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i + 1];
 1058               		.loc 1 465 32 is_stmt 0 view .LVU244
 1059 001c 4FE7      		ldi r20,lo8(127)
 1060 001e 50E0      		ldi r21,0
 1061               	.LBE22:
 1062               	.LBB23:
 466:drivers/oled/ssd1306_sh1106.c ****             }
 467:drivers/oled/ssd1306_sh1106.c ****         } else {
 468:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = OLED_DISPLAY_WIDTH - 1; x > 0; x--) {
 469:drivers/oled/ssd1306_sh1106.c ****                 i              = y * OLED_DISPLAY_WIDTH + x;
 470:drivers/oled/ssd1306_sh1106.c ****                 oled_buffer[i] = oled_buffer[i - 1];
 1063               		.loc 1 470 32 view .LVU245
 1064 0020 BE01      		movw r22,r28
 1065               	.LBE23:
 462:drivers/oled/ssd1306_sh1106.c ****             for (uint16_t x = 0; x < OLED_DISPLAY_WIDTH - 1; x++) {
 1066               		.loc 1 462 12 view .LVU246
 1067 0022 1123      		tst r17
 1068 0024 01F0      		breq .L57
 1069               	.LBB24:
 465:drivers/oled/ssd1306_sh1106.c ****             }
 1070               		.loc 1 465 32 view .LVU247
 1071 0026 BC01      		movw r22,r24
 1072 0028 CE01      		movw r24,r28
 1073               	.L57:
 1074 002a 0E94 0000 		call memmove
 1075               	.LVL86:
 1076               	.LBE24:
 461:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1077               		.loc 1 461 56 is_stmt 1 view .LVU248
 461:drivers/oled/ssd1306_sh1106.c ****         if (left) {
 1078               		.loc 1 461 28 view .LVU249
 1079 002e C058      		subi r28,-128
 1080 0030 DF4F      		sbci r29,-1
 1081 0032 EC16      		cp r14,r28
 1082 0034 FD06      		cpc r15,r29
 1083 0036 01F4      		brne .L52
 1084               	.LBE21:
 471:drivers/oled/ssd1306_sh1106.c ****             }
 472:drivers/oled/ssd1306_sh1106.c ****         }
 473:drivers/oled/ssd1306_sh1106.c ****     }
 474:drivers/oled/ssd1306_sh1106.c ****     oled_dirty = OLED_ALL_BLOCKS_MASK;
 1085               		.loc 1 474 5 view .LVU250
 1086               		.loc 1 474 16 is_stmt 0 view .LVU251
 1087 0038 8FEF      		ldi r24,lo8(-1)
 1088 003a 9FEF      		ldi r25,lo8(-1)
 1089 003c 9093 0000 		sts oled_dirty+1,r25
 1090 0040 8093 0000 		sts oled_dirty,r24
 1091               	/* epilogue start */
 475:drivers/oled/ssd1306_sh1106.c **** }
 1092               		.loc 1 475 1 view .LVU252
 1093 0044 DF91      		pop r29
 1094 0046 CF91      		pop r28
 1095 0048 1F91      		pop r17
 1096               	.LVL87:
 1097               		.loc 1 475 1 view .LVU253
 1098 004a FF90      		pop r15
 1099 004c EF90      		pop r14
 1100 004e 0895      		ret
 1101               		.cfi_endproc
 1102               	.LFE22:
 1104               		.section	.text.oled_read_raw,"ax",@progbits
 1105               	.global	oled_read_raw
 1107               	oled_read_raw:
 1108               	.LVL88:
 1109               	.LFB23:
 476:drivers/oled/ssd1306_sh1106.c **** 
 477:drivers/oled/ssd1306_sh1106.c **** oled_buffer_reader_t oled_read_raw(uint16_t start_index) {
 1110               		.loc 1 477 58 is_stmt 1 view -0
 1111               		.cfi_startproc
 1112               		.loc 1 477 58 is_stmt 0 view .LVU255
 1113 0000 CF93      		push r28
 1114               	.LCFI26:
 1115               		.cfi_def_cfa_offset 3
 1116               		.cfi_offset 28, -2
 1117 0002 DF93      		push r29
 1118               	.LCFI27:
 1119               		.cfi_def_cfa_offset 4
 1120               		.cfi_offset 29, -3
 1121 0004 00D0      		rcall .
 1122 0006 00D0      		rcall .
 1123               	.LCFI28:
 1124               		.cfi_def_cfa_offset 8
 1125 0008 CDB7      		in r28,__SP_L__
 1126 000a DEB7      		in r29,__SP_H__
 1127               	.LCFI29:
 1128               		.cfi_def_cfa_register 28
 1129               	/* prologue: function */
 1130               	/* frame size = 4 */
 1131               	/* stack size = 6 */
 1132               	.L__stack_usage = 6
 1133 000c 9C01      		movw r18,r24
 478:drivers/oled/ssd1306_sh1106.c ****     if (start_index > OLED_MATRIX_SIZE) start_index = OLED_MATRIX_SIZE;
 1134               		.loc 1 478 5 is_stmt 1 view .LVU256
 1135 000e 8130      		cpi r24,1
 1136 0010 9240      		sbci r25,2
 1137 0012 00F0      		brlo .L59
 1138 0014 20E0      		ldi r18,0
 1139 0016 32E0      		ldi r19,lo8(2)
 1140               	.L59:
 1141               	.LVL89:
 479:drivers/oled/ssd1306_sh1106.c ****     oled_buffer_reader_t ret_reader;
 1142               		.loc 1 479 5 view .LVU257
 480:drivers/oled/ssd1306_sh1106.c ****     ret_reader.current_element         = &oled_buffer[start_index];
 1143               		.loc 1 480 5 view .LVU258
 481:drivers/oled/ssd1306_sh1106.c ****     ret_reader.remaining_element_count = OLED_MATRIX_SIZE - start_index;
 1144               		.loc 1 481 5 view .LVU259
 482:drivers/oled/ssd1306_sh1106.c ****     return ret_reader;
 1145               		.loc 1 482 5 view .LVU260
 1146               		.loc 1 482 12 is_stmt 0 view .LVU261
 1147 0018 C901      		movw r24,r18
 1148 001a 8050      		subi r24,lo8(-(oled_buffer))
 1149 001c 9040      		sbci r25,hi8(-(oled_buffer))
 1150               	.LVL90:
 1151               		.loc 1 482 12 view .LVU262
 1152 001e 9A83      		std Y+2,r25
 1153 0020 8983      		std Y+1,r24
 1154 0022 80E0      		ldi r24,0
 1155 0024 92E0      		ldi r25,lo8(2)
 1156               	.LVL91:
 1157               		.loc 1 482 12 view .LVU263
 1158 0026 AC01      		movw r20,r24
 1159 0028 421B      		sub r20,r18
 1160 002a 530B      		sbc r21,r19
 1161               	.LVL92:
 1162               		.loc 1 482 12 view .LVU264
 1163 002c 5C83      		std Y+4,r21
 1164 002e 4B83      		std Y+3,r20
 1165               	.LVL93:
 483:drivers/oled/ssd1306_sh1106.c **** }
 1166               		.loc 1 483 1 view .LVU265
 1167 0030 6981      		ldd r22,Y+1
 1168 0032 7A81      		ldd r23,Y+2
 1169 0034 8B81      		ldd r24,Y+3
 1170 0036 9C81      		ldd r25,Y+4
 1171               	/* epilogue start */
 1172 0038 0F90      		pop __tmp_reg__
 1173 003a 0F90      		pop __tmp_reg__
 1174 003c 0F90      		pop __tmp_reg__
 1175 003e 0F90      		pop __tmp_reg__
 1176 0040 DF91      		pop r29
 1177 0042 CF91      		pop r28
 1178 0044 0895      		ret
 1179               		.cfi_endproc
 1180               	.LFE23:
 1182               		.section	.text.oled_write_raw_byte,"ax",@progbits
 1183               	.global	oled_write_raw_byte
 1185               	oled_write_raw_byte:
 1186               	.LVL94:
 1187               	.LFB24:
 484:drivers/oled/ssd1306_sh1106.c **** 
 485:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_byte(const char data, uint16_t index) {
 1188               		.loc 1 485 59 is_stmt 1 view -0
 1189               		.cfi_startproc
 1190               	/* prologue: function */
 1191               	/* frame size = 0 */
 1192               	/* stack size = 0 */
 1193               	.L__stack_usage = 0
 1194               		.loc 1 485 59 is_stmt 0 view .LVU267
 1195 0000 9B01      		movw r18,r22
 486:drivers/oled/ssd1306_sh1106.c ****     if (index > OLED_MATRIX_SIZE) index = OLED_MATRIX_SIZE;
 1196               		.loc 1 486 5 is_stmt 1 view .LVU268
 1197 0002 6130      		cpi r22,1
 1198 0004 7240      		sbci r23,2
 1199 0006 00F0      		brlo .L61
 1200 0008 20E0      		ldi r18,0
 1201 000a 32E0      		ldi r19,lo8(2)
 1202               	.L61:
 1203               	.LVL95:
 487:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] == data) return;
 1204               		.loc 1 487 5 view .LVU269
 1205               		.loc 1 487 20 is_stmt 0 view .LVU270
 1206 000c F901      		movw r30,r18
 1207 000e E050      		subi r30,lo8(-(oled_buffer))
 1208 0010 F040      		sbci r31,hi8(-(oled_buffer))
 1209               		.loc 1 487 8 view .LVU271
 1210 0012 9081      		ld r25,Z
 1211 0014 9817      		cp r25,r24
 1212 0016 01F0      		breq .L60
 488:drivers/oled/ssd1306_sh1106.c ****     oled_buffer[index] = data;
 1213               		.loc 1 488 5 is_stmt 1 view .LVU272
 1214               		.loc 1 488 24 is_stmt 0 view .LVU273
 1215 0018 8083      		st Z,r24
 489:drivers/oled/ssd1306_sh1106.c ****     oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1216               		.loc 1 489 5 is_stmt 1 view .LVU274
 1217               		.loc 1 489 49 is_stmt 0 view .LVU275
 1218 001a 85E0      		ldi r24,5
 1219               		1:
 1220 001c 3695      		lsr r19
 1221 001e 2795      		ror r18
 1222 0020 8A95      		dec r24
 1223 0022 01F4      		brne 1b
 1224               	.LVL96:
 1225               		.loc 1 489 39 view .LVU276
 1226 0024 81E0      		ldi r24,lo8(1)
 1227 0026 90E0      		ldi r25,0
 1228 0028 AC01      		movw r20,r24
 1229 002a 00C0      		rjmp 2f
 1230               		1:
 1231 002c 440F      		lsl r20
 1232 002e 551F      		rol r21
 1233               		2:
 1234 0030 2A95      		dec r18
 1235 0032 02F4      		brpl 1b
 1236 0034 9A01      		movw r18,r20
 1237               		.loc 1 489 16 view .LVU277
 1238 0036 8091 0000 		lds r24,oled_dirty
 1239 003a 9091 0000 		lds r25,oled_dirty+1
 1240 003e 842B      		or r24,r20
 1241 0040 932B      		or r25,r19
 1242 0042 9093 0000 		sts oled_dirty+1,r25
 1243 0046 8093 0000 		sts oled_dirty,r24
 1244               	.LVL97:
 1245               	.L60:
 1246               	/* epilogue start */
 490:drivers/oled/ssd1306_sh1106.c **** }
 1247               		.loc 1 490 1 view .LVU278
 1248 004a 0895      		ret
 1249               		.cfi_endproc
 1250               	.LFE24:
 1252               		.section	.text.oled_write_raw,"ax",@progbits
 1253               	.global	oled_write_raw
 1255               	oled_write_raw:
 1256               	.LVL98:
 1257               	.LFB25:
 491:drivers/oled/ssd1306_sh1106.c **** 
 492:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw(const char *data, uint16_t size) {
 1258               		.loc 1 492 54 is_stmt 1 view -0
 1259               		.cfi_startproc
 1260               	/* prologue: function */
 1261               	/* frame size = 0 */
 1262               	/* stack size = 0 */
 1263               	.L__stack_usage = 0
 1264               		.loc 1 492 54 is_stmt 0 view .LVU280
 1265 0000 AB01      		movw r20,r22
 493:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1266               		.loc 1 493 5 is_stmt 1 view .LVU281
 1267               		.loc 1 493 47 is_stmt 0 view .LVU282
 1268 0002 2091 0000 		lds r18,oled_cursor
 1269 0006 3091 0000 		lds r19,oled_cursor+1
 1270 000a 2050      		subi r18,lo8(oled_buffer)
 1271 000c 3040      		sbci r19,hi8(oled_buffer)
 1272               	.LVL99:
 494:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1273               		.loc 1 494 5 is_stmt 1 view .LVU283
 1274               		.loc 1 494 15 is_stmt 0 view .LVU284
 1275 000e B901      		movw r22,r18
 1276               	.LVL100:
 1277               		.loc 1 494 15 view .LVU285
 1278 0010 640F      		add r22,r20
 1279 0012 751F      		adc r23,r21
 1280               		.loc 1 494 8 view .LVU286
 1281 0014 6130      		cpi r22,1
 1282 0016 7240      		sbci r23,2
 1283 0018 00F0      		brlo .L64
 1284               		.loc 1 494 57 is_stmt 1 discriminator 1 view .LVU287
 1285               		.loc 1 494 62 is_stmt 0 discriminator 1 view .LVU288
 1286 001a 40E0      		ldi r20,0
 1287 001c 52E0      		ldi r21,lo8(2)
 1288               	.LVL101:
 1289               		.loc 1 494 62 discriminator 1 view .LVU289
 1290 001e 421B      		sub r20,r18
 1291 0020 530B      		sbc r21,r19
 1292               	.LVL102:
 1293               	.L64:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1294               		.loc 1 495 5 is_stmt 1 view .LVU290
 1295               	.LBB25:
 1296               		.loc 1 495 10 view .LVU291
 1297               		.loc 1 495 66 is_stmt 0 view .LVU292
 1298 0022 420F      		add r20,r18
 1299 0024 531F      		adc r21,r19
 1300               	.LVL103:
 1301               	.LBB26:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 497:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 498:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 499:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1302               		.loc 1 499 43 view .LVU293
 1303 0026 61E0      		ldi r22,lo8(1)
 1304 0028 70E0      		ldi r23,0
 1305               	.LVL104:
 1306               	.L65:
 1307               		.loc 1 499 43 view .LVU294
 1308               	.LBE26:
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1309               		.loc 1 495 45 is_stmt 1 discriminator 1 view .LVU295
 1310 002a 2417      		cp r18,r20
 1311 002c 3507      		cpc r19,r21
 1312 002e 00F0      		brlo .L67
 1313               	/* epilogue start */
 495:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1314               		.loc 1 495 45 is_stmt 0 discriminator 1 view .LVU296
 1315               	.LBE25:
 500:drivers/oled/ssd1306_sh1106.c ****     }
 501:drivers/oled/ssd1306_sh1106.c **** }
 1316               		.loc 1 501 1 view .LVU297
 1317 0030 0895      		ret
 1318               	.L67:
 1319               	.LBB29:
 1320               	.LBB27:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1321               		.loc 1 496 9 is_stmt 1 view .LVU298
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1322               		.loc 1 496 26 is_stmt 0 view .LVU299
 1323 0032 FC01      		movw r30,r24
 1324               	.LVL105:
 496:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1325               		.loc 1 496 17 view .LVU300
 1326 0034 8191      		ld r24,Z+
 1327               	.LVL106:
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1328               		.loc 1 497 9 is_stmt 1 view .LVU301
 1329 0036 D901      		movw r26,r18
 1330 0038 A050      		subi r26,lo8(-(oled_buffer))
 1331 003a B040      		sbci r27,hi8(-(oled_buffer))
 497:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1332               		.loc 1 497 12 is_stmt 0 view .LVU302
 1333 003c 9C91      		ld r25,X
 1334 003e 9817      		cp r25,r24
 1335 0040 01F0      		breq .L66
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1336               		.loc 1 498 9 is_stmt 1 view .LVU303
 498:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1337               		.loc 1 498 24 is_stmt 0 view .LVU304
 1338 0042 8C93      		st X,r24
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1339               		.loc 1 499 9 is_stmt 1 view .LVU305
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1340               		.loc 1 499 49 is_stmt 0 view .LVU306
 1341 0044 C901      		movw r24,r18
 1342               	.LVL107:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1343               		.loc 1 499 49 view .LVU307
 1344 0046 A5E0      		ldi r26,5
 1345               		1:
 1346 0048 9695      		lsr r25
 1347 004a 8795      		ror r24
 1348 004c AA95      		dec r26
 1349 004e 01F4      		brne 1b
 1350               	.LVL108:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1351               		.loc 1 499 43 view .LVU308
 1352 0050 DB01      		movw r26,r22
 1353 0052 00C0      		rjmp 2f
 1354               		1:
 1355 0054 AA0F      		lsl r26
 1356 0056 BB1F      		rol r27
 1357               		2:
 1358 0058 8A95      		dec r24
 1359 005a 02F4      		brpl 1b
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1360               		.loc 1 499 20 view .LVU309
 1361 005c 8091 0000 		lds r24,oled_dirty
 1362 0060 9091 0000 		lds r25,oled_dirty+1
 1363 0064 8A2B      		or r24,r26
 1364 0066 9B2B      		or r25,r27
 1365 0068 9093 0000 		sts oled_dirty+1,r25
 1366 006c 8093 0000 		sts oled_dirty,r24
 1367               	.LVL109:
 1368               	.L66:
 499:drivers/oled/ssd1306_sh1106.c ****     }
 1369               		.loc 1 499 20 view .LVU310
 1370               	.LBE27:
 495:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = *data++;
 1371               		.loc 1 495 75 is_stmt 1 discriminator 2 view .LVU311
 1372 0070 2F5F      		subi r18,-1
 1373 0072 3F4F      		sbci r19,-1
 1374               	.LVL110:
 1375               	.LBB28:
 496:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 1376               		.loc 1 496 26 is_stmt 0 discriminator 2 view .LVU312
 1377 0074 CF01      		movw r24,r30
 1378 0076 00C0      		rjmp .L65
 1379               	.LBE28:
 1380               	.LBE29:
 1381               		.cfi_endproc
 1382               	.LFE25:
 1384               		.section	.text.oled_write_pixel,"ax",@progbits
 1385               	.global	oled_write_pixel
 1387               	oled_write_pixel:
 1388               	.LVL111:
 1389               	.LFB26:
 502:drivers/oled/ssd1306_sh1106.c **** 
 503:drivers/oled/ssd1306_sh1106.c **** void oled_write_pixel(uint8_t x, uint8_t y, bool on) {
 1390               		.loc 1 503 54 is_stmt 1 view -0
 1391               		.cfi_startproc
 1392               	/* prologue: function */
 1393               	/* frame size = 0 */
 1394               	/* stack size = 0 */
 1395               	.L__stack_usage = 0
 504:drivers/oled/ssd1306_sh1106.c ****     if (x >= oled_rotation_width) {
 1396               		.loc 1 504 5 view .LVU314
 1397               		.loc 1 504 11 is_stmt 0 view .LVU315
 1398 0000 3091 0000 		lds r19,oled_rotation_width
 1399               		.loc 1 504 8 view .LVU316
 1400 0004 8317      		cp r24,r19
 1401 0006 00F4      		brsh .L68
 505:drivers/oled/ssd1306_sh1106.c ****         return;
 506:drivers/oled/ssd1306_sh1106.c ****     }
 507:drivers/oled/ssd1306_sh1106.c ****     uint16_t index = x + (y / 8) * oled_rotation_width;
 1402               		.loc 1 507 5 is_stmt 1 view .LVU317
 1403               		.loc 1 507 24 is_stmt 0 view .LVU318
 1404 0008 90E0      		ldi r25,0
 1405 000a 262F      		mov r18,r22
 1406 000c 2695      		lsr r18
 1407 000e 2695      		lsr r18
 1408 0010 2695      		lsr r18
 1409 0012 239F      		mul r18,r19
 1410 0014 800D      		add r24,r0
 1411 0016 911D      		adc r25,r1
 1412 0018 1124      		clr __zero_reg__
 1413               	.LVL112:
 508:drivers/oled/ssd1306_sh1106.c ****     if (index >= OLED_MATRIX_SIZE) {
 1414               		.loc 1 508 5 is_stmt 1 view .LVU319
 1415               		.loc 1 508 8 is_stmt 0 view .LVU320
 1416 001a 8115      		cp r24,__zero_reg__
 1417 001c 22E0      		ldi r18,2
 1418 001e 9207      		cpc r25,r18
 1419 0020 04F4      		brge .L68
 509:drivers/oled/ssd1306_sh1106.c ****         return;
 510:drivers/oled/ssd1306_sh1106.c ****     }
 511:drivers/oled/ssd1306_sh1106.c ****     uint8_t data = oled_buffer[index];
 1420               		.loc 1 511 5 is_stmt 1 view .LVU321
 1421               		.loc 1 511 13 is_stmt 0 view .LVU322
 1422 0022 FC01      		movw r30,r24
 1423 0024 E050      		subi r30,lo8(-(oled_buffer))
 1424 0026 F040      		sbci r31,hi8(-(oled_buffer))
 1425 0028 5081      		ld r21,Z
 1426               	.LVL113:
 512:drivers/oled/ssd1306_sh1106.c ****     if (on) {
 1427               		.loc 1 512 5 is_stmt 1 view .LVU323
 513:drivers/oled/ssd1306_sh1106.c ****         data |= (1 << (y % 8));
 1428               		.loc 1 513 26 is_stmt 0 view .LVU324
 1429 002a 6770      		andi r22,lo8(7)
 1430               	.LVL114:
 1431               		.loc 1 513 20 view .LVU325
 1432 002c 21E0      		ldi r18,lo8(1)
 1433 002e 30E0      		ldi r19,0
 1434 0030 00C0      		rjmp 2f
 1435               		1:
 1436 0032 220F      		lsl r18
 1437               		2:
 1438 0034 6A95      		dec r22
 1439 0036 02F4      		brpl 1b
 512:drivers/oled/ssd1306_sh1106.c ****     if (on) {
 1440               		.loc 1 512 8 view .LVU326
 1441 0038 4423      		tst r20
 1442 003a 01F0      		breq .L70
 1443               		.loc 1 513 9 is_stmt 1 view .LVU327
 1444               		.loc 1 513 14 is_stmt 0 view .LVU328
 1445 003c 252B      		or r18,r21
 1446               	.LVL115:
 1447               	.L71:
 514:drivers/oled/ssd1306_sh1106.c ****     } else {
 515:drivers/oled/ssd1306_sh1106.c ****         data &= ~(1 << (y % 8));
 516:drivers/oled/ssd1306_sh1106.c ****     }
 517:drivers/oled/ssd1306_sh1106.c ****     if (oled_buffer[index] != data) {
 1448               		.loc 1 517 5 is_stmt 1 view .LVU329
 1449               		.loc 1 517 8 is_stmt 0 view .LVU330
 1450 003e 2517      		cp r18,r21
 1451 0040 01F0      		breq .L68
 518:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[index] = data;
 1452               		.loc 1 518 9 is_stmt 1 view .LVU331
 1453               		.loc 1 518 28 is_stmt 0 view .LVU332
 1454 0042 2083      		st Z,r18
 519:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (index / OLED_BLOCK_SIZE));
 1455               		.loc 1 519 9 is_stmt 1 view .LVU333
 1456               		.loc 1 519 53 is_stmt 0 view .LVU334
 1457 0044 25E0      		ldi r18,5
 1458               		1:
 1459 0046 9695      		lsr r25
 1460 0048 8795      		ror r24
 1461 004a 2A95      		dec r18
 1462 004c 01F4      		brne 1b
 1463               	.LVL116:
 1464               		.loc 1 519 43 view .LVU335
 1465 004e 21E0      		ldi r18,lo8(1)
 1466 0050 30E0      		ldi r19,0
 1467 0052 00C0      		rjmp 2f
 1468               		1:
 1469 0054 220F      		lsl r18
 1470 0056 331F      		rol r19
 1471               		2:
 1472 0058 8A95      		dec r24
 1473 005a 02F4      		brpl 1b
 1474               		.loc 1 519 20 view .LVU336
 1475 005c 8091 0000 		lds r24,oled_dirty
 1476 0060 9091 0000 		lds r25,oled_dirty+1
 1477 0064 822B      		or r24,r18
 1478 0066 932B      		or r25,r19
 1479 0068 9093 0000 		sts oled_dirty+1,r25
 1480 006c 8093 0000 		sts oled_dirty,r24
 1481               	.LVL117:
 1482               	.L68:
 1483               	/* epilogue start */
 520:drivers/oled/ssd1306_sh1106.c ****     }
 521:drivers/oled/ssd1306_sh1106.c **** }
 1484               		.loc 1 521 1 view .LVU337
 1485 0070 0895      		ret
 1486               	.LVL118:
 1487               	.L70:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1488               		.loc 1 515 9 is_stmt 1 view .LVU338
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1489               		.loc 1 515 14 is_stmt 0 view .LVU339
 1490 0072 2095      		com r18
 1491 0074 2523      		and r18,r21
 1492               	.LVL119:
 515:drivers/oled/ssd1306_sh1106.c ****     }
 1493               		.loc 1 515 14 view .LVU340
 1494 0076 00C0      		rjmp .L71
 1495               		.cfi_endproc
 1496               	.LFE26:
 1498               		.section	.text.oled_write_P,"ax",@progbits
 1499               	.global	oled_write_P
 1501               	oled_write_P:
 1502               	.LVL120:
 1503               	.LFB27:
 522:drivers/oled/ssd1306_sh1106.c **** 
 523:drivers/oled/ssd1306_sh1106.c **** #if defined(__AVR__)
 524:drivers/oled/ssd1306_sh1106.c **** void oled_write_P(const char *data, bool invert) {
 1504               		.loc 1 524 50 is_stmt 1 view -0
 1505               		.cfi_startproc
 1506               		.loc 1 524 50 is_stmt 0 view .LVU342
 1507 0000 1F93      		push r17
 1508               	.LCFI30:
 1509               		.cfi_def_cfa_offset 3
 1510               		.cfi_offset 17, -2
 1511 0002 CF93      		push r28
 1512               	.LCFI31:
 1513               		.cfi_def_cfa_offset 4
 1514               		.cfi_offset 28, -3
 1515 0004 DF93      		push r29
 1516               	.LCFI32:
 1517               		.cfi_def_cfa_offset 5
 1518               		.cfi_offset 29, -4
 1519               	/* prologue: function */
 1520               	/* frame size = 0 */
 1521               	/* stack size = 3 */
 1522               	.L__stack_usage = 3
 1523 0006 EC01      		movw r28,r24
 1524 0008 162F      		mov r17,r22
 525:drivers/oled/ssd1306_sh1106.c ****     uint8_t c = pgm_read_byte(data);
 1525               		.loc 1 525 5 is_stmt 1 view .LVU343
 1526               	.LBB30:
 1527               		.loc 1 525 17 view .LVU344
 1528               	.LVL121:
 1529               		.loc 1 525 17 view .LVU345
 1530               		.loc 1 525 17 view .LVU346
 1531               	.L75:
 1532               		.loc 1 525 17 is_stmt 0 view .LVU347
 1533               	.LBE30:
 1534               	.LBB31:
 526:drivers/oled/ssd1306_sh1106.c ****     while (c != 0) {
 527:drivers/oled/ssd1306_sh1106.c ****         oled_write_char(c, invert);
 528:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1535               		.loc 1 528 13 is_stmt 1 view .LVU348
 1536               		.loc 1 528 13 view .LVU349
 1537 000a FE01      		movw r30,r28
 1538               	/* #APP */
 1539               	 ;  528 "drivers/oled/ssd1306_sh1106.c" 1
 1540 000c 8491      		lpm r24, Z
 1541               		
 1542               	 ;  0 "" 2
 1543               	.LVL122:
 1544               		.loc 1 528 13 view .LVU350
 1545               		.loc 1 528 13 is_stmt 0 view .LVU351
 1546               	/* #NOAPP */
 1547               	.LBE31:
 526:drivers/oled/ssd1306_sh1106.c ****     while (c != 0) {
 1548               		.loc 1 526 14 is_stmt 1 view .LVU352
 1549 000e 8111      		cpse r24,__zero_reg__
 1550 0010 00C0      		rjmp .L74
 1551               	/* epilogue start */
 529:drivers/oled/ssd1306_sh1106.c ****     }
 530:drivers/oled/ssd1306_sh1106.c **** }
 1552               		.loc 1 530 1 is_stmt 0 view .LVU353
 1553 0012 DF91      		pop r29
 1554 0014 CF91      		pop r28
 1555               	.LVL123:
 1556               		.loc 1 530 1 view .LVU354
 1557 0016 1F91      		pop r17
 1558               	.LVL124:
 1559               		.loc 1 530 1 view .LVU355
 1560 0018 0895      		ret
 1561               	.LVL125:
 1562               	.L74:
 527:drivers/oled/ssd1306_sh1106.c ****         c = pgm_read_byte(++data);
 1563               		.loc 1 527 9 is_stmt 1 view .LVU356
 1564 001a 612F      		mov r22,r17
 1565 001c 0E94 0000 		call oled_write_char
 1566               	.LVL126:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1567               		.loc 1 528 9 view .LVU357
 1568               	.LBB32:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1569               		.loc 1 528 13 view .LVU358
 1570 0020 2196      		adiw r28,1
 1571               	.LVL127:
 528:drivers/oled/ssd1306_sh1106.c ****     }
 1572               		.loc 1 528 13 is_stmt 0 view .LVU359
 1573 0022 00C0      		rjmp .L75
 1574               	.LBE32:
 1575               		.cfi_endproc
 1576               	.LFE27:
 1578               		.section	.text.oled_write_ln_P,"ax",@progbits
 1579               	.global	oled_write_ln_P
 1581               	oled_write_ln_P:
 1582               	.LVL128:
 1583               	.LFB28:
 531:drivers/oled/ssd1306_sh1106.c **** 
 532:drivers/oled/ssd1306_sh1106.c **** void oled_write_ln_P(const char *data, bool invert) {
 1584               		.loc 1 532 53 is_stmt 1 view -0
 1585               		.cfi_startproc
 1586               	/* prologue: function */
 1587               	/* frame size = 0 */
 1588               	/* stack size = 0 */
 1589               	.L__stack_usage = 0
 533:drivers/oled/ssd1306_sh1106.c ****     oled_write_P(data, invert);
 1590               		.loc 1 533 5 view .LVU361
 1591 0000 0E94 0000 		call oled_write_P
 1592               	.LVL129:
 534:drivers/oled/ssd1306_sh1106.c ****     oled_advance_page(true);
 1593               		.loc 1 534 5 view .LVU362
 1594 0004 81E0      		ldi r24,lo8(1)
 1595 0006 0C94 0000 		jmp oled_advance_page
 1596               	.LVL130:
 1597               		.cfi_endproc
 1598               	.LFE28:
 1600               		.section	.text.oled_write_raw_P,"ax",@progbits
 1601               	.global	oled_write_raw_P
 1603               	oled_write_raw_P:
 1604               	.LVL131:
 1605               	.LFB29:
 535:drivers/oled/ssd1306_sh1106.c **** }
 536:drivers/oled/ssd1306_sh1106.c **** 
 537:drivers/oled/ssd1306_sh1106.c **** void oled_write_raw_P(const char *data, uint16_t size) {
 1606               		.loc 1 537 56 view -0
 1607               		.cfi_startproc
 1608               		.loc 1 537 56 is_stmt 0 view .LVU364
 1609 0000 CF93      		push r28
 1610               	.LCFI33:
 1611               		.cfi_def_cfa_offset 3
 1612               		.cfi_offset 28, -2
 1613 0002 DF93      		push r29
 1614               	.LCFI34:
 1615               		.cfi_def_cfa_offset 4
 1616               		.cfi_offset 29, -3
 1617               	/* prologue: function */
 1618               	/* frame size = 0 */
 1619               	/* stack size = 2 */
 1620               	.L__stack_usage = 2
 1621 0004 B82F      		mov r27,r24
 1622 0006 A92F      		mov r26,r25
 1623 0008 9B01      		movw r18,r22
 538:drivers/oled/ssd1306_sh1106.c ****     uint16_t cursor_start_index = oled_cursor - &oled_buffer[0];
 1624               		.loc 1 538 5 is_stmt 1 view .LVU365
 1625               		.loc 1 538 47 is_stmt 0 view .LVU366
 1626 000a 8091 0000 		lds r24,oled_cursor
 1627 000e 9091 0000 		lds r25,oled_cursor+1
 1628               	.LVL132:
 1629               		.loc 1 538 47 view .LVU367
 1630 0012 8050      		subi r24,lo8(oled_buffer)
 1631 0014 9040      		sbci r25,hi8(oled_buffer)
 1632               	.LVL133:
 539:drivers/oled/ssd1306_sh1106.c ****     if ((size + cursor_start_index) > OLED_MATRIX_SIZE) size = OLED_MATRIX_SIZE - cursor_start_inde
 1633               		.loc 1 539 5 is_stmt 1 view .LVU368
 1634               		.loc 1 539 15 is_stmt 0 view .LVU369
 1635 0016 AC01      		movw r20,r24
 1636 0018 460F      		add r20,r22
 1637 001a 571F      		adc r21,r23
 1638               		.loc 1 539 8 view .LVU370
 1639 001c 4130      		cpi r20,1
 1640 001e 5240      		sbci r21,2
 1641               	.LVL134:
 1642               		.loc 1 539 8 view .LVU371
 1643 0020 00F0      		brlo .L78
 1644               		.loc 1 539 57 is_stmt 1 discriminator 1 view .LVU372
 1645               		.loc 1 539 62 is_stmt 0 discriminator 1 view .LVU373
 1646 0022 20E0      		ldi r18,0
 1647 0024 32E0      		ldi r19,lo8(2)
 1648               	.LVL135:
 1649               		.loc 1 539 62 discriminator 1 view .LVU374
 1650 0026 281B      		sub r18,r24
 1651 0028 390B      		sbc r19,r25
 1652               	.LVL136:
 1653               	.L78:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1654               		.loc 1 540 5 is_stmt 1 view .LVU375
 1655               	.LBB33:
 1656               		.loc 1 540 10 view .LVU376
 1657               		.loc 1 540 10 is_stmt 0 view .LVU377
 1658 002a 4091 0000 		lds r20,oled_dirty
 1659 002e 5091 0000 		lds r21,oled_dirty+1
 1660 0032 EB2F      		mov r30,r27
 1661 0034 FA2F      		mov r31,r26
 1662               		.loc 1 540 66 view .LVU378
 1663 0036 280F      		add r18,r24
 1664 0038 391F      		adc r19,r25
 1665               	.LVL137:
 1666               	.LBB34:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 542:drivers/oled/ssd1306_sh1106.c ****         if (oled_buffer[i] == c) continue;
 543:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 544:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1667               		.loc 1 544 43 view .LVU379
 1668 003a C1E0      		ldi r28,lo8(1)
 1669 003c D0E0      		ldi r29,0
 1670               	.LVL138:
 1671               	.L79:
 1672               		.loc 1 544 43 view .LVU380
 1673               	.LBE34:
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1674               		.loc 1 540 45 is_stmt 1 discriminator 1 view .LVU381
 1675 003e 8217      		cp r24,r18
 1676 0040 9307      		cpc r25,r19
 1677 0042 00F0      		brlo .L81
 540:drivers/oled/ssd1306_sh1106.c ****     for (uint16_t i = cursor_start_index; i < cursor_start_index + size; i++) {
 1678               		.loc 1 540 45 is_stmt 0 discriminator 1 view .LVU382
 1679 0044 5093 0000 		sts oled_dirty+1,r21
 1680 0048 4093 0000 		sts oled_dirty,r20
 1681               	/* epilogue start */
 1682               	.LBE33:
 545:drivers/oled/ssd1306_sh1106.c ****     }
 546:drivers/oled/ssd1306_sh1106.c **** }
 1683               		.loc 1 546 1 view .LVU383
 1684 004c DF91      		pop r29
 1685 004e CF91      		pop r28
 1686 0050 0895      		ret
 1687               	.L81:
 1688               	.LBB37:
 1689               	.LBB36:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1690               		.loc 1 541 9 is_stmt 1 view .LVU384
 1691               	.LBB35:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1692               		.loc 1 541 21 view .LVU385
 1693               	.LVL139:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1694               		.loc 1 541 21 view .LVU386
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1695               		.loc 1 541 21 view .LVU387
 1696               	/* #APP */
 1697               	 ;  541 "drivers/oled/ssd1306_sh1106.c" 1
 1698 0052 6491      		lpm r22, Z
 1699               		
 1700               	 ;  0 "" 2
 1701               	.LVL140:
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1702               		.loc 1 541 21 view .LVU388
 541:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1703               		.loc 1 541 21 is_stmt 0 view .LVU389
 1704               	/* #NOAPP */
 1705               	.LBE35:
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1706               		.loc 1 542 9 is_stmt 1 view .LVU390
 1707 0054 DC01      		movw r26,r24
 1708 0056 A050      		subi r26,lo8(-(oled_buffer))
 1709 0058 B040      		sbci r27,hi8(-(oled_buffer))
 542:drivers/oled/ssd1306_sh1106.c ****         oled_buffer[i] = c;
 1710               		.loc 1 542 12 is_stmt 0 view .LVU391
 1711 005a 7C91      		ld r23,X
 1712 005c 7617      		cp r23,r22
 1713 005e 01F0      		breq .L80
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1714               		.loc 1 543 9 is_stmt 1 view .LVU392
 543:drivers/oled/ssd1306_sh1106.c ****         oled_dirty |= ((OLED_BLOCK_TYPE)1 << (i / OLED_BLOCK_SIZE));
 1715               		.loc 1 543 24 is_stmt 0 view .LVU393
 1716 0060 6C93      		st X,r22
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1717               		.loc 1 544 9 is_stmt 1 view .LVU394
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1718               		.loc 1 544 49 is_stmt 0 view .LVU395
 1719 0062 BC01      		movw r22,r24
 1720               	.LVL141:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1721               		.loc 1 544 49 view .LVU396
 1722 0064 A5E0      		ldi r26,5
 1723               		1:
 1724 0066 7695      		lsr r23
 1725 0068 6795      		ror r22
 1726 006a AA95      		dec r26
 1727 006c 01F4      		brne 1b
 1728               	.LVL142:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1729               		.loc 1 544 43 view .LVU397
 1730 006e DE01      		movw r26,r28
 1731 0070 00C0      		rjmp 2f
 1732               		1:
 1733 0072 AA0F      		lsl r26
 1734 0074 BB1F      		rol r27
 1735               		2:
 1736 0076 6A95      		dec r22
 1737 0078 02F4      		brpl 1b
 1738 007a BD01      		movw r22,r26
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1739               		.loc 1 544 20 view .LVU398
 1740 007c 4A2B      		or r20,r26
 1741 007e 572B      		or r21,r23
 1742               	.LVL143:
 1743               	.L80:
 544:drivers/oled/ssd1306_sh1106.c ****     }
 1744               		.loc 1 544 20 view .LVU399
 1745               	.LBE36:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1746               		.loc 1 540 75 is_stmt 1 discriminator 2 view .LVU400
 1747 0080 0196      		adiw r24,1
 1748               	.LVL144:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1749               		.loc 1 540 75 is_stmt 0 discriminator 2 view .LVU401
 1750 0082 3196      		adiw r30,1
 1751               	.LVL145:
 540:drivers/oled/ssd1306_sh1106.c ****         uint8_t c = pgm_read_byte(data++);
 1752               		.loc 1 540 75 discriminator 2 view .LVU402
 1753 0084 00C0      		rjmp .L79
 1754               	.LBE37:
 1755               		.cfi_endproc
 1756               	.LFE29:
 1758               		.section	.text.oled_on,"ax",@progbits
 1759               	.global	oled_on
 1761               	oled_on:
 1762               	.LFB30:
 547:drivers/oled/ssd1306_sh1106.c **** #endif  // defined(__AVR__)
 548:drivers/oled/ssd1306_sh1106.c **** 
 549:drivers/oled/ssd1306_sh1106.c **** bool oled_on(void) {
 1763               		.loc 1 549 20 is_stmt 1 view -0
 1764               		.cfi_startproc
 1765 0000 CF93      		push r28
 1766               	.LCFI35:
 1767               		.cfi_def_cfa_offset 3
 1768               		.cfi_offset 28, -2
 1769 0002 DF93      		push r29
 1770               	.LCFI36:
 1771               		.cfi_def_cfa_offset 4
 1772               		.cfi_offset 29, -3
 1773 0004 00D0      		rcall .
 1774 0006 00D0      		rcall .
 1775               	.LCFI37:
 1776               		.cfi_def_cfa_offset 8
 1777 0008 CDB7      		in r28,__SP_L__
 1778 000a DEB7      		in r29,__SP_H__
 1779               	.LCFI38:
 1780               		.cfi_def_cfa_register 28
 1781               	/* prologue: function */
 1782               	/* frame size = 4 */
 1783               	/* stack size = 6 */
 1784               	.L__stack_usage = 6
 550:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1785               		.loc 1 550 5 view .LVU404
 1786               		.loc 1 550 8 is_stmt 0 view .LVU405
 1787 000c 8091 0000 		lds r24,oled_initialized
 1788 0010 8111      		cpse r24,__zero_reg__
 1789 0012 00C0      		rjmp .L83
 1790               	.L85:
 551:drivers/oled/ssd1306_sh1106.c ****         return oled_active;
 552:drivers/oled/ssd1306_sh1106.c ****     }
 553:drivers/oled/ssd1306_sh1106.c **** 
 554:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 555:drivers/oled/ssd1306_sh1106.c ****     oled_timeout = timer_read32() + OLED_TIMEOUT;
 556:drivers/oled/ssd1306_sh1106.c **** #endif
 557:drivers/oled/ssd1306_sh1106.c **** 
 558:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_on[] =
 559:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 560:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, 0x00};
 561:drivers/oled/ssd1306_sh1106.c **** #else
 562:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_ON};
 563:drivers/oled/ssd1306_sh1106.c **** #endif
 564:drivers/oled/ssd1306_sh1106.c **** 
 565:drivers/oled/ssd1306_sh1106.c ****     if (!oled_active) {
 566:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 567:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 568:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 569:drivers/oled/ssd1306_sh1106.c ****         }
 570:drivers/oled/ssd1306_sh1106.c ****         oled_active = true;
 571:drivers/oled/ssd1306_sh1106.c ****     }
 572:drivers/oled/ssd1306_sh1106.c ****     return oled_active;
 1791               		.loc 1 572 5 is_stmt 1 view .LVU406
 1792               		.loc 1 572 12 is_stmt 0 view .LVU407
 1793 0014 8091 0000 		lds r24,oled_active
 1794               	/* epilogue start */
 573:drivers/oled/ssd1306_sh1106.c **** }
 1795               		.loc 1 573 1 view .LVU408
 1796 0018 0F90      		pop __tmp_reg__
 1797 001a 0F90      		pop __tmp_reg__
 1798 001c 0F90      		pop __tmp_reg__
 1799 001e 0F90      		pop __tmp_reg__
 1800 0020 DF91      		pop r29
 1801 0022 CF91      		pop r28
 1802 0024 0895      		ret
 1803               	.L83:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1804               		.loc 1 555 5 is_stmt 1 view .LVU409
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1805               		.loc 1 555 20 is_stmt 0 view .LVU410
 1806 0026 0E94 0000 		call timer_read32
 1807               	.LVL146:
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1808               		.loc 1 555 35 view .LVU411
 1809 002a DC01      		movw r26,r24
 1810 002c CB01      		movw r24,r22
 1811 002e 805A      		subi r24,-96
 1812 0030 9541      		sbci r25,21
 1813 0032 AF4F      		sbci r26,-1
 1814 0034 BF4F      		sbci r27,-1
 555:drivers/oled/ssd1306_sh1106.c **** #endif
 1815               		.loc 1 555 18 view .LVU412
 1816 0036 8093 0000 		sts oled_timeout,r24
 1817 003a 9093 0000 		sts oled_timeout+1,r25
 1818 003e A093 0000 		sts oled_timeout+2,r26
 1819 0042 B093 0000 		sts oled_timeout+3,r27
 558:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 1820               		.loc 1 558 5 is_stmt 1 view .LVU413
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1821               		.loc 1 565 5 view .LVU414
 565:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_on) != I2C_STATUS_SUCCESS) {
 1822               		.loc 1 565 8 is_stmt 0 view .LVU415
 1823 0046 8091 0000 		lds r24,oled_active
 1824 004a 8111      		cpse r24,__zero_reg__
 1825 004c 00C0      		rjmp .L85
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1826               		.loc 1 566 9 is_stmt 1 view .LVU416
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1827               		.loc 1 566 13 is_stmt 0 view .LVU417
 1828 004e 62E0      		ldi r22,lo8(2)
 1829 0050 70E0      		ldi r23,0
 1830 0052 80E0      		ldi r24,lo8(display_on.13)
 1831 0054 90E0      		ldi r25,hi8(display_on.13)
 1832 0056 0E94 0000 		call i2c_transmit_P.constprop.0
 1833               	.LVL147:
 566:drivers/oled/ssd1306_sh1106.c ****             print("oled_on cmd failed\n");
 1834               		.loc 1 566 12 view .LVU418
 1835 005a 892B      		or r24,r25
 1836 005c 01F0      		breq .L86
 567:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 1837               		.loc 1 567 13 is_stmt 1 view .LVU419
 1838               	.LBB38:
 567:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 1839               		.loc 1 567 13 view .LVU420
 567:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 1840               		.loc 1 567 13 view .LVU421
 1841               	.LBE38:
 1842 005e 80E0      		ldi r24,lo8(__c.12)
 1843 0060 90E0      		ldi r25,hi8(__c.12)
 1844 0062 0E94 0000 		call xputs
 1845               	.LVL148:
 568:drivers/oled/ssd1306_sh1106.c ****         }
 1846               		.loc 1 568 13 view .LVU422
 1847 0066 00C0      		rjmp .L85
 1848               	.L86:
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1849               		.loc 1 570 9 view .LVU423
 570:drivers/oled/ssd1306_sh1106.c ****     }
 1850               		.loc 1 570 21 is_stmt 0 view .LVU424
 1851 0068 81E0      		ldi r24,lo8(1)
 1852 006a 8093 0000 		sts oled_active,r24
 1853 006e 00C0      		rjmp .L85
 1854               		.cfi_endproc
 1855               	.LFE30:
 1857               		.section	.text.oled_render,"ax",@progbits
 1858               	.global	oled_render
 1860               	oled_render:
 1861               	.LFB15:
 288:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 1862               		.loc 1 288 24 is_stmt 1 view -0
 1863               		.cfi_startproc
 1864 0000 2F92      		push r2
 1865               	.LCFI39:
 1866               		.cfi_def_cfa_offset 3
 1867               		.cfi_offset 2, -2
 1868 0002 3F92      		push r3
 1869               	.LCFI40:
 1870               		.cfi_def_cfa_offset 4
 1871               		.cfi_offset 3, -3
 1872 0004 5F92      		push r5
 1873               	.LCFI41:
 1874               		.cfi_def_cfa_offset 5
 1875               		.cfi_offset 5, -4
 1876 0006 6F92      		push r6
 1877               	.LCFI42:
 1878               		.cfi_def_cfa_offset 6
 1879               		.cfi_offset 6, -5
 1880 0008 7F92      		push r7
 1881               	.LCFI43:
 1882               		.cfi_def_cfa_offset 7
 1883               		.cfi_offset 7, -6
 1884 000a 8F92      		push r8
 1885               	.LCFI44:
 1886               		.cfi_def_cfa_offset 8
 1887               		.cfi_offset 8, -7
 1888 000c 9F92      		push r9
 1889               	.LCFI45:
 1890               		.cfi_def_cfa_offset 9
 1891               		.cfi_offset 9, -8
 1892 000e AF92      		push r10
 1893               	.LCFI46:
 1894               		.cfi_def_cfa_offset 10
 1895               		.cfi_offset 10, -9
 1896 0010 BF92      		push r11
 1897               	.LCFI47:
 1898               		.cfi_def_cfa_offset 11
 1899               		.cfi_offset 11, -10
 1900 0012 CF92      		push r12
 1901               	.LCFI48:
 1902               		.cfi_def_cfa_offset 12
 1903               		.cfi_offset 12, -11
 1904 0014 DF92      		push r13
 1905               	.LCFI49:
 1906               		.cfi_def_cfa_offset 13
 1907               		.cfi_offset 13, -12
 1908 0016 EF92      		push r14
 1909               	.LCFI50:
 1910               		.cfi_def_cfa_offset 14
 1911               		.cfi_offset 14, -13
 1912 0018 FF92      		push r15
 1913               	.LCFI51:
 1914               		.cfi_def_cfa_offset 15
 1915               		.cfi_offset 15, -14
 1916 001a 0F93      		push r16
 1917               	.LCFI52:
 1918               		.cfi_def_cfa_offset 16
 1919               		.cfi_offset 16, -15
 1920 001c 1F93      		push r17
 1921               	.LCFI53:
 1922               		.cfi_def_cfa_offset 17
 1923               		.cfi_offset 17, -16
 1924 001e CF93      		push r28
 1925               	.LCFI54:
 1926               		.cfi_def_cfa_offset 18
 1927               		.cfi_offset 28, -17
 1928 0020 DF93      		push r29
 1929               	.LCFI55:
 1930               		.cfi_def_cfa_offset 19
 1931               		.cfi_offset 29, -18
 1932               	/* prologue: function */
 1933               	/* frame size = 0 */
 1934               	/* stack size = 17 */
 1935               	.L__stack_usage = 17
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1936               		.loc 1 289 5 view .LVU426
 289:drivers/oled/ssd1306_sh1106.c ****         return;
 1937               		.loc 1 289 8 is_stmt 0 view .LVU427
 1938 0022 8091 0000 		lds r24,oled_initialized
 1939 0026 8823      		tst r24
 1940 0028 01F0      		breq .L87
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1941               		.loc 1 294 5 is_stmt 1 view .LVU428
 294:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty || oled_scrolling) {
 1942               		.loc 1 294 16 is_stmt 0 view .LVU429
 1943 002a 2091 0000 		lds r18,oled_dirty
 1944 002e 3091 0000 		lds r19,oled_dirty+1
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1945               		.loc 1 295 5 is_stmt 1 view .LVU430
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1946               		.loc 1 295 8 is_stmt 0 view .LVU431
 1947 0032 2115      		cp r18,__zero_reg__
 1948 0034 3105      		cpc r19,__zero_reg__
 1949 0036 01F0      		breq .L87
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1950               		.loc 1 295 21 discriminator 1 view .LVU432
 1951 0038 8091 0000 		lds r24,oled_scrolling
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1952               		.loc 1 301 47 discriminator 1 view .LVU433
 1953 003c 61E0      		ldi r22,lo8(1)
 1954 003e 70E0      		ldi r23,0
 295:drivers/oled/ssd1306_sh1106.c ****         return;
 1955               		.loc 1 295 21 discriminator 1 view .LVU434
 1956 0040 8823      		tst r24
 1957 0042 01F0      		breq .L89
 1958               	.L87:
 1959               	/* epilogue start */
 348:drivers/oled/ssd1306_sh1106.c **** 
 1960               		.loc 1 348 1 view .LVU435
 1961 0044 DF91      		pop r29
 1962 0046 CF91      		pop r28
 1963 0048 1F91      		pop r17
 1964 004a 0F91      		pop r16
 1965 004c FF90      		pop r15
 1966 004e EF90      		pop r14
 1967 0050 DF90      		pop r13
 1968 0052 CF90      		pop r12
 1969 0054 BF90      		pop r11
 1970 0056 AF90      		pop r10
 1971 0058 9F90      		pop r9
 1972 005a 8F90      		pop r8
 1973 005c 7F90      		pop r7
 1974 005e 6F90      		pop r6
 1975 0060 5F90      		pop r5
 1976 0062 3F90      		pop r3
 1977 0064 2F90      		pop r2
 1978 0066 0895      		ret
 1979               	.LVL149:
 1980               	.L90:
 302:drivers/oled/ssd1306_sh1106.c ****     }
 1981               		.loc 1 302 9 is_stmt 1 view .LVU436
 1982 0068 8F5F      		subi r24,lo8(-(1))
 1983               	.LVL150:
 1984               	.L89:
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1985               		.loc 1 301 12 view .LVU437
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1986               		.loc 1 301 47 is_stmt 0 view .LVU438
 1987 006a 082F      		mov r16,r24
 1988 006c 10E0      		ldi r17,0
 1989 006e 1B01      		movw r2,r22
 1990 0070 082E      		mov r0,r24
 1991 0072 00C0      		rjmp 2f
 1992               		1:
 1993 0074 220C      		lsl r2
 1994 0076 331C      		rol r3
 1995               		2:
 1996 0078 0A94      		dec r0
 1997 007a 02F4      		brpl 1b
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 1998               		.loc 1 301 25 view .LVU439
 1999 007c A901      		movw r20,r18
 2000 007e 4221      		and r20,r2
 2001 0080 5321      		and r21,r3
 301:drivers/oled/ssd1306_sh1106.c ****         ++update_start;
 2002               		.loc 1 301 12 view .LVU440
 2003 0082 452B      		or r20,r21
 2004 0084 01F0      		breq .L90
 306:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 2005               		.loc 1 306 5 is_stmt 1 view .LVU441
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 2006               		.loc 1 307 5 view .LVU442
 2007 0086 2091 0000 		lds r18,oled_rotation
 307:drivers/oled/ssd1306_sh1106.c ****         calc_bounds(update_start, &display_start[1]);  // Offset from I2C_CMD byte at the start
 2008               		.loc 1 307 8 is_stmt 0 view .LVU443
 2009 008a 922F      		mov r25,r18
 2010 008c 9170      		andi r25,lo8(1)
 2011 008e 20FD      		sbrc r18,0
 2012 0090 00C0      		rjmp .L91
 308:drivers/oled/ssd1306_sh1106.c ****     } else {
 2013               		.loc 1 308 9 is_stmt 1 view .LVU444
 2014               	.LVL151:
 2015               	.LBB55:
 2016               	.LBI55:
 243:drivers/oled/ssd1306_sh1106.c ****     // Calculate commands to set memory addressing bounds.
 2017               		.loc 1 243 13 view .LVU445
 2018               	.LBB56:
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 2019               		.loc 1 245 5 view .LVU446
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 2020               		.loc 1 245 59 is_stmt 0 view .LVU447
 2021 0092 9801      		movw r18,r16
 2022 0094 3695      		lsr r19
 2023 0096 2795      		ror r18
 2024 0098 3695      		lsr r19
 2025 009a 2795      		ror r18
 2026               	.LVL152:
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 2027               		.loc 1 246 5 is_stmt 1 view .LVU448
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 2028               		.loc 1 246 44 is_stmt 0 view .LVU449
 2029 009c 8295      		swap r24
 2030               	.LVL153:
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 2031               		.loc 1 246 44 view .LVU450
 2032 009e 880F      		lsl r24
 246:drivers/oled/ssd1306_sh1106.c **** #if (OLED_IC == OLED_IC_SH1106)
 2033               		.loc 1 246 13 view .LVU451
 2034 00a0 8076      		andi r24,lo8(96)
 2035               	.LVL154:
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 2036               		.loc 1 258 5 is_stmt 1 view .LVU452
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 2037               		.loc 1 259 5 view .LVU453
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 2038               		.loc 1 260 5 view .LVU454
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 2039               		.loc 1 260 84 is_stmt 0 view .LVU455
 2040 00a2 3FE1      		ldi r19,lo8(31)
 2041 00a4 380F      		add r19,r24
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 2042               		.loc 1 261 5 is_stmt 1 view .LVU456
 2043               	.LVL155:
 2044               	.L92:
 258:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = start_page;
 2045               		.loc 1 258 18 is_stmt 0 view .LVU457
 2046 00a6 8093 0000 		sts display_start.21+2,r24
 259:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) % OLED_DISPLAY_WIDTH + cmd_array[1];
 2047               		.loc 1 259 18 view .LVU458
 2048 00aa 2093 0000 		sts display_start.21+5,r18
 260:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_WIDTH - 1) / OLED_DISPLAY_WIDTH - 1;
 2049               		.loc 1 260 18 view .LVU459
 2050 00ae 3093 0000 		sts display_start.21+3,r19
 261:drivers/oled/ssd1306_sh1106.c **** #endif
 2051               		.loc 1 261 18 view .LVU460
 2052 00b2 9093 0000 		sts display_start.21+6,r25
 2053               	.LBE56:
 2054               	.LBE55:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2055               		.loc 1 314 5 is_stmt 1 view .LVU461
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2056               		.loc 1 314 9 is_stmt 0 view .LVU462
 2057 00b6 24E6      		ldi r18,lo8(100)
 2058 00b8 30E0      		ldi r19,0
 2059 00ba 47E0      		ldi r20,lo8(7)
 2060 00bc 50E0      		ldi r21,0
 2061 00be 60E0      		ldi r22,lo8(display_start.21)
 2062 00c0 70E0      		ldi r23,hi8(display_start.21)
 2063 00c2 88E7      		ldi r24,lo8(120)
 2064 00c4 0E94 0000 		call i2c_transmit
 2065               	.LVL156:
 314:drivers/oled/ssd1306_sh1106.c ****         print("oled_render offset command failed\n");
 2066               		.loc 1 314 8 view .LVU463
 2067 00c8 892B      		or r24,r25
 2068 00ca 01F0      		breq .L93
 315:drivers/oled/ssd1306_sh1106.c ****         return;
 2069               		.loc 1 315 9 is_stmt 1 view .LVU464
 2070               	.LBB58:
 315:drivers/oled/ssd1306_sh1106.c ****         return;
 2071               		.loc 1 315 9 view .LVU465
 315:drivers/oled/ssd1306_sh1106.c ****         return;
 2072               		.loc 1 315 9 view .LVU466
 2073               	.LBE58:
 2074 00cc 80E0      		ldi r24,lo8(__c.20)
 2075 00ce 90E0      		ldi r25,hi8(__c.20)
 2076               	.LVL157:
 2077               	.L114:
 2078               	/* epilogue start */
 348:drivers/oled/ssd1306_sh1106.c **** 
 2079               		.loc 1 348 1 is_stmt 0 view .LVU467
 2080 00d0 DF91      		pop r29
 2081 00d2 CF91      		pop r28
 2082 00d4 1F91      		pop r17
 2083 00d6 0F91      		pop r16
 2084 00d8 FF90      		pop r15
 2085 00da EF90      		pop r14
 2086 00dc DF90      		pop r13
 2087 00de CF90      		pop r12
 2088 00e0 BF90      		pop r11
 2089 00e2 AF90      		pop r10
 2090 00e4 9F90      		pop r9
 2091 00e6 8F90      		pop r8
 2092 00e8 7F90      		pop r7
 2093 00ea 6F90      		pop r6
 2094 00ec 5F90      		pop r5
 2095 00ee 3F90      		pop r3
 2096 00f0 2F90      		pop r2
 2097               	.LBB59:
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2098               		.loc 1 338 13 view .LVU468
 2099 00f2 0C94 0000 		jmp xputs
 2100               	.LVL158:
 2101               	.L91:
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2102               		.loc 1 338 13 view .LVU469
 2103               	.LBE59:
 310:drivers/oled/ssd1306_sh1106.c ****     }
 2104               		.loc 1 310 9 is_stmt 1 view .LVU470
 2105               	.LBB75:
 2106               	.LBI75:
 265:drivers/oled/ssd1306_sh1106.c ****     cmd_array[1] = OLED_BLOCK_SIZE * update_start / OLED_DISPLAY_HEIGHT * 8;
 2107               		.loc 1 265 13 view .LVU471
 2108               	.LBB76:
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 2109               		.loc 1 266 5 view .LVU472
 266:drivers/oled/ssd1306_sh1106.c ****     cmd_array[4] = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_HEIGHT;
 2110               		.loc 1 266 73 is_stmt 0 view .LVU473
 2111 00f6 880F      		lsl r24
 2112 00f8 880F      		lsl r24
 2113 00fa 880F      		lsl r24
 267:drivers/oled/ssd1306_sh1106.c ****     cmd_array[2] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) / OLED_DISPLAY_HEIGHT * 8 - 1 + cmd_
 2114               		.loc 1 267 5 is_stmt 1 view .LVU474
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 2115               		.loc 1 268 5 view .LVU475
 268:drivers/oled/ssd1306_sh1106.c ****     ;
 2116               		.loc 1 268 94 is_stmt 0 view .LVU476
 2117 00fc 37E0      		ldi r19,lo8(7)
 2118 00fe 380F      		add r19,r24
 269:drivers/oled/ssd1306_sh1106.c ****     cmd_array[5] = (OLED_BLOCK_SIZE + OLED_DISPLAY_HEIGHT - 1) % OLED_DISPLAY_HEIGHT / 8;
 2119               		.loc 1 269 5 is_stmt 1 view .LVU477
 270:drivers/oled/ssd1306_sh1106.c **** }
 2120               		.loc 1 270 5 view .LVU478
 271:drivers/oled/ssd1306_sh1106.c **** 
 2121               		.loc 1 271 1 is_stmt 0 view .LVU479
 2122 0100 20E0      		ldi r18,0
 2123 0102 93E0      		ldi r25,lo8(3)
 2124 0104 00C0      		rjmp .L92
 2125               	.LVL159:
 2126               	.L93:
 271:drivers/oled/ssd1306_sh1106.c **** 
 2127               		.loc 1 271 1 view .LVU480
 2128               	.LBE76:
 2129               	.LBE75:
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 2130               		.loc 1 319 5 is_stmt 1 view .LVU481
 2131               	.LBB77:
 2132               	.LBB57:
 245:drivers/oled/ssd1306_sh1106.c ****     uint8_t start_column = OLED_BLOCK_SIZE * update_start % OLED_DISPLAY_WIDTH;
 2133               		.loc 1 245 44 is_stmt 0 view .LVU482
 2134 0106 A801      		movw r20,r16
 2135 0108 25E0      		ldi r18,5
 2136               		1:
 2137 010a 440F      		lsl r20
 2138 010c 551F      		rol r21
 2139 010e 2A95      		dec r18
 2140 0110 01F4      		brne 1b
 2141               	.LBE57:
 2142               	.LBE77:
 319:drivers/oled/ssd1306_sh1106.c ****         // Send render data chunk as is
 2143               		.loc 1 319 8 view .LVU483
 2144 0112 8091 0000 		lds r24,oled_rotation
 2145 0116 80FD      		sbrc r24,0
 2146 0118 00C0      		rjmp .L94
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2147               		.loc 1 321 9 is_stmt 1 view .LVU484
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2148               		.loc 1 321 13 is_stmt 0 view .LVU485
 2149 011a 4050      		subi r20,lo8(-(oled_buffer))
 2150 011c 5040      		sbci r21,hi8(-(oled_buffer))
 2151 011e 04E6      		ldi r16,lo8(100)
 2152 0120 10E0      		ldi r17,0
 2153               	.LVL160:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2154               		.loc 1 321 13 view .LVU486
 2155 0122 20E2      		ldi r18,lo8(32)
 2156 0124 30E0      		ldi r19,0
 2157 0126 60E4      		ldi r22,lo8(64)
 2158 0128 88E7      		ldi r24,lo8(120)
 2159 012a 0E94 0000 		call i2c_writeReg
 2160               	.LVL161:
 321:drivers/oled/ssd1306_sh1106.c ****             print("oled_render data failed\n");
 2161               		.loc 1 321 12 view .LVU487
 2162 012e 892B      		or r24,r25
 2163 0130 01F4      		brne .+2
 2164 0132 00C0      		rjmp .L95
 322:drivers/oled/ssd1306_sh1106.c ****             return;
 2165               		.loc 1 322 13 is_stmt 1 view .LVU488
 2166               	.LBB78:
 322:drivers/oled/ssd1306_sh1106.c ****             return;
 2167               		.loc 1 322 13 view .LVU489
 322:drivers/oled/ssd1306_sh1106.c ****             return;
 2168               		.loc 1 322 13 view .LVU490
 2169               	.LBE78:
 2170 0134 80E0      		ldi r24,lo8(__c.19)
 2171 0136 90E0      		ldi r25,hi8(__c.19)
 2172 0138 00C0      		rjmp .L114
 2173               	.LVL162:
 2174               	.L94:
 2175               	.LBB79:
 327:drivers/oled/ssd1306_sh1106.c ****         const static uint8_t target_map[] = OLED_TARGET_MAP;
 2176               		.loc 1 327 9 view .LVU491
 328:drivers/oled/ssd1306_sh1106.c **** 
 2177               		.loc 1 328 9 view .LVU492
 330:drivers/oled/ssd1306_sh1106.c ****         memset(temp_buffer, 0, sizeof(temp_buffer));
 2178               		.loc 1 330 9 view .LVU493
 331:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t i = 0; i < sizeof(source_map); ++i) {
 2179               		.loc 1 331 9 view .LVU494
 2180 013a E0E0      		ldi r30,lo8(temp_buffer.18)
 2181 013c F0E0      		ldi r31,hi8(temp_buffer.18)
 2182 013e 80E2      		ldi r24,lo8(32)
 2183 0140 DF01      		movw r26,r30
 2184               		0:
 2185 0142 1D92      		st X+,__zero_reg__
 2186 0144 8A95      		dec r24
 2187 0146 01F4      		brne 0b
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2188               		.loc 1 332 9 view .LVU495
 2189               	.LBB60:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2190               		.loc 1 332 14 view .LVU496
 2191               	.LVL163:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2192               		.loc 1 332 31 view .LVU497
 2193 0148 A0E0      		ldi r26,lo8(target_map.17)
 2194 014a B0E0      		ldi r27,hi8(target_map.17)
 2195 014c 00E0      		ldi r16,lo8(source_map.16)
 2196 014e 10E0      		ldi r17,hi8(source_map.16)
 2197               	.LVL164:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2198               		.loc 1 332 31 is_stmt 0 view .LVU498
 2199 0150 80E0      		ldi r24,lo8(target_map.17+4)
 2200 0152 C82E      		mov r12,r24
 2201 0154 80E0      		ldi r24,hi8(target_map.17+4)
 2202 0156 D82E      		mov r13,r24
 2203 0158 97E0      		ldi r25,lo8(7)
 2204 015a 592E      		mov r5,r25
 2205               	.LBB61:
 2206               	.LBB62:
 2207               	.LBB63:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2208               		.loc 1 281 31 view .LVU499
 2209 015c 7724      		clr r7
 2210 015e 7394      		inc r7
 2211               	.LVL165:
 2212               	.L98:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2213               		.loc 1 281 31 view .LVU500
 2214               	.LBE63:
 2215               	.LBE62:
 2216               	.LBE61:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2217               		.loc 1 333 13 is_stmt 1 discriminator 3 view .LVU501
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2218               		.loc 1 333 108 is_stmt 0 discriminator 3 view .LVU502
 2219 0160 9D91      		ld r25,X+
 2220               	.LVL166:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2221               		.loc 1 333 79 discriminator 3 view .LVU503
 2222 0162 E801      		movw r28,r16
 2223 0164 8991      		ld r24,Y+
 2224 0166 8E01      		movw r16,r28
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2225               		.loc 1 333 67 discriminator 3 view .LVU504
 2226 0168 BA01      		movw r22,r20
 2227 016a 680F      		add r22,r24
 2228 016c 711D      		adc r23,__zero_reg__
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2229               		.loc 1 333 23 discriminator 3 view .LVU505
 2230 016e 6050      		subi r22,lo8(-(oled_buffer))
 2231 0170 7040      		sbci r23,hi8(-(oled_buffer))
 2232               	.LVL167:
 2233               	.LBB72:
 2234               	.LBI61:
 279:drivers/oled/ssd1306_sh1106.c ****     for (uint8_t i = 0, shift = 7; i < 8; ++i, --shift) {
 2235               		.loc 1 279 13 is_stmt 1 discriminator 3 view .LVU506
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2236               		.loc 1 280 5 discriminator 3 view .LVU507
 2237               	.LBB70:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2238               		.loc 1 280 10 discriminator 3 view .LVU508
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2239               		.loc 1 280 38 discriminator 3 view .LVU509
 2240               	.LBE70:
 2241               	.LBE72:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2242               		.loc 1 333 13 is_stmt 0 discriminator 3 view .LVU510
 2243 0172 E92F      		mov r30,r25
 2244 0174 F0E0      		ldi r31,0
 2245 0176 E050      		subi r30,lo8(-(temp_buffer.18))
 2246 0178 F040      		sbci r31,hi8(-(temp_buffer.18))
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2247               		.loc 1 333 23 discriminator 3 view .LVU511
 2248 017a 90E0      		ldi r25,0
 2249               	.LVL168:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2250               		.loc 1 333 23 discriminator 3 view .LVU512
 2251 017c 80E0      		ldi r24,0
 2252               	.LVL169:
 2253               	.L97:
 333:drivers/oled/ssd1306_sh1106.c ****         }
 2254               		.loc 1 333 23 discriminator 3 view .LVU513
 2255 017e 652C      		mov r6,r5
 2256 0180 681A      		sub r6,r24
 2257               	.LVL170:
 2258               	.LBB73:
 2259               	.LBB71:
 2260               	.LBB69:
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2261               		.loc 1 281 9 is_stmt 1 view .LVU514
 281:drivers/oled/ssd1306_sh1106.c ****         for (uint8_t j = 0; j < 8; ++j) {
 2262               		.loc 1 281 17 is_stmt 0 view .LVU515
 2263 0182 872C      		mov r8,r7
 2264 0184 082E      		mov r0,r24
 2265 0186 00C0      		rjmp 2f
 2266               		1:
 2267 0188 880C      		lsl r8
 2268               		2:
 2269 018a 0A94      		dec r0
 2270 018c 02F4      		brpl 1b
 2271               	.LVL171:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2272               		.loc 1 282 9 is_stmt 1 view .LVU516
 2273               	.LBB64:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2274               		.loc 1 282 14 view .LVU517
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2275               		.loc 1 282 31 view .LVU518
 2276 018e 7B01      		movw r14,r22
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2277               		.loc 1 282 22 is_stmt 0 view .LVU519
 2278 0190 A12C      		mov r10,__zero_reg__
 2279               	.LVL172:
 2280               	.L96:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2281               		.loc 1 283 13 is_stmt 1 view .LVU520
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2282               		.loc 1 283 32 is_stmt 0 view .LVU521
 2283 0192 E701      		movw r28,r14
 2284 0194 B990      		ld r11,Y+
 2285 0196 7E01      		movw r14,r28
 2286               	.LVL173:
 2287               	.LBB65:
 2288               	.LBI65:
 273:drivers/oled/ssd1306_sh1106.c ****     const uint8_t mask = 0x7;
 2289               		.loc 1 273 9 is_stmt 1 view .LVU522
 2290               	.LBB66:
 274:drivers/oled/ssd1306_sh1106.c ****     n &= mask;
 2291               		.loc 1 274 5 view .LVU523
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2292               		.loc 1 275 5 view .LVU524
 276:drivers/oled/ssd1306_sh1106.c **** }
 2293               		.loc 1 276 5 view .LVU525
 276:drivers/oled/ssd1306_sh1106.c **** }
 2294               		.loc 1 276 5 is_stmt 0 view .LVU526
 2295               	.LBE66:
 2296               	.LBE65:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2297               		.loc 1 283 24 view .LVU527
 2298 0198 B820      		and r11,r8
 2299               	.LBB68:
 2300               	.LBB67:
 275:drivers/oled/ssd1306_sh1106.c ****     return a << n | a >> (-n & mask);
 2301               		.loc 1 275 7 view .LVU528
 2302 019a 262D      		mov r18,r6
 2303 019c 2A19      		sub r18,r10
 2304 019e 2770      		andi r18,lo8(7)
 2305 01a0 922E      		mov r9,r18
 276:drivers/oled/ssd1306_sh1106.c **** }
 2306               		.loc 1 276 14 view .LVU529
 2307 01a2 022E      		mov __tmp_reg__,r18
 2308 01a4 000C      		lsl r0
 2309 01a6 330B      		sbc r19,r19
 2310               	.LBE67:
 2311               	.LBE68:
 283:drivers/oled/ssd1306_sh1106.c ****         }
 2312               		.loc 1 283 21 view .LVU530
 2313 01a8 DB2D      		mov r29,r11
 2314 01aa 00C0      		rjmp 2f
 2315               		1:
 2316 01ac DD0F      		lsl r29
 2317               		2:
 2318 01ae 9A94      		dec r9
 2319 01b0 02F4      		brpl 1b
 2320 01b2 9D2E      		mov r9,r29
 2321 01b4 3195      		neg r19
 2322 01b6 2195      		neg r18
 2323 01b8 3109      		sbc r19,__zero_reg__
 2324 01ba 2770      		andi r18,7
 2325 01bc 3327      		clr r19
 2326 01be 00C0      		rjmp 2f
 2327               		1:
 2328 01c0 B694      		lsr r11
 2329               		2:
 2330 01c2 2A95      		dec r18
 2331 01c4 02F4      		brpl 1b
 2332 01c6 9B28      		or r9,r11
 2333 01c8 2081      		ld r18,Z
 2334 01ca 922A      		or r9,r18
 2335 01cc 9082      		st Z,r9
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2336               		.loc 1 282 36 is_stmt 1 view .LVU531
 2337 01ce A394      		inc r10
 2338               	.LVL174:
 282:drivers/oled/ssd1306_sh1106.c ****             dest[i] |= crot(src[j] & selector, shift - (int8_t)j);
 2339               		.loc 1 282 31 view .LVU532
 2340 01d0 28E0      		ldi r18,lo8(8)
 2341 01d2 A212      		cpse r10,r18
 2342 01d4 00C0      		rjmp .L96
 2343               	.LBE64:
 2344               	.LBE69:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2345               		.loc 1 280 46 view .LVU533
 2346               	.LVL175:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2347               		.loc 1 280 38 view .LVU534
 2348 01d6 0196      		adiw r24,1
 2349               	.LVL176:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2350               		.loc 1 280 38 is_stmt 0 view .LVU535
 2351 01d8 3196      		adiw r30,1
 2352 01da 8830      		cpi r24,8
 2353 01dc 9105      		cpc r25,__zero_reg__
 2354 01de 01F4      		brne .L97
 2355               	.LVL177:
 280:drivers/oled/ssd1306_sh1106.c ****         uint8_t selector = (1 << i);
 2356               		.loc 1 280 38 view .LVU536
 2357               	.LBE71:
 2358               	.LBE73:
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2359               		.loc 1 332 53 is_stmt 1 discriminator 3 view .LVU537
 332:drivers/oled/ssd1306_sh1106.c ****             rotate_90(&oled_buffer[OLED_BLOCK_SIZE * update_start + source_map[i]], &temp_buffer[ta
 2360               		.loc 1 332 31 discriminator 3 view .LVU538
 2361 01e0 CA16      		cp r12,r26
 2362 01e2 DB06      		cpc r13,r27
 2363 01e4 01F0      		breq .+2
 2364 01e6 00C0      		rjmp .L98
 2365               	.LBE60:
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2366               		.loc 1 337 9 view .LVU539
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2367               		.loc 1 337 13 is_stmt 0 view .LVU540
 2368 01e8 04E6      		ldi r16,lo8(100)
 2369 01ea 10E0      		ldi r17,0
 2370 01ec 20E2      		ldi r18,lo8(32)
 2371 01ee 30E0      		ldi r19,0
 2372 01f0 40E0      		ldi r20,lo8(temp_buffer.18)
 2373 01f2 50E0      		ldi r21,hi8(temp_buffer.18)
 2374 01f4 60E4      		ldi r22,lo8(64)
 2375 01f6 88E7      		ldi r24,lo8(120)
 2376 01f8 0E94 0000 		call i2c_writeReg
 2377               	.LVL178:
 337:drivers/oled/ssd1306_sh1106.c ****             print("oled_render90 data failed\n");
 2378               		.loc 1 337 12 view .LVU541
 2379 01fc 892B      		or r24,r25
 2380 01fe 01F0      		breq .L95
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2381               		.loc 1 338 13 is_stmt 1 view .LVU542
 2382               	.LBB74:
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2383               		.loc 1 338 13 view .LVU543
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2384               		.loc 1 338 13 view .LVU544
 2385               	.LBE74:
 2386 0200 80E0      		ldi r24,lo8(__c.15)
 2387 0202 90E0      		ldi r25,hi8(__c.15)
 2388 0204 00C0      		rjmp .L114
 2389               	.LVL179:
 2390               	.L95:
 338:drivers/oled/ssd1306_sh1106.c ****             return;
 2391               		.loc 1 338 13 is_stmt 0 view .LVU545
 2392               	.LBE79:
 344:drivers/oled/ssd1306_sh1106.c **** 
 2393               		.loc 1 344 5 is_stmt 1 view .LVU546
 2394 0206 0E94 0000 		call oled_on
 2395               	.LVL180:
 347:drivers/oled/ssd1306_sh1106.c **** }
 2396               		.loc 1 347 5 view .LVU547
 347:drivers/oled/ssd1306_sh1106.c **** }
 2397               		.loc 1 347 19 is_stmt 0 view .LVU548
 2398 020a E101      		movw r28,r2
 2399 020c C095      		com r28
 2400 020e D095      		com r29
 347:drivers/oled/ssd1306_sh1106.c **** }
 2401               		.loc 1 347 16 view .LVU549
 2402 0210 8091 0000 		lds r24,oled_dirty
 2403 0214 9091 0000 		lds r25,oled_dirty+1
 2404 0218 8C23      		and r24,r28
 2405 021a 9D23      		and r25,r29
 2406 021c 9093 0000 		sts oled_dirty+1,r25
 2407 0220 8093 0000 		sts oled_dirty,r24
 2408 0224 00C0      		rjmp .L87
 2409               		.cfi_endproc
 2410               	.LFE15:
 2412               		.section	.text.oled_off,"ax",@progbits
 2413               	.global	oled_off
 2415               	oled_off:
 2416               	.LFB31:
 574:drivers/oled/ssd1306_sh1106.c **** 
 575:drivers/oled/ssd1306_sh1106.c **** bool oled_off(void) {
 2417               		.loc 1 575 21 is_stmt 1 view -0
 2418               		.cfi_startproc
 2419               	/* prologue: function */
 2420               	/* frame size = 0 */
 2421               	/* stack size = 0 */
 2422               	.L__stack_usage = 0
 576:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2423               		.loc 1 576 5 view .LVU551
 577:drivers/oled/ssd1306_sh1106.c ****         return !oled_active;
 2424               		.loc 1 577 9 is_stmt 0 view .LVU552
 2425 0000 8091 0000 		lds r24,oled_active
 576:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2426               		.loc 1 576 8 view .LVU553
 2427 0004 9091 0000 		lds r25,oled_initialized
 2428 0008 9111      		cpse r25,__zero_reg__
 2429 000a 00C0      		rjmp .L116
 2430               	.L123:
 578:drivers/oled/ssd1306_sh1106.c ****     }
 579:drivers/oled/ssd1306_sh1106.c **** 
 580:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t PROGMEM display_off[] =
 581:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 582:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, FADE_BLINK, ENABLE_FADE | OLED_FADE_OUT_INTERVAL};
 583:drivers/oled/ssd1306_sh1106.c **** #else
 584:drivers/oled/ssd1306_sh1106.c ****         {I2C_CMD, DISPLAY_OFF};
 585:drivers/oled/ssd1306_sh1106.c **** #endif
 586:drivers/oled/ssd1306_sh1106.c **** 
 587:drivers/oled/ssd1306_sh1106.c ****     if (oled_active) {
 588:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 589:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 590:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 591:drivers/oled/ssd1306_sh1106.c ****         }
 592:drivers/oled/ssd1306_sh1106.c ****         oled_active = false;
 593:drivers/oled/ssd1306_sh1106.c ****     }
 594:drivers/oled/ssd1306_sh1106.c ****     return !oled_active;
 2431               		.loc 1 594 5 view .LVU554
 2432 000c 91E0      		ldi r25,lo8(1)
 2433 000e 8927      		eor r24,r25
 2434               	/* epilogue start */
 595:drivers/oled/ssd1306_sh1106.c **** }
 2435               		.loc 1 595 1 view .LVU555
 2436 0010 0895      		ret
 2437               	.L116:
 580:drivers/oled/ssd1306_sh1106.c **** #ifdef OLED_FADE_OUT
 2438               		.loc 1 580 5 is_stmt 1 view .LVU556
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2439               		.loc 1 587 5 view .LVU557
 587:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_off) != I2C_STATUS_SUCCESS) {
 2440               		.loc 1 587 8 is_stmt 0 view .LVU558
 2441 0012 8823      		tst r24
 2442 0014 01F0      		breq .L118
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2443               		.loc 1 588 9 is_stmt 1 view .LVU559
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2444               		.loc 1 588 13 is_stmt 0 view .LVU560
 2445 0016 62E0      		ldi r22,lo8(2)
 2446 0018 70E0      		ldi r23,0
 2447 001a 80E0      		ldi r24,lo8(display_off.11)
 2448 001c 90E0      		ldi r25,hi8(display_off.11)
 2449 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 2450               	.LVL181:
 588:drivers/oled/ssd1306_sh1106.c ****             print("oled_off cmd failed\n");
 2451               		.loc 1 588 12 view .LVU561
 2452 0022 892B      		or r24,r25
 2453 0024 01F0      		breq .L119
 589:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 2454               		.loc 1 589 13 is_stmt 1 view .LVU562
 2455               	.LBB80:
 589:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 2456               		.loc 1 589 13 view .LVU563
 589:drivers/oled/ssd1306_sh1106.c ****             return oled_active;
 2457               		.loc 1 589 13 view .LVU564
 2458               	.LBE80:
 2459 0026 80E0      		ldi r24,lo8(__c.10)
 2460 0028 90E0      		ldi r25,hi8(__c.10)
 2461 002a 0E94 0000 		call xputs
 2462               	.LVL182:
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2463               		.loc 1 590 13 view .LVU565
 590:drivers/oled/ssd1306_sh1106.c ****         }
 2464               		.loc 1 590 20 is_stmt 0 view .LVU566
 2465 002e 8091 0000 		lds r24,oled_active
 2466 0032 0895      		ret
 2467               	.L119:
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2468               		.loc 1 592 9 is_stmt 1 view .LVU567
 592:drivers/oled/ssd1306_sh1106.c ****     }
 2469               		.loc 1 592 21 is_stmt 0 view .LVU568
 2470 0034 1092 0000 		sts oled_active,__zero_reg__
 2471               	.L118:
 594:drivers/oled/ssd1306_sh1106.c **** }
 2472               		.loc 1 594 5 is_stmt 1 view .LVU569
 2473 0038 8091 0000 		lds r24,oled_active
 2474 003c 00C0      		rjmp .L123
 2475               		.cfi_endproc
 2476               	.LFE31:
 2478               		.section	.text.is_oled_on,"ax",@progbits
 2479               	.global	is_oled_on
 2481               	is_oled_on:
 2482               	.LFB32:
 596:drivers/oled/ssd1306_sh1106.c **** 
 597:drivers/oled/ssd1306_sh1106.c **** bool is_oled_on(void) { return oled_active; }
 2483               		.loc 1 597 23 view -0
 2484               		.cfi_startproc
 2485               	/* prologue: function */
 2486               	/* frame size = 0 */
 2487               	/* stack size = 0 */
 2488               	.L__stack_usage = 0
 2489               		.loc 1 597 25 view .LVU571
 2490               		.loc 1 597 45 is_stmt 0 view .LVU572
 2491 0000 8091 0000 		lds r24,oled_active
 2492               	/* epilogue start */
 2493 0004 0895      		ret
 2494               		.cfi_endproc
 2495               	.LFE32:
 2497               		.section	.text.oled_set_brightness,"ax",@progbits
 2498               	.global	oled_set_brightness
 2500               	oled_set_brightness:
 2501               	.LVL183:
 2502               	.LFB33:
 598:drivers/oled/ssd1306_sh1106.c **** 
 599:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_set_brightness(uint8_t level) {
 2503               		.loc 1 599 44 is_stmt 1 view -0
 2504               		.cfi_startproc
 2505               		.loc 1 599 44 is_stmt 0 view .LVU574
 2506 0000 1F93      		push r17
 2507               	.LCFI56:
 2508               		.cfi_def_cfa_offset 3
 2509               		.cfi_offset 17, -2
 2510 0002 CF93      		push r28
 2511               	.LCFI57:
 2512               		.cfi_def_cfa_offset 4
 2513               		.cfi_offset 28, -3
 2514 0004 DF93      		push r29
 2515               	.LCFI58:
 2516               		.cfi_def_cfa_offset 5
 2517               		.cfi_offset 29, -4
 2518 0006 00D0      		rcall .
 2519 0008 0F92      		push __tmp_reg__
 2520               	.LCFI59:
 2521               		.cfi_def_cfa_offset 8
 2522 000a CDB7      		in r28,__SP_L__
 2523 000c DEB7      		in r29,__SP_H__
 2524               	.LCFI60:
 2525               		.cfi_def_cfa_register 28
 2526               	/* prologue: function */
 2527               	/* frame size = 3 */
 2528               	/* stack size = 6 */
 2529               	.L__stack_usage = 6
 2530 000e 182F      		mov r17,r24
 600:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2531               		.loc 1 600 5 is_stmt 1 view .LVU575
 601:drivers/oled/ssd1306_sh1106.c ****         return oled_brightness;
 2532               		.loc 1 601 16 is_stmt 0 view .LVU576
 2533 0010 8091 0000 		lds r24,oled_brightness
 2534               	.LVL184:
 600:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2535               		.loc 1 600 8 view .LVU577
 2536 0014 9091 0000 		lds r25,oled_initialized
 2537 0018 9923      		tst r25
 2538 001a 01F0      		breq .L125
 602:drivers/oled/ssd1306_sh1106.c ****     }
 603:drivers/oled/ssd1306_sh1106.c **** 
 604:drivers/oled/ssd1306_sh1106.c ****     uint8_t set_contrast[] = {I2C_CMD, CONTRAST, level};
 2539               		.loc 1 604 5 is_stmt 1 view .LVU578
 2540               		.loc 1 604 13 is_stmt 0 view .LVU579
 2541 001c 1982      		std Y+1,__zero_reg__
 2542 001e 91E8      		ldi r25,lo8(-127)
 2543 0020 9A83      		std Y+2,r25
 2544 0022 1B83      		std Y+3,r17
 605:drivers/oled/ssd1306_sh1106.c ****     if (oled_brightness != level) {
 2545               		.loc 1 605 5 is_stmt 1 view .LVU580
 2546               		.loc 1 605 8 is_stmt 0 view .LVU581
 2547 0024 1817      		cp r17,r24
 2548 0026 01F0      		breq .L127
 606:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(set_contrast) != I2C_STATUS_SUCCESS) {
 2549               		.loc 1 606 9 is_stmt 1 view .LVU582
 2550               		.loc 1 606 13 is_stmt 0 view .LVU583
 2551 0028 24E6      		ldi r18,lo8(100)
 2552 002a 30E0      		ldi r19,0
 2553 002c 43E0      		ldi r20,lo8(3)
 2554 002e 50E0      		ldi r21,0
 2555 0030 BE01      		movw r22,r28
 2556 0032 6F5F      		subi r22,-1
 2557 0034 7F4F      		sbci r23,-1
 2558 0036 88E7      		ldi r24,lo8(120)
 2559 0038 0E94 0000 		call i2c_transmit
 2560               	.LVL185:
 2561               		.loc 1 606 12 view .LVU584
 2562 003c 892B      		or r24,r25
 2563 003e 01F0      		breq .L128
 607:drivers/oled/ssd1306_sh1106.c ****             print("set_brightness cmd failed\n");
 2564               		.loc 1 607 13 is_stmt 1 view .LVU585
 2565               	.LBB81:
 2566               		.loc 1 607 13 view .LVU586
 2567               		.loc 1 607 13 view .LVU587
 2568               	.LBE81:
 2569 0040 80E0      		ldi r24,lo8(__c.9)
 2570 0042 90E0      		ldi r25,hi8(__c.9)
 2571 0044 0E94 0000 		call xputs
 2572               	.LVL186:
 608:drivers/oled/ssd1306_sh1106.c ****             return oled_brightness;
 2573               		.loc 1 608 13 view .LVU588
 2574               	.L127:
 609:drivers/oled/ssd1306_sh1106.c ****         }
 610:drivers/oled/ssd1306_sh1106.c ****         oled_brightness = level;
 611:drivers/oled/ssd1306_sh1106.c ****     }
 612:drivers/oled/ssd1306_sh1106.c ****     return oled_brightness;
 2575               		.loc 1 612 5 view .LVU589
 2576               		.loc 1 612 12 is_stmt 0 view .LVU590
 2577 0048 8091 0000 		lds r24,oled_brightness
 2578               	.L125:
 2579               	/* epilogue start */
 613:drivers/oled/ssd1306_sh1106.c **** }
 2580               		.loc 1 613 1 view .LVU591
 2581 004c 0F90      		pop __tmp_reg__
 2582 004e 0F90      		pop __tmp_reg__
 2583 0050 0F90      		pop __tmp_reg__
 2584 0052 DF91      		pop r29
 2585 0054 CF91      		pop r28
 2586 0056 1F91      		pop r17
 2587               	.LVL187:
 2588               		.loc 1 613 1 view .LVU592
 2589 0058 0895      		ret
 2590               	.LVL188:
 2591               	.L128:
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2592               		.loc 1 610 9 is_stmt 1 view .LVU593
 610:drivers/oled/ssd1306_sh1106.c ****     }
 2593               		.loc 1 610 25 is_stmt 0 view .LVU594
 2594 005a 1093 0000 		sts oled_brightness,r17
 2595 005e 00C0      		rjmp .L127
 2596               		.cfi_endproc
 2597               	.LFE33:
 2599               		.section	.text.oled_get_brightness,"ax",@progbits
 2600               	.global	oled_get_brightness
 2602               	oled_get_brightness:
 2603               	.LFB34:
 614:drivers/oled/ssd1306_sh1106.c **** 
 615:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_get_brightness(void) { return oled_brightness; }
 2604               		.loc 1 615 35 is_stmt 1 view -0
 2605               		.cfi_startproc
 2606               	/* prologue: function */
 2607               	/* frame size = 0 */
 2608               	/* stack size = 0 */
 2609               	.L__stack_usage = 0
 2610               		.loc 1 615 37 view .LVU596
 2611               		.loc 1 615 61 is_stmt 0 view .LVU597
 2612 0000 8091 0000 		lds r24,oled_brightness
 2613               	/* epilogue start */
 2614 0004 0895      		ret
 2615               		.cfi_endproc
 2616               	.LFE34:
 2618               		.section	.text.oled_scroll_set_area,"ax",@progbits
 2619               	.global	oled_scroll_set_area
 2621               	oled_scroll_set_area:
 2622               	.LVL189:
 2623               	.LFB35:
 616:drivers/oled/ssd1306_sh1106.c **** 
 617:drivers/oled/ssd1306_sh1106.c **** // Set the specific 8 lines rows of the screen to scroll.
 618:drivers/oled/ssd1306_sh1106.c **** // 0 is the default for start, and 7 for end, which is the entire
 619:drivers/oled/ssd1306_sh1106.c **** // height of the screen.  For 128x32 screens, rows 4-7 are not used.
 620:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_area(uint8_t start_line, uint8_t end_line) {
 2624               		.loc 1 620 65 is_stmt 1 view -0
 2625               		.cfi_startproc
 2626               	/* prologue: function */
 2627               	/* frame size = 0 */
 2628               	/* stack size = 0 */
 2629               	.L__stack_usage = 0
 621:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_start = start_line;
 2630               		.loc 1 621 5 view .LVU599
 2631               		.loc 1 621 23 is_stmt 0 view .LVU600
 2632 0000 8093 0000 		sts oled_scroll_start,r24
 622:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_end   = end_line;
 2633               		.loc 1 622 5 is_stmt 1 view .LVU601
 2634               		.loc 1 622 23 is_stmt 0 view .LVU602
 2635 0004 6093 0000 		sts oled_scroll_end,r22
 2636               	/* epilogue start */
 623:drivers/oled/ssd1306_sh1106.c **** }
 2637               		.loc 1 623 1 view .LVU603
 2638 0008 0895      		ret
 2639               		.cfi_endproc
 2640               	.LFE35:
 2642               		.section	.text.oled_scroll_set_speed,"ax",@progbits
 2643               	.global	oled_scroll_set_speed
 2645               	oled_scroll_set_speed:
 2646               	.LVL190:
 2647               	.LFB36:
 624:drivers/oled/ssd1306_sh1106.c **** 
 625:drivers/oled/ssd1306_sh1106.c **** void oled_scroll_set_speed(uint8_t speed) {
 2648               		.loc 1 625 43 is_stmt 1 view -0
 2649               		.cfi_startproc
 2650               	/* prologue: function */
 2651               	/* frame size = 0 */
 2652               	/* stack size = 0 */
 2653               	.L__stack_usage = 0
 626:drivers/oled/ssd1306_sh1106.c ****     // Sets the speed for scrolling... does not take effect
 627:drivers/oled/ssd1306_sh1106.c ****     // until scrolling is either started or restarted
 628:drivers/oled/ssd1306_sh1106.c ****     // the ssd1306 supports 8 speeds
 629:drivers/oled/ssd1306_sh1106.c ****     // FrameRate2   speed = 7
 630:drivers/oled/ssd1306_sh1106.c ****     // FrameRate3   speed = 4
 631:drivers/oled/ssd1306_sh1106.c ****     // FrameRate4   speed = 5
 632:drivers/oled/ssd1306_sh1106.c ****     // FrameRate5   speed = 0
 633:drivers/oled/ssd1306_sh1106.c ****     // FrameRate25  speed = 6
 634:drivers/oled/ssd1306_sh1106.c ****     // FrameRate64  speed = 1
 635:drivers/oled/ssd1306_sh1106.c ****     // FrameRate128 speed = 2
 636:drivers/oled/ssd1306_sh1106.c ****     // FrameRate256 speed = 3
 637:drivers/oled/ssd1306_sh1106.c ****     // for ease of use these are remaped here to be in order
 638:drivers/oled/ssd1306_sh1106.c ****     static const uint8_t scroll_remap[8] = {7, 4, 5, 0, 6, 1, 2, 3};
 2654               		.loc 1 638 5 view .LVU605
 639:drivers/oled/ssd1306_sh1106.c ****     oled_scroll_speed                    = scroll_remap[speed];
 2655               		.loc 1 639 5 view .LVU606
 2656               		.loc 1 639 56 is_stmt 0 view .LVU607
 2657 0000 E82F      		mov r30,r24
 2658 0002 F0E0      		ldi r31,0
 2659 0004 E050      		subi r30,lo8(-(scroll_remap.8))
 2660 0006 F040      		sbci r31,hi8(-(scroll_remap.8))
 2661               		.loc 1 639 42 view .LVU608
 2662 0008 8081      		ld r24,Z
 2663               	.LVL191:
 2664               		.loc 1 639 42 view .LVU609
 2665 000a 8093 0000 		sts oled_scroll_speed,r24
 2666               	/* epilogue start */
 640:drivers/oled/ssd1306_sh1106.c **** }
 2667               		.loc 1 640 1 view .LVU610
 2668 000e 0895      		ret
 2669               		.cfi_endproc
 2670               	.LFE36:
 2672               		.section	.text.oled_scroll_right,"ax",@progbits
 2673               	.global	oled_scroll_right
 2675               	oled_scroll_right:
 2676               	.LFB37:
 641:drivers/oled/ssd1306_sh1106.c **** 
 642:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_right(void) {
 2677               		.loc 1 642 30 is_stmt 1 view -0
 2678               		.cfi_startproc
 2679 0000 CF93      		push r28
 2680               	.LCFI61:
 2681               		.cfi_def_cfa_offset 3
 2682               		.cfi_offset 28, -2
 2683 0002 DF93      		push r29
 2684               	.LCFI62:
 2685               		.cfi_def_cfa_offset 4
 2686               		.cfi_offset 29, -3
 2687 0004 CDB7      		in r28,__SP_L__
 2688 0006 DEB7      		in r29,__SP_H__
 2689               	.LCFI63:
 2690               		.cfi_def_cfa_register 28
 2691 0008 2997      		sbiw r28,9
 2692               	.LCFI64:
 2693               		.cfi_def_cfa_offset 13
 2694 000a 0FB6      		in __tmp_reg__,__SREG__
 2695 000c F894      		cli
 2696 000e DEBF      		out __SP_H__,r29
 2697 0010 0FBE      		out __SREG__,__tmp_reg__
 2698 0012 CDBF      		out __SP_L__,r28
 2699               	/* prologue: function */
 2700               	/* frame size = 9 */
 2701               	/* stack size = 11 */
 2702               	.L__stack_usage = 11
 643:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2703               		.loc 1 643 5 view .LVU612
 644:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 2704               		.loc 1 644 16 is_stmt 0 view .LVU613
 2705 0014 8091 0000 		lds r24,oled_scrolling
 643:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2706               		.loc 1 643 8 view .LVU614
 2707 0018 9091 0000 		lds r25,oled_initialized
 2708 001c 9923      		tst r25
 2709 001e 01F0      		breq .L135
 645:drivers/oled/ssd1306_sh1106.c ****     }
 646:drivers/oled/ssd1306_sh1106.c **** 
 647:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 648:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 649:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2710               		.loc 1 649 5 is_stmt 1 view .LVU615
 2711               		.loc 1 649 8 is_stmt 0 view .LVU616
 2712 0020 2091 0000 		lds r18,oled_dirty
 2713 0024 3091 0000 		lds r19,oled_dirty+1
 2714 0028 232B      		or r18,r19
 2715 002a 01F4      		brne .L137
 2716               		.loc 1 649 21 discriminator 1 view .LVU617
 2717 002c 8111      		cpse r24,__zero_reg__
 2718 002e 00C0      		rjmp .L137
 2719               	.LBB82:
 650:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_right[] = {I2C_CMD, SCROLL_RIGHT, 0x00, oled_scroll_start, oled_scro
 2720               		.loc 1 650 9 is_stmt 1 view .LVU618
 2721               		.loc 1 650 17 is_stmt 0 view .LVU619
 2722 0030 1982      		std Y+1,__zero_reg__
 2723 0032 86E2      		ldi r24,lo8(38)
 2724 0034 8A83      		std Y+2,r24
 2725 0036 1B82      		std Y+3,__zero_reg__
 2726 0038 8091 0000 		lds r24,oled_scroll_start
 2727 003c 8C83      		std Y+4,r24
 2728 003e 8091 0000 		lds r24,oled_scroll_speed
 2729 0042 8D83      		std Y+5,r24
 2730 0044 8091 0000 		lds r24,oled_scroll_end
 2731 0048 8E83      		std Y+6,r24
 2732 004a 1F82      		std Y+7,__zero_reg__
 2733 004c 8FEF      		ldi r24,lo8(-1)
 2734 004e 8887      		std Y+8,r24
 2735 0050 8FE2      		ldi r24,lo8(47)
 2736 0052 8987      		std Y+9,r24
 651:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_right) != I2C_STATUS_SUCCESS) {
 2737               		.loc 1 651 9 is_stmt 1 view .LVU620
 2738               		.loc 1 651 13 is_stmt 0 view .LVU621
 2739 0054 24E6      		ldi r18,lo8(100)
 2740 0056 30E0      		ldi r19,0
 2741 0058 49E0      		ldi r20,lo8(9)
 2742 005a 50E0      		ldi r21,0
 2743 005c BE01      		movw r22,r28
 2744 005e 6F5F      		subi r22,-1
 2745 0060 7F4F      		sbci r23,-1
 2746 0062 88E7      		ldi r24,lo8(120)
 2747 0064 0E94 0000 		call i2c_transmit
 2748               	.LVL192:
 2749               		.loc 1 651 12 view .LVU622
 2750 0068 892B      		or r24,r25
 2751 006a 01F0      		breq .L138
 652:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_right cmd failed\n");
 2752               		.loc 1 652 13 is_stmt 1 view .LVU623
 2753               	.LBB83:
 2754               		.loc 1 652 13 view .LVU624
 2755               		.loc 1 652 13 view .LVU625
 2756               	.LBE83:
 2757 006c 80E0      		ldi r24,lo8(__c.7)
 2758 006e 90E0      		ldi r25,hi8(__c.7)
 2759 0070 0E94 0000 		call xputs
 2760               	.LVL193:
 653:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2761               		.loc 1 653 13 view .LVU626
 2762               	.L137:
 2763               	.LBE82:
 654:drivers/oled/ssd1306_sh1106.c ****         }
 655:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 656:drivers/oled/ssd1306_sh1106.c ****     }
 657:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2764               		.loc 1 657 5 view .LVU627
 2765               		.loc 1 657 12 is_stmt 0 view .LVU628
 2766 0074 8091 0000 		lds r24,oled_scrolling
 2767               	.L135:
 2768               	/* epilogue start */
 658:drivers/oled/ssd1306_sh1106.c **** }
 2769               		.loc 1 658 1 view .LVU629
 2770 0078 2996      		adiw r28,9
 2771 007a 0FB6      		in __tmp_reg__,__SREG__
 2772 007c F894      		cli
 2773 007e DEBF      		out __SP_H__,r29
 2774 0080 0FBE      		out __SREG__,__tmp_reg__
 2775 0082 CDBF      		out __SP_L__,r28
 2776 0084 DF91      		pop r29
 2777 0086 CF91      		pop r28
 2778 0088 0895      		ret
 2779               	.L138:
 2780               	.LBB84:
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2781               		.loc 1 655 9 is_stmt 1 view .LVU630
 655:drivers/oled/ssd1306_sh1106.c ****     }
 2782               		.loc 1 655 24 is_stmt 0 view .LVU631
 2783 008a 81E0      		ldi r24,lo8(1)
 2784 008c 8093 0000 		sts oled_scrolling,r24
 2785 0090 00C0      		rjmp .L137
 2786               	.LBE84:
 2787               		.cfi_endproc
 2788               	.LFE37:
 2790               		.section	.text.oled_scroll_left,"ax",@progbits
 2791               	.global	oled_scroll_left
 2793               	oled_scroll_left:
 2794               	.LFB38:
 659:drivers/oled/ssd1306_sh1106.c **** 
 660:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_left(void) {
 2795               		.loc 1 660 29 is_stmt 1 view -0
 2796               		.cfi_startproc
 2797 0000 CF93      		push r28
 2798               	.LCFI65:
 2799               		.cfi_def_cfa_offset 3
 2800               		.cfi_offset 28, -2
 2801 0002 DF93      		push r29
 2802               	.LCFI66:
 2803               		.cfi_def_cfa_offset 4
 2804               		.cfi_offset 29, -3
 2805 0004 CDB7      		in r28,__SP_L__
 2806 0006 DEB7      		in r29,__SP_H__
 2807               	.LCFI67:
 2808               		.cfi_def_cfa_register 28
 2809 0008 2997      		sbiw r28,9
 2810               	.LCFI68:
 2811               		.cfi_def_cfa_offset 13
 2812 000a 0FB6      		in __tmp_reg__,__SREG__
 2813 000c F894      		cli
 2814 000e DEBF      		out __SP_H__,r29
 2815 0010 0FBE      		out __SREG__,__tmp_reg__
 2816 0012 CDBF      		out __SP_L__,r28
 2817               	/* prologue: function */
 2818               	/* frame size = 9 */
 2819               	/* stack size = 11 */
 2820               	.L__stack_usage = 11
 661:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2821               		.loc 1 661 5 view .LVU633
 662:drivers/oled/ssd1306_sh1106.c ****         return oled_scrolling;
 2822               		.loc 1 662 16 is_stmt 0 view .LVU634
 2823 0014 8091 0000 		lds r24,oled_scrolling
 661:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2824               		.loc 1 661 8 view .LVU635
 2825 0018 9091 0000 		lds r25,oled_initialized
 2826 001c 9923      		tst r25
 2827 001e 01F0      		breq .L142
 663:drivers/oled/ssd1306_sh1106.c ****     }
 664:drivers/oled/ssd1306_sh1106.c **** 
 665:drivers/oled/ssd1306_sh1106.c ****     // Dont enable scrolling if we need to update the display
 666:drivers/oled/ssd1306_sh1106.c ****     // This prevents scrolling of bad data from starting the scroll too early after init
 667:drivers/oled/ssd1306_sh1106.c ****     if (!oled_dirty && !oled_scrolling) {
 2828               		.loc 1 667 5 is_stmt 1 view .LVU636
 2829               		.loc 1 667 8 is_stmt 0 view .LVU637
 2830 0020 2091 0000 		lds r18,oled_dirty
 2831 0024 3091 0000 		lds r19,oled_dirty+1
 2832 0028 232B      		or r18,r19
 2833 002a 01F4      		brne .L144
 2834               		.loc 1 667 21 discriminator 1 view .LVU638
 2835 002c 8111      		cpse r24,__zero_reg__
 2836 002e 00C0      		rjmp .L144
 2837               	.LBB85:
 668:drivers/oled/ssd1306_sh1106.c ****         uint8_t display_scroll_left[] = {I2C_CMD, SCROLL_LEFT, 0x00, oled_scroll_start, oled_scroll
 2838               		.loc 1 668 9 is_stmt 1 view .LVU639
 2839               		.loc 1 668 17 is_stmt 0 view .LVU640
 2840 0030 1982      		std Y+1,__zero_reg__
 2841 0032 87E2      		ldi r24,lo8(39)
 2842 0034 8A83      		std Y+2,r24
 2843 0036 1B82      		std Y+3,__zero_reg__
 2844 0038 8091 0000 		lds r24,oled_scroll_start
 2845 003c 8C83      		std Y+4,r24
 2846 003e 8091 0000 		lds r24,oled_scroll_speed
 2847 0042 8D83      		std Y+5,r24
 2848 0044 8091 0000 		lds r24,oled_scroll_end
 2849 0048 8E83      		std Y+6,r24
 2850 004a 1F82      		std Y+7,__zero_reg__
 2851 004c 8FEF      		ldi r24,lo8(-1)
 2852 004e 8887      		std Y+8,r24
 2853 0050 8FE2      		ldi r24,lo8(47)
 2854 0052 8987      		std Y+9,r24
 669:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT(display_scroll_left) != I2C_STATUS_SUCCESS) {
 2855               		.loc 1 669 9 is_stmt 1 view .LVU641
 2856               		.loc 1 669 13 is_stmt 0 view .LVU642
 2857 0054 24E6      		ldi r18,lo8(100)
 2858 0056 30E0      		ldi r19,0
 2859 0058 49E0      		ldi r20,lo8(9)
 2860 005a 50E0      		ldi r21,0
 2861 005c BE01      		movw r22,r28
 2862 005e 6F5F      		subi r22,-1
 2863 0060 7F4F      		sbci r23,-1
 2864 0062 88E7      		ldi r24,lo8(120)
 2865 0064 0E94 0000 		call i2c_transmit
 2866               	.LVL194:
 2867               		.loc 1 669 12 view .LVU643
 2868 0068 892B      		or r24,r25
 2869 006a 01F0      		breq .L145
 670:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_left cmd failed\n");
 2870               		.loc 1 670 13 is_stmt 1 view .LVU644
 2871               	.LBB86:
 2872               		.loc 1 670 13 view .LVU645
 2873               		.loc 1 670 13 view .LVU646
 2874               	.LBE86:
 2875 006c 80E0      		ldi r24,lo8(__c.6)
 2876 006e 90E0      		ldi r25,hi8(__c.6)
 2877 0070 0E94 0000 		call xputs
 2878               	.LVL195:
 671:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2879               		.loc 1 671 13 view .LVU647
 2880               	.L144:
 2881               	.LBE85:
 672:drivers/oled/ssd1306_sh1106.c ****         }
 673:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = true;
 674:drivers/oled/ssd1306_sh1106.c ****     }
 675:drivers/oled/ssd1306_sh1106.c ****     return oled_scrolling;
 2882               		.loc 1 675 5 view .LVU648
 2883               		.loc 1 675 12 is_stmt 0 view .LVU649
 2884 0074 8091 0000 		lds r24,oled_scrolling
 2885               	.L142:
 2886               	/* epilogue start */
 676:drivers/oled/ssd1306_sh1106.c **** }
 2887               		.loc 1 676 1 view .LVU650
 2888 0078 2996      		adiw r28,9
 2889 007a 0FB6      		in __tmp_reg__,__SREG__
 2890 007c F894      		cli
 2891 007e DEBF      		out __SP_H__,r29
 2892 0080 0FBE      		out __SREG__,__tmp_reg__
 2893 0082 CDBF      		out __SP_L__,r28
 2894 0084 DF91      		pop r29
 2895 0086 CF91      		pop r28
 2896 0088 0895      		ret
 2897               	.L145:
 2898               	.LBB87:
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2899               		.loc 1 673 9 is_stmt 1 view .LVU651
 673:drivers/oled/ssd1306_sh1106.c ****     }
 2900               		.loc 1 673 24 is_stmt 0 view .LVU652
 2901 008a 81E0      		ldi r24,lo8(1)
 2902 008c 8093 0000 		sts oled_scrolling,r24
 2903 0090 00C0      		rjmp .L144
 2904               	.LBE87:
 2905               		.cfi_endproc
 2906               	.LFE38:
 2908               		.section	.text.oled_scroll_off,"ax",@progbits
 2909               	.global	oled_scroll_off
 2911               	oled_scroll_off:
 2912               	.LFB39:
 677:drivers/oled/ssd1306_sh1106.c **** 
 678:drivers/oled/ssd1306_sh1106.c **** bool oled_scroll_off(void) {
 2913               		.loc 1 678 28 is_stmt 1 view -0
 2914               		.cfi_startproc
 2915               	/* prologue: function */
 2916               	/* frame size = 0 */
 2917               	/* stack size = 0 */
 2918               	.L__stack_usage = 0
 679:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2919               		.loc 1 679 5 view .LVU654
 680:drivers/oled/ssd1306_sh1106.c ****         return !oled_scrolling;
 2920               		.loc 1 680 9 is_stmt 0 view .LVU655
 2921 0000 8091 0000 		lds r24,oled_scrolling
 679:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 2922               		.loc 1 679 8 view .LVU656
 2923 0004 9091 0000 		lds r25,oled_initialized
 2924 0008 9111      		cpse r25,__zero_reg__
 2925 000a 00C0      		rjmp .L150
 2926               	.L157:
 681:drivers/oled/ssd1306_sh1106.c ****     }
 682:drivers/oled/ssd1306_sh1106.c **** 
 683:drivers/oled/ssd1306_sh1106.c ****     if (oled_scrolling) {
 684:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 685:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 686:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 687:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 688:drivers/oled/ssd1306_sh1106.c ****         }
 689:drivers/oled/ssd1306_sh1106.c ****         oled_scrolling = false;
 690:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 691:drivers/oled/ssd1306_sh1106.c ****     }
 692:drivers/oled/ssd1306_sh1106.c ****     return !oled_scrolling;
 2927               		.loc 1 692 5 view .LVU657
 2928 000c 91E0      		ldi r25,lo8(1)
 2929 000e 8927      		eor r24,r25
 2930               	/* epilogue start */
 693:drivers/oled/ssd1306_sh1106.c **** }
 2931               		.loc 1 693 1 view .LVU658
 2932 0010 0895      		ret
 2933               	.L150:
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2934               		.loc 1 683 5 is_stmt 1 view .LVU659
 683:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_scroll_off[] = {I2C_CMD, DEACTIVATE_SCROLL};
 2935               		.loc 1 683 8 is_stmt 0 view .LVU660
 2936 0012 8823      		tst r24
 2937 0014 01F0      		breq .L152
 2938               	.LBB88:
 684:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_scroll_off) != I2C_STATUS_SUCCESS) {
 2939               		.loc 1 684 9 is_stmt 1 view .LVU661
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2940               		.loc 1 685 9 view .LVU662
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2941               		.loc 1 685 13 is_stmt 0 view .LVU663
 2942 0016 62E0      		ldi r22,lo8(2)
 2943 0018 70E0      		ldi r23,0
 2944 001a 80E0      		ldi r24,lo8(display_scroll_off.5)
 2945 001c 90E0      		ldi r25,hi8(display_scroll_off.5)
 2946 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 2947               	.LVL196:
 685:drivers/oled/ssd1306_sh1106.c ****             print("oled_scroll_off cmd failed\n");
 2948               		.loc 1 685 12 view .LVU664
 2949 0022 892B      		or r24,r25
 2950 0024 01F0      		breq .L153
 686:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2951               		.loc 1 686 13 is_stmt 1 view .LVU665
 2952               	.LBB89:
 686:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2953               		.loc 1 686 13 view .LVU666
 686:drivers/oled/ssd1306_sh1106.c ****             return oled_scrolling;
 2954               		.loc 1 686 13 view .LVU667
 2955               	.LBE89:
 2956 0026 80E0      		ldi r24,lo8(__c.4)
 2957 0028 90E0      		ldi r25,hi8(__c.4)
 2958 002a 0E94 0000 		call xputs
 2959               	.LVL197:
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2960               		.loc 1 687 13 view .LVU668
 687:drivers/oled/ssd1306_sh1106.c ****         }
 2961               		.loc 1 687 20 is_stmt 0 view .LVU669
 2962 002e 8091 0000 		lds r24,oled_scrolling
 2963 0032 0895      		ret
 2964               	.L153:
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2965               		.loc 1 689 9 is_stmt 1 view .LVU670
 689:drivers/oled/ssd1306_sh1106.c ****         oled_dirty     = OLED_ALL_BLOCKS_MASK;
 2966               		.loc 1 689 24 is_stmt 0 view .LVU671
 2967 0034 1092 0000 		sts oled_scrolling,__zero_reg__
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2968               		.loc 1 690 9 is_stmt 1 view .LVU672
 690:drivers/oled/ssd1306_sh1106.c ****     }
 2969               		.loc 1 690 24 is_stmt 0 view .LVU673
 2970 0038 8FEF      		ldi r24,lo8(-1)
 2971 003a 9FEF      		ldi r25,lo8(-1)
 2972 003c 9093 0000 		sts oled_dirty+1,r25
 2973 0040 8093 0000 		sts oled_dirty,r24
 2974               	.L152:
 2975               	.LBE88:
 692:drivers/oled/ssd1306_sh1106.c **** }
 2976               		.loc 1 692 5 is_stmt 1 view .LVU674
 2977 0044 8091 0000 		lds r24,oled_scrolling
 2978 0048 00C0      		rjmp .L157
 2979               		.cfi_endproc
 2980               	.LFE39:
 2982               		.section	.text.is_oled_scrolling,"ax",@progbits
 2983               	.global	is_oled_scrolling
 2985               	is_oled_scrolling:
 2986               	.LFB40:
 694:drivers/oled/ssd1306_sh1106.c **** 
 695:drivers/oled/ssd1306_sh1106.c **** bool is_oled_scrolling(void) { return oled_scrolling; }
 2987               		.loc 1 695 30 view -0
 2988               		.cfi_startproc
 2989               	/* prologue: function */
 2990               	/* frame size = 0 */
 2991               	/* stack size = 0 */
 2992               	.L__stack_usage = 0
 2993               		.loc 1 695 32 view .LVU676
 2994               		.loc 1 695 55 is_stmt 0 view .LVU677
 2995 0000 8091 0000 		lds r24,oled_scrolling
 2996               	/* epilogue start */
 2997 0004 0895      		ret
 2998               		.cfi_endproc
 2999               	.LFE40:
 3001               		.section	.text.oled_invert,"ax",@progbits
 3002               	.global	oled_invert
 3004               	oled_invert:
 3005               	.LVL198:
 3006               	.LFB41:
 696:drivers/oled/ssd1306_sh1106.c **** 
 697:drivers/oled/ssd1306_sh1106.c **** bool oled_invert(bool invert) {
 3007               		.loc 1 697 31 is_stmt 1 view -0
 3008               		.cfi_startproc
 3009               	/* prologue: function */
 3010               	/* frame size = 0 */
 3011               	/* stack size = 0 */
 3012               	.L__stack_usage = 0
 3013               		.loc 1 697 31 is_stmt 0 view .LVU679
 3014 0000 982F      		mov r25,r24
 698:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 3015               		.loc 1 698 5 is_stmt 1 view .LVU680
 699:drivers/oled/ssd1306_sh1106.c ****         return oled_inverted;
 3016               		.loc 1 699 16 is_stmt 0 view .LVU681
 3017 0002 8091 0000 		lds r24,oled_inverted
 3018               	.LVL199:
 698:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 3019               		.loc 1 698 8 view .LVU682
 3020 0006 2091 0000 		lds r18,oled_initialized
 3021 000a 2223      		tst r18
 3022 000c 01F0      		breq .L159
 700:drivers/oled/ssd1306_sh1106.c ****     }
 701:drivers/oled/ssd1306_sh1106.c **** 
 702:drivers/oled/ssd1306_sh1106.c ****     if (invert && !oled_inverted) {
 3023               		.loc 1 702 5 is_stmt 1 view .LVU683
 3024               		.loc 1 702 8 is_stmt 0 view .LVU684
 3025 000e 9923      		tst r25
 3026 0010 01F0      		breq .L161
 3027               		.loc 1 702 16 discriminator 1 view .LVU685
 3028 0012 8111      		cpse r24,__zero_reg__
 3029 0014 00C0      		rjmp .L162
 3030               	.LBB90:
 703:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_inverted[] = {I2C_CMD, INVERT_DISPLAY};
 3031               		.loc 1 703 9 is_stmt 1 view .LVU686
 704:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_inverted) != I2C_STATUS_SUCCESS) {
 3032               		.loc 1 704 9 view .LVU687
 3033               		.loc 1 704 13 is_stmt 0 view .LVU688
 3034 0016 62E0      		ldi r22,lo8(2)
 3035 0018 70E0      		ldi r23,0
 3036 001a 80E0      		ldi r24,lo8(display_inverted.3)
 3037 001c 90E0      		ldi r25,hi8(display_inverted.3)
 3038 001e 0E94 0000 		call i2c_transmit_P.constprop.0
 3039               	.LVL200:
 3040               		.loc 1 704 12 view .LVU689
 3041 0022 892B      		or r24,r25
 3042 0024 01F0      		breq .L163
 705:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 3043               		.loc 1 705 13 is_stmt 1 view .LVU690
 3044               	.LBB91:
 3045               		.loc 1 705 13 view .LVU691
 3046               		.loc 1 705 13 view .LVU692
 3047               	.LBE91:
 3048 0026 80E0      		ldi r24,lo8(__c.2)
 3049 0028 90E0      		ldi r25,hi8(__c.2)
 3050               	.L171:
 3051               	.LBE90:
 3052               	.LBB92:
 706:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 707:drivers/oled/ssd1306_sh1106.c ****         }
 708:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = true;
 709:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 710:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 711:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 712:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 3053               		.loc 1 712 13 is_stmt 0 view .LVU693
 3054 002a 0E94 0000 		call xputs
 3055               	.LVL201:
 713:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 3056               		.loc 1 713 13 is_stmt 1 view .LVU694
 3057 002e 00C0      		rjmp .L162
 3058               	.L163:
 3059               	.LBE92:
 3060               	.LBB94:
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 3061               		.loc 1 708 9 view .LVU695
 708:drivers/oled/ssd1306_sh1106.c ****     } else if (!invert && oled_inverted) {
 3062               		.loc 1 708 23 is_stmt 0 view .LVU696
 3063 0030 81E0      		ldi r24,lo8(1)
 3064 0032 8093 0000 		sts oled_inverted,r24
 3065               	.L162:
 3066               	.LBE94:
 714:drivers/oled/ssd1306_sh1106.c ****         }
 715:drivers/oled/ssd1306_sh1106.c ****         oled_inverted = false;
 716:drivers/oled/ssd1306_sh1106.c ****     }
 717:drivers/oled/ssd1306_sh1106.c **** 
 718:drivers/oled/ssd1306_sh1106.c ****     return oled_inverted;
 3067               		.loc 1 718 5 is_stmt 1 view .LVU697
 3068               		.loc 1 718 12 is_stmt 0 view .LVU698
 3069 0036 8091 0000 		lds r24,oled_inverted
 3070               	.L159:
 3071               	/* epilogue start */
 719:drivers/oled/ssd1306_sh1106.c **** }
 3072               		.loc 1 719 1 view .LVU699
 3073 003a 0895      		ret
 3074               	.LVL202:
 3075               	.L161:
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 3076               		.loc 1 709 12 is_stmt 1 discriminator 1 view .LVU700
 709:drivers/oled/ssd1306_sh1106.c ****         static const uint8_t PROGMEM display_normal[] = {I2C_CMD, NORMAL_DISPLAY};
 3077               		.loc 1 709 24 is_stmt 0 discriminator 1 view .LVU701
 3078 003c 8823      		tst r24
 3079 003e 01F0      		breq .L162
 3080               	.LBB95:
 710:drivers/oled/ssd1306_sh1106.c ****         if (I2C_TRANSMIT_P(display_normal) != I2C_STATUS_SUCCESS) {
 3081               		.loc 1 710 9 is_stmt 1 view .LVU702
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 3082               		.loc 1 711 9 view .LVU703
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 3083               		.loc 1 711 13 is_stmt 0 view .LVU704
 3084 0040 62E0      		ldi r22,lo8(2)
 3085 0042 70E0      		ldi r23,0
 3086 0044 80E0      		ldi r24,lo8(display_normal.1)
 3087 0046 90E0      		ldi r25,hi8(display_normal.1)
 3088 0048 0E94 0000 		call i2c_transmit_P.constprop.0
 3089               	.LVL203:
 711:drivers/oled/ssd1306_sh1106.c ****             print("oled_invert cmd failed\n");
 3090               		.loc 1 711 12 view .LVU705
 3091 004c 892B      		or r24,r25
 3092 004e 01F0      		breq .L164
 712:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 3093               		.loc 1 712 13 is_stmt 1 view .LVU706
 3094               	.LBB93:
 712:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 3095               		.loc 1 712 13 view .LVU707
 712:drivers/oled/ssd1306_sh1106.c ****             return oled_inverted;
 3096               		.loc 1 712 13 view .LVU708
 3097               	.LBE93:
 3098 0050 80E0      		ldi r24,lo8(__c.0)
 3099 0052 90E0      		ldi r25,hi8(__c.0)
 3100 0054 00C0      		rjmp .L171
 3101               	.L164:
 715:drivers/oled/ssd1306_sh1106.c ****     }
 3102               		.loc 1 715 9 view .LVU709
 715:drivers/oled/ssd1306_sh1106.c ****     }
 3103               		.loc 1 715 23 is_stmt 0 view .LVU710
 3104 0056 1092 0000 		sts oled_inverted,__zero_reg__
 3105 005a 00C0      		rjmp .L162
 3106               	.LBE95:
 3107               		.cfi_endproc
 3108               	.LFE41:
 3110               		.section	.text.oled_max_chars,"ax",@progbits
 3111               	.global	oled_max_chars
 3113               	oled_max_chars:
 3114               	.LFB42:
 720:drivers/oled/ssd1306_sh1106.c **** 
 721:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_chars(void) {
 3115               		.loc 1 721 30 is_stmt 1 view -0
 3116               		.cfi_startproc
 3117               	/* prologue: function */
 3118               	/* frame size = 0 */
 3119               	/* stack size = 0 */
 3120               	.L__stack_usage = 0
 722:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 3121               		.loc 1 722 5 view .LVU712
 3122               		.loc 1 722 8 is_stmt 0 view .LVU713
 3123 0000 8091 0000 		lds r24,oled_rotation
 3124 0004 80FD      		sbrc r24,0
 3125 0006 00C0      		rjmp .L174
 723:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_WIDTH / OLED_FONT_WIDTH;
 3126               		.loc 1 723 16 view .LVU714
 3127 0008 85E1      		ldi r24,lo8(21)
 3128 000a 0895      		ret
 3129               	.L174:
 724:drivers/oled/ssd1306_sh1106.c ****     }
 725:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_HEIGHT / OLED_FONT_WIDTH;
 3130               		.loc 1 725 12 view .LVU715
 3131 000c 85E0      		ldi r24,lo8(5)
 3132               	/* epilogue start */
 726:drivers/oled/ssd1306_sh1106.c **** }
 3133               		.loc 1 726 1 view .LVU716
 3134 000e 0895      		ret
 3135               		.cfi_endproc
 3136               	.LFE42:
 3138               		.section	.text.oled_max_lines,"ax",@progbits
 3139               	.global	oled_max_lines
 3141               	oled_max_lines:
 3142               	.LFB43:
 727:drivers/oled/ssd1306_sh1106.c **** 
 728:drivers/oled/ssd1306_sh1106.c **** uint8_t oled_max_lines(void) {
 3143               		.loc 1 728 30 is_stmt 1 view -0
 3144               		.cfi_startproc
 3145               	/* prologue: function */
 3146               	/* frame size = 0 */
 3147               	/* stack size = 0 */
 3148               	.L__stack_usage = 0
 729:drivers/oled/ssd1306_sh1106.c ****     if (!HAS_FLAGS(oled_rotation, OLED_ROTATION_90)) {
 3149               		.loc 1 729 5 view .LVU718
 3150               		.loc 1 729 8 is_stmt 0 view .LVU719
 3151 0000 8091 0000 		lds r24,oled_rotation
 3152 0004 80FD      		sbrc r24,0
 3153 0006 00C0      		rjmp .L177
 730:drivers/oled/ssd1306_sh1106.c ****         return OLED_DISPLAY_HEIGHT / OLED_FONT_HEIGHT;
 3154               		.loc 1 730 16 view .LVU720
 3155 0008 84E0      		ldi r24,lo8(4)
 3156 000a 0895      		ret
 3157               	.L177:
 731:drivers/oled/ssd1306_sh1106.c ****     }
 732:drivers/oled/ssd1306_sh1106.c ****     return OLED_DISPLAY_WIDTH / OLED_FONT_HEIGHT;
 3158               		.loc 1 732 12 view .LVU721
 3159 000c 80E1      		ldi r24,lo8(16)
 3160               	/* epilogue start */
 733:drivers/oled/ssd1306_sh1106.c **** }
 3161               		.loc 1 733 1 view .LVU722
 3162 000e 0895      		ret
 3163               		.cfi_endproc
 3164               	.LFE43:
 3166               		.section	.text.oled_task_user,"ax",@progbits
 3167               		.weak	oled_task_user
 3169               	oled_task_user:
 3170               	.LFB45:
 734:drivers/oled/ssd1306_sh1106.c **** 
 735:drivers/oled/ssd1306_sh1106.c **** void oled_task(void) {
 736:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 737:drivers/oled/ssd1306_sh1106.c ****         return;
 738:drivers/oled/ssd1306_sh1106.c ****     }
 739:drivers/oled/ssd1306_sh1106.c **** 
 740:drivers/oled/ssd1306_sh1106.c **** #if OLED_UPDATE_INTERVAL > 0
 741:drivers/oled/ssd1306_sh1106.c ****     if (timer_elapsed(oled_update_timeout) >= OLED_UPDATE_INTERVAL) {
 742:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 743:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 744:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 745:drivers/oled/ssd1306_sh1106.c ****     }
 746:drivers/oled/ssd1306_sh1106.c **** #else
 747:drivers/oled/ssd1306_sh1106.c ****     oled_set_cursor(0, 0);
 748:drivers/oled/ssd1306_sh1106.c ****     oled_task_user();
 749:drivers/oled/ssd1306_sh1106.c **** #endif
 750:drivers/oled/ssd1306_sh1106.c **** 
 751:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 752:drivers/oled/ssd1306_sh1106.c ****     if (oled_dirty && oled_scrolling) {
 753:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_timeout = timer_read32() + OLED_SCROLL_TIMEOUT;
 754:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_off();
 755:drivers/oled/ssd1306_sh1106.c ****     }
 756:drivers/oled/ssd1306_sh1106.c **** #endif
 757:drivers/oled/ssd1306_sh1106.c **** 
 758:drivers/oled/ssd1306_sh1106.c ****     // Smart render system, no need to check for dirty
 759:drivers/oled/ssd1306_sh1106.c ****     oled_render();
 760:drivers/oled/ssd1306_sh1106.c **** 
 761:drivers/oled/ssd1306_sh1106.c ****     // Display timeout check
 762:drivers/oled/ssd1306_sh1106.c **** #if OLED_TIMEOUT > 0
 763:drivers/oled/ssd1306_sh1106.c ****     if (oled_active && timer_expired32(timer_read32(), oled_timeout)) {
 764:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 765:drivers/oled/ssd1306_sh1106.c ****     }
 766:drivers/oled/ssd1306_sh1106.c **** #endif
 767:drivers/oled/ssd1306_sh1106.c **** 
 768:drivers/oled/ssd1306_sh1106.c **** #if OLED_SCROLL_TIMEOUT > 0
 769:drivers/oled/ssd1306_sh1106.c ****     if (!oled_scrolling && timer_expired32(timer_read32(), oled_scroll_timeout)) {
 770:drivers/oled/ssd1306_sh1106.c **** #    ifdef OLED_SCROLL_TIMEOUT_RIGHT
 771:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_right();
 772:drivers/oled/ssd1306_sh1106.c **** #    else
 773:drivers/oled/ssd1306_sh1106.c ****         oled_scroll_left();
 774:drivers/oled/ssd1306_sh1106.c **** #    endif
 775:drivers/oled/ssd1306_sh1106.c ****     }
 776:drivers/oled/ssd1306_sh1106.c **** #endif
 777:drivers/oled/ssd1306_sh1106.c **** }
 778:drivers/oled/ssd1306_sh1106.c **** 
 779:drivers/oled/ssd1306_sh1106.c **** __attribute__((weak)) void oled_task_user(void) {}
 3171               		.loc 1 779 49 is_stmt 1 view -0
 3172               		.cfi_startproc
 3173               	/* prologue: function */
 3174               	/* frame size = 0 */
 3175               	/* stack size = 0 */
 3176               	.L__stack_usage = 0
 3177               		.loc 1 779 50 view .LVU724
 3178               	/* epilogue start */
 3179 0000 0895      		ret
 3180               		.cfi_endproc
 3181               	.LFE45:
 3183               		.section	.text.oled_task,"ax",@progbits
 3184               	.global	oled_task
 3186               	oled_task:
 3187               	.LFB44:
 735:drivers/oled/ssd1306_sh1106.c ****     if (!oled_initialized) {
 3188               		.loc 1 735 22 view -0
 3189               		.cfi_startproc
 3190 0000 CF93      		push r28
 3191               	.LCFI69:
 3192               		.cfi_def_cfa_offset 3
 3193               		.cfi_offset 28, -2
 3194 0002 DF93      		push r29
 3195               	.LCFI70:
 3196               		.cfi_def_cfa_offset 4
 3197               		.cfi_offset 29, -3
 3198 0004 00D0      		rcall .
 3199 0006 00D0      		rcall .
 3200               	.LCFI71:
 3201               		.cfi_def_cfa_offset 8
 3202 0008 CDB7      		in r28,__SP_L__
 3203 000a DEB7      		in r29,__SP_H__
 3204               	.LCFI72:
 3205               		.cfi_def_cfa_register 28
 3206               	/* prologue: function */
 3207               	/* frame size = 4 */
 3208               	/* stack size = 6 */
 3209               	.L__stack_usage = 6
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 3210               		.loc 1 736 5 view .LVU726
 736:drivers/oled/ssd1306_sh1106.c ****         return;
 3211               		.loc 1 736 8 is_stmt 0 view .LVU727
 3212 000c 8091 0000 		lds r24,oled_initialized
 3213 0010 8823      		tst r24
 3214 0012 01F4      		brne .+2
 3215 0014 00C0      		rjmp .L179
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3216               		.loc 1 741 5 is_stmt 1 view .LVU728
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3217               		.loc 1 741 9 is_stmt 0 view .LVU729
 3218 0016 8091 0000 		lds r24,oled_update_timeout
 3219 001a 9091 0000 		lds r25,oled_update_timeout+1
 3220 001e 0E94 0000 		call timer_elapsed
 3221               	.LVL204:
 741:drivers/oled/ssd1306_sh1106.c ****         oled_update_timeout = timer_read();
 3222               		.loc 1 741 8 view .LVU730
 3223 0022 C297      		sbiw r24,50
 3224 0024 00F0      		brlo .L182
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3225               		.loc 1 742 9 is_stmt 1 view .LVU731
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3226               		.loc 1 742 31 is_stmt 0 view .LVU732
 3227 0026 0E94 0000 		call timer_read
 3228               	.LVL205:
 742:drivers/oled/ssd1306_sh1106.c ****         oled_set_cursor(0, 0);
 3229               		.loc 1 742 29 view .LVU733
 3230 002a 9093 0000 		sts oled_update_timeout+1,r25
 3231 002e 8093 0000 		sts oled_update_timeout,r24
 743:drivers/oled/ssd1306_sh1106.c ****         oled_task_user();
 3232               		.loc 1 743 9 is_stmt 1 view .LVU734
 3233 0032 60E0      		ldi r22,0
 3234 0034 80E0      		ldi r24,0
 3235 0036 0E94 0000 		call oled_set_cursor
 3236               	.LVL206:
 744:drivers/oled/ssd1306_sh1106.c ****     }
 3237               		.loc 1 744 9 view .LVU735
 3238 003a 0E94 0000 		call oled_task_user
 3239               	.LVL207:
 3240               	.L182:
 759:drivers/oled/ssd1306_sh1106.c **** 
 3241               		.loc 1 759 5 view .LVU736
 3242 003e 0E94 0000 		call oled_render
 3243               	.LVL208:
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3244               		.loc 1 763 5 view .LVU737
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3245               		.loc 1 763 8 is_stmt 0 view .LVU738
 3246 0042 8091 0000 		lds r24,oled_active
 3247 0046 8823      		tst r24
 3248 0048 01F0      		breq .L179
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3249               		.loc 1 763 24 discriminator 1 view .LVU739
 3250 004a 0E94 0000 		call timer_read32
 3251               	.LVL209:
 3252 004e 6983      		std Y+1,r22
 3253 0050 7A83      		std Y+2,r23
 3254 0052 8B83      		std Y+3,r24
 3255 0054 9C83      		std Y+4,r25
 3256 0056 8091 0000 		lds r24,oled_timeout
 3257 005a 9091 0000 		lds r25,oled_timeout+1
 3258 005e A091 0000 		lds r26,oled_timeout+2
 3259 0062 B091 0000 		lds r27,oled_timeout+3
 3260 0066 2981      		ldd r18,Y+1
 3261 0068 3A81      		ldd r19,Y+2
 3262 006a 4B81      		ldd r20,Y+3
 3263 006c 5C81      		ldd r21,Y+4
 3264 006e 281B      		sub r18,r24
 3265 0070 390B      		sbc r19,r25
 3266 0072 4A0B      		sbc r20,r26
 3267 0074 5B0B      		sbc r21,r27
 3268 0076 DA01      		movw r26,r20
 3269 0078 C901      		movw r24,r18
 763:drivers/oled/ssd1306_sh1106.c ****         oled_off();
 3270               		.loc 1 763 21 discriminator 1 view .LVU740
 3271 007a 8F3F      		cpi r24,-1
 3272 007c 9F4F      		sbci r25,-1
 3273 007e AF4F      		sbci r26,-1
 3274 0080 BF47      		sbci r27,127
 3275 0082 00F4      		brsh .L179
 764:drivers/oled/ssd1306_sh1106.c ****     }
 3276               		.loc 1 764 9 is_stmt 1 view .LVU741
 3277               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 3278               		.loc 1 777 1 is_stmt 0 view .LVU742
 3279 0084 0F90      		pop __tmp_reg__
 3280 0086 0F90      		pop __tmp_reg__
 3281 0088 0F90      		pop __tmp_reg__
 3282 008a 0F90      		pop __tmp_reg__
 3283 008c DF91      		pop r29
 3284 008e CF91      		pop r28
 764:drivers/oled/ssd1306_sh1106.c ****     }
 3285               		.loc 1 764 9 view .LVU743
 3286 0090 0C94 0000 		jmp oled_off
 3287               	.LVL210:
 3288               	.L179:
 3289               	/* epilogue start */
 777:drivers/oled/ssd1306_sh1106.c **** 
 3290               		.loc 1 777 1 view .LVU744
 3291 0094 0F90      		pop __tmp_reg__
 3292 0096 0F90      		pop __tmp_reg__
 3293 0098 0F90      		pop __tmp_reg__
 3294 009a 0F90      		pop __tmp_reg__
 3295 009c DF91      		pop r29
 3296 009e CF91      		pop r28
 3297 00a0 0895      		ret
 3298               		.cfi_endproc
 3299               	.LFE44:
 3301               		.section	.progmem.data.__c.0,"a"
 3304               	__c.0:
 3305 0000 6F6C 6564 		.string	"oled_invert cmd failed\n"
 3305      5F69 6E76 
 3305      6572 7420 
 3305      636D 6420 
 3305      6661 696C 
 3306               		.section	.progmem.data.display_normal.1,"a"
 3309               	display_normal.1:
 3310 0000 00        		.string	""
 3311 0001 A6        		.ascii	"\246"
 3312               		.section	.progmem.data.__c.2,"a"
 3315               	__c.2:
 3316 0000 6F6C 6564 		.string	"oled_invert cmd failed\n"
 3316      5F69 6E76 
 3316      6572 7420 
 3316      636D 6420 
 3316      6661 696C 
 3317               		.section	.progmem.data.display_inverted.3,"a"
 3320               	display_inverted.3:
 3321 0000 00        		.string	""
 3322 0001 A7        		.ascii	"\247"
 3323               		.section	.progmem.data.__c.4,"a"
 3326               	__c.4:
 3327 0000 6F6C 6564 		.string	"oled_scroll_off cmd failed\n"
 3327      5F73 6372 
 3327      6F6C 6C5F 
 3327      6F66 6620 
 3327      636D 6420 
 3328               		.section	.progmem.data.display_scroll_off.5,"a"
 3331               	display_scroll_off.5:
 3332 0000 00        		.string	""
 3333 0001 2E        		.ascii	"."
 3334               		.section	.progmem.data.__c.6,"a"
 3337               	__c.6:
 3338 0000 6F6C 6564 		.string	"oled_scroll_left cmd failed\n"
 3338      5F73 6372 
 3338      6F6C 6C5F 
 3338      6C65 6674 
 3338      2063 6D64 
 3339               		.section	.progmem.data.__c.7,"a"
 3342               	__c.7:
 3343 0000 6F6C 6564 		.string	"oled_scroll_right cmd failed\n"
 3343      5F73 6372 
 3343      6F6C 6C5F 
 3343      7269 6768 
 3343      7420 636D 
 3344               		.section	.rodata.scroll_remap.8,"a"
 3347               	scroll_remap.8:
 3348 0000 0704 0500 		.string	"\007\004\005"
 3349 0004 0601 0203 		.ascii	"\006\001\002\003"
 3350               		.section	.progmem.data.__c.9,"a"
 3353               	__c.9:
 3354 0000 7365 745F 		.string	"set_brightness cmd failed\n"
 3354      6272 6967 
 3354      6874 6E65 
 3354      7373 2063 
 3354      6D64 2066 
 3355               		.section	.progmem.data.__c.10,"a"
 3358               	__c.10:
 3359 0000 6F6C 6564 		.string	"oled_off cmd failed\n"
 3359      5F6F 6666 
 3359      2063 6D64 
 3359      2066 6169 
 3359      6C65 640A 
 3360               		.section	.progmem.data.display_off.11,"a"
 3363               	display_off.11:
 3364 0000 00        		.string	""
 3365 0001 AE        		.ascii	"\256"
 3366               		.section	.progmem.data.__c.12,"a"
 3369               	__c.12:
 3370 0000 6F6C 6564 		.string	"oled_on cmd failed\n"
 3370      5F6F 6E20 
 3370      636D 6420 
 3370      6661 696C 
 3370      6564 0A00 
 3371               		.section	.progmem.data.display_on.13,"a"
 3374               	display_on.13:
 3375 0000 00        		.string	""
 3376 0001 AF        		.ascii	"\257"
 3377               		.section	.bss.oled_temp_buffer.14,"aw",@nobits
 3380               	oled_temp_buffer.14:
 3381 0000 0000 0000 		.zero	6
 3381      0000 
 3382               		.section	.progmem.data.__c.15,"a"
 3385               	__c.15:
 3386 0000 6F6C 6564 		.string	"oled_render90 data failed\n"
 3386      5F72 656E 
 3386      6465 7239 
 3386      3020 6461 
 3386      7461 2066 
 3387               		.section	.rodata.source_map.16,"a"
 3390               	source_map.16:
 3391 0000 00        		.string	""
 3392 0001 0810 18   		.ascii	"\b\020\030"
 3393               		.section	.rodata.target_map.17,"a"
 3396               	target_map.17:
 3397 0000 1810 0800 		.string	"\030\020\b"
 3398               		.section	.bss.temp_buffer.18,"aw",@nobits
 3401               	temp_buffer.18:
 3402 0000 0000 0000 		.zero	32
 3402      0000 0000 
 3402      0000 0000 
 3402      0000 0000 
 3402      0000 0000 
 3403               		.section	.progmem.data.__c.19,"a"
 3406               	__c.19:
 3407 0000 6F6C 6564 		.string	"oled_render data failed\n"
 3407      5F72 656E 
 3407      6465 7220 
 3407      6461 7461 
 3407      2066 6169 
 3408               		.section	.progmem.data.__c.20,"a"
 3411               	__c.20:
 3412 0000 6F6C 6564 		.string	"oled_render offset command failed\n"
 3412      5F72 656E 
 3412      6465 7220 
 3412      6F66 6673 
 3412      6574 2063 
 3413               		.section	.data.display_start.21,"aw"
 3416               	display_start.21:
 3417 0000 00        		.string	""
 3418 0001 2100      		.string	"!"
 3419 0003 7F22 00   		.string	"\177\""
 3420 0006 03        		.ascii	"\003"
 3421               		.section	.progmem.data.__c.22,"a"
 3424               	__c.22:
 3425 0000 6469 7370 		.string	"display_setup2 failed\n"
 3425      6C61 795F 
 3425      7365 7475 
 3425      7032 2066 
 3425      6169 6C65 
 3426               		.section	.progmem.data.display_setup2.23,"a"
 3429               	display_setup2.23:
 3430 0000 00        		.string	""
 3431 0001 DA02 81FF 		.ascii	"\332\002\201\377\331\361\333 \244\246.\257"
 3431      D9F1 DB20 
 3431      A4A6 2EAF 
 3432               		.section	.progmem.data.__c.24,"a"
 3435               	__c.24:
 3436 0000 6469 7370 		.string	"display_flipped failed\n"
 3436      6C61 795F 
 3436      666C 6970 
 3436      7065 6420 
 3436      6661 696C 
 3437               		.section	.progmem.data.display_flipped.25,"a"
 3440               	display_flipped.25:
 3441 0000 00        		.string	""
 3442 0001 A0C0      		.ascii	"\240\300"
 3443               		.section	.progmem.data.__c.26,"a"
 3446               	__c.26:
 3447 0000 6F6C 6564 		.string	"oled_init cmd normal rotation failed\n"
 3447      5F69 6E69 
 3447      7420 636D 
 3447      6420 6E6F 
 3447      726D 616C 
 3448               		.section	.progmem.data.display_normal.27,"a"
 3451               	display_normal.27:
 3452 0000 00        		.string	""
 3453 0001 A1C8      		.ascii	"\241\310"
 3454               		.section	.progmem.data.__c.28,"a"
 3457               	__c.28:
 3458 0000 6F6C 6564 		.string	"oled_init cmd set 1 failed\n"
 3458      5F69 6E69 
 3458      7420 636D 
 3458      6420 7365 
 3458      7420 3120 
 3459               		.section	.progmem.data.display_setup1.29,"a"
 3462               	display_setup1.29:
 3463 0000 00        		.string	""
 3464 0001 AED5 80A8 		.string	"\256\325\200\250\037\323"
 3464      1FD3 00
 3465 0008 408D 1420 		.string	"@\215\024 "
 3465      00
 3466               		.comm	oled_update_timeout,2,1
 3467               		.comm	oled_timeout,4,1
 3468               	.global	oled_scroll_end
 3469               		.section	.data.oled_scroll_end,"aw"
 3472               	oled_scroll_end:
 3473 0000 07        		.byte	7
 3474               	.global	oled_scroll_start
 3475               		.section	.bss.oled_scroll_start,"aw",@nobits
 3478               	oled_scroll_start:
 3479 0000 00        		.zero	1
 3480               	.global	oled_scroll_speed
 3481               		.section	.bss.oled_scroll_speed,"aw",@nobits
 3484               	oled_scroll_speed:
 3485 0000 00        		.zero	1
 3486               	.global	oled_rotation_width
 3487               		.section	.bss.oled_rotation_width,"aw",@nobits
 3490               	oled_rotation_width:
 3491 0000 00        		.zero	1
 3492               	.global	oled_rotation
 3493               		.section	.bss.oled_rotation,"aw",@nobits
 3496               	oled_rotation:
 3497 0000 00        		.zero	1
 3498               	.global	oled_brightness
 3499               		.section	.data.oled_brightness,"aw"
 3502               	oled_brightness:
 3503 0000 FF        		.byte	-1
 3504               	.global	oled_inverted
 3505               		.section	.bss.oled_inverted,"aw",@nobits
 3508               	oled_inverted:
 3509 0000 00        		.zero	1
 3510               	.global	oled_scrolling
 3511               		.section	.bss.oled_scrolling,"aw",@nobits
 3514               	oled_scrolling:
 3515 0000 00        		.zero	1
 3516               	.global	oled_active
 3517               		.section	.bss.oled_active,"aw",@nobits
 3520               	oled_active:
 3521 0000 00        		.zero	1
 3522               	.global	oled_initialized
 3523               		.section	.bss.oled_initialized,"aw",@nobits
 3526               	oled_initialized:
 3527 0000 00        		.zero	1
 3528               	.global	oled_dirty
 3529               		.section	.bss.oled_dirty,"aw",@nobits
 3532               	oled_dirty:
 3533 0000 0000      		.zero	2
 3534               		.comm	oled_cursor,2,1
 3535               		.comm	oled_buffer,512,1
 3536               		.section	.progmem.data.font,"a"
 3539               	font:
 3540 0000 0708 7F08 		.string	"\007\b\177\b\007"
 3540      0700 
 3541 0006 3E5B 4F5B 		.string	">[O[>"
 3541      3E00 
 3542 000c 3E6B 4F6B 		.string	">kOk>"
 3542      3E00 
 3543 0012 1C3E 7C3E 		.string	"\034>|>\034"
 3543      1C00 
 3544 0018 183C 7E3C 		.string	"\030<~<\030"
 3544      1800 
 3545 001e 1C57 7D57 		.string	"\034W}W\034"
 3545      1C00 
 3546 0024 1C5E 7F5E 		.string	"\034^\177^\034"
 3546      1C00 
 3547 002a 00        		.string	""
 3548 002b 183C 1800 		.string	"\030<\030"
 3549 002f 00        		.string	""
 3550 0030 FFE7 C3E7 		.string	"\377\347\303\347\377"
 3550      FF00 
 3551 0036 00        		.string	""
 3552 0037 1824 1800 		.string	"\030$\030"
 3553 003b 00        		.string	""
 3554 003c FFE7 DBE7 		.string	"\377\347\333\347\377"
 3554      FF00 
 3555 0042 3048 3A06 		.string	"0H:\006\016"
 3555      0E00 
 3556 0048 2629 7929 		.string	"&)y)&"
 3556      2600 
 3557 004e 407F 0505 		.string	"@\177\005\005\007"
 3557      0700 
 3558 0054 407F 0525 		.string	"@\177\005%?"
 3558      3F00 
 3559 005a 5A3C E73C 		.string	"Z<\347<Z"
 3559      5A00 
 3560 0060 7F3E 1C1C 		.string	"\177>\034\034\b"
 3560      0800 
 3561 0066 081C 1C3E 		.string	"\b\034\034>\177"
 3561      7F00 
 3562 006c 1422 7F22 		.string	"\024\"\177\"\024"
 3562      1400 
 3563 0072 5F5F 00   		.string	"__"
 3564 0075 5F5F 00   		.string	"__"
 3565 0078 0609 7F01 		.string	"\006\t\177\001\177"
 3565      7F00 
 3566 007e 00        		.string	""
 3567 007f 6689 956A 		.string	"f\211\225j"
 3567      00
 3568 0084 6060 6060 		.string	"`````"
 3568      6000 
 3569 008a 94A2 FFA2 		.string	"\224\242\377\242\224"
 3569      9400 
 3570 0090 0804 7E04 		.string	"\b\004~\004\b"
 3570      0800 
 3571 0096 1020 7E20 		.string	"\020 ~ \020"
 3571      1000 
 3572 009c 0808 2A1C 		.string	"\b\b*\034\b"
 3572      0800 
 3573 00a2 081C 2A08 		.string	"\b\034*\b\b"
 3573      0800 
 3574 00a8 1E10 1010 		.string	"\036\020\020\020\020"
 3574      1000 
 3575 00ae 0C1E 0C1E 		.string	"\f\036\f\036\f"
 3575      0C00 
 3576 00b4 3038 3E38 		.string	"08>80"
 3576      3000 
 3577 00ba 060E 3E0E 		.string	"\006\016>\016\006"
 3577      0600 
 3578 00c0 00        		.string	""
 3579 00c1 00        		.string	""
 3580 00c2 00        		.string	""
 3581 00c3 00        		.string	""
 3582 00c4 00        		.string	""
 3583 00c5 00        		.string	""
 3584 00c6 00        		.string	""
 3585 00c7 00        		.string	""
 3586 00c8 5F00      		.string	"_"
 3587 00ca 00        		.string	""
 3588 00cb 00        		.string	""
 3589 00cc 00        		.string	""
 3590 00cd 0700      		.string	"\007"
 3591 00cf 0700      		.string	"\007"
 3592 00d1 00        		.string	""
 3593 00d2 147F 147F 		.string	"\024\177\024\177\024"
 3593      1400 
 3594 00d8 242A 7F2A 		.string	"$*\177*\022"
 3594      1200 
 3595 00de 2313 0864 		.string	"#\023\bdb"
 3595      6200 
 3596 00e4 3649 5620 		.string	"6IV P"
 3596      5000 
 3597 00ea 00        		.string	""
 3598 00eb 0807 0300 		.string	"\b\007\003"
 3599 00ef 00        		.string	""
 3600 00f0 00        		.string	""
 3601 00f1 1C22 4100 		.string	"\034\"A"
 3602 00f5 00        		.string	""
 3603 00f6 00        		.string	""
 3604 00f7 4122 1C00 		.string	"A\"\034"
 3605 00fb 00        		.string	""
 3606 00fc 2A1C 7F1C 		.string	"*\034\177\034*"
 3606      2A00 
 3607 0102 0808 3E08 		.string	"\b\b>\b\b"
 3607      0800 
 3608 0108 00        		.string	""
 3609 0109 8070 3000 		.string	"\200p0"
 3610 010d 00        		.string	""
 3611 010e 0808 0808 		.string	"\b\b\b\b\b"
 3611      0800 
 3612 0114 00        		.string	""
 3613 0115 00        		.string	""
 3614 0116 6060 00   		.string	"``"
 3615 0119 00        		.string	""
 3616 011a 2010 0804 		.string	" \020\b\004\002"
 3616      0200 
 3617 0120 3E51 4945 		.string	">QIE>"
 3617      3E00 
 3618 0126 00        		.string	""
 3619 0127 427F 4000 		.string	"B\177@"
 3620 012b 00        		.string	""
 3621 012c 7249 4949 		.string	"rIIIF"
 3621      4600 
 3622 0132 2141 494D 		.string	"!AIM3"
 3622      3300 
 3623 0138 1814 127F 		.string	"\030\024\022\177\020"
 3623      1000 
 3624 013e 2745 4545 		.string	"'EEE9"
 3624      3900 
 3625 0144 3C4A 4949 		.string	"<JII1"
 3625      3100 
 3626 014a 4121 1109 		.string	"A!\021\t\007"
 3626      0700 
 3627 0150 3649 4949 		.string	"6III6"
 3627      3600 
 3628 0156 4649 4929 		.string	"FII)\036"
 3628      1E00 
 3629 015c 00        		.string	""
 3630 015d 00        		.string	""
 3631 015e 1400      		.string	"\024"
 3632 0160 00        		.string	""
 3633 0161 00        		.string	""
 3634 0162 00        		.string	""
 3635 0163 4034 00   		.string	"@4"
 3636 0166 00        		.string	""
 3637 0167 00        		.string	""
 3638 0168 00        		.string	""
 3639 0169 0814 2241 		.string	"\b\024\"A"
 3639      00
 3640 016e 1414 1414 		.string	"\024\024\024\024\024"
 3640      1400 
 3641 0174 00        		.string	""
 3642 0175 4122 1408 		.string	"A\"\024\b"
 3642      00
 3643 017a 0201 5909 		.string	"\002\001Y\t\006"
 3643      0600 
 3644 0180 3E41 5D59 		.string	">A]YN"
 3644      4E00 
 3645 0186 7C12 1112 		.string	"|\022\021\022|"
 3645      7C00 
 3646 018c 7F49 4949 		.string	"\177III6"
 3646      3600 
 3647 0192 3E41 4141 		.string	">AAA\""
 3647      2200 
 3648 0198 7F41 4141 		.string	"\177AAA>"
 3648      3E00 
 3649 019e 7F49 4949 		.string	"\177IIIA"
 3649      4100 
 3650 01a4 7F09 0909 		.string	"\177\t\t\t\001"
 3650      0100 
 3651 01aa 3E41 4151 		.string	">AAQs"
 3651      7300 
 3652 01b0 7F08 0808 		.string	"\177\b\b\b\177"
 3652      7F00 
 3653 01b6 00        		.string	""
 3654 01b7 417F 4100 		.string	"A\177A"
 3655 01bb 00        		.string	""
 3656 01bc 2040 413F 		.string	" @A?\001"
 3656      0100 
 3657 01c2 7F08 1422 		.string	"\177\b\024\"A"
 3657      4100 
 3658 01c8 7F40 4040 		.string	"\177@@@@"
 3658      4000 
 3659 01ce 7F02 1C02 		.string	"\177\002\034\002\177"
 3659      7F00 
 3660 01d4 7F04 0810 		.string	"\177\004\b\020\177"
 3660      7F00 
 3661 01da 3E41 4141 		.string	">AAA>"
 3661      3E00 
 3662 01e0 7F09 0909 		.string	"\177\t\t\t\006"
 3662      0600 
 3663 01e6 3E41 5121 		.string	">AQ!^"
 3663      5E00 
 3664 01ec 7F09 1929 		.string	"\177\t\031)F"
 3664      4600 
 3665 01f2 2649 4949 		.string	"&III2"
 3665      3200 
 3666 01f8 0301 7F01 		.string	"\003\001\177\001\003"
 3666      0300 
 3667 01fe 3F40 4040 		.string	"?@@@?"
 3667      3F00 
 3668 0204 1F20 4020 		.string	"\037 @ \037"
 3668      1F00 
 3669 020a 3F40 3840 		.string	"?@8@?"
 3669      3F00 
 3670 0210 6314 0814 		.string	"c\024\b\024c"
 3670      6300 
 3671 0216 0304 7804 		.string	"\003\004x\004\003"
 3671      0300 
 3672 021c 6159 494D 		.string	"aYIMC"
 3672      4300 
 3673 0222 00        		.string	""
 3674 0223 7F41 4141 		.string	"\177AAA"
 3674      00
 3675 0228 0204 0810 		.string	"\002\004\b\020 "
 3675      2000 
 3676 022e 00        		.string	""
 3677 022f 4141 417F 		.string	"AAA\177"
 3677      00
 3678 0234 0402 0102 		.string	"\004\002\001\002\004"
 3678      0400 
 3679 023a 4040 4040 		.string	"@@@@@"
 3679      4000 
 3680 0240 00        		.string	""
 3681 0241 0307 0800 		.string	"\003\007\b"
 3682 0245 00        		.string	""
 3683 0246 2054 5478 		.string	" TTx@"
 3683      4000 
 3684 024c 7F28 4444 		.string	"\177(DD8"
 3684      3800 
 3685 0252 3844 4444 		.string	"8DDD("
 3685      2800 
 3686 0258 3844 4428 		.string	"8DD(\177"
 3686      7F00 
 3687 025e 3854 5454 		.string	"8TTT\030"
 3687      1800 
 3688 0264 00        		.string	""
 3689 0265 087E 0902 		.string	"\b~\t\002"
 3689      00
 3690 026a 18A4 A49C 		.string	"\030\244\244\234x"
 3690      7800 
 3691 0270 7F08 0404 		.string	"\177\b\004\004x"
 3691      7800 
 3692 0276 00        		.string	""
 3693 0277 447D 4000 		.string	"D}@"
 3694 027b 00        		.string	""
 3695 027c 2040 403D 		.string	" @@="
 3695      00
 3696 0281 00        		.string	""
 3697 0282 7F10 2844 		.string	"\177\020(D"
 3697      00
 3698 0287 00        		.string	""
 3699 0288 00        		.string	""
 3700 0289 417F 4000 		.string	"A\177@"
 3701 028d 00        		.string	""
 3702 028e 7C04 7804 		.string	"|\004x\004x"
 3702      7800 
 3703 0294 7C08 0404 		.string	"|\b\004\004x"
 3703      7800 
 3704 029a 3844 4444 		.string	"8DDD8"
 3704      3800 
 3705 02a0 FC18 2424 		.string	"\374\030$$\030"
 3705      1800 
 3706 02a6 1824 2418 		.string	"\030$$\030\374"
 3706      FC00 
 3707 02ac 7C08 0404 		.string	"|\b\004\004\b"
 3707      0800 
 3708 02b2 4854 5454 		.string	"HTTT$"
 3708      2400 
 3709 02b8 0404 3F44 		.string	"\004\004?D$"
 3709      2400 
 3710 02be 3C40 4020 		.string	"<@@ |"
 3710      7C00 
 3711 02c4 1C20 4020 		.string	"\034 @ \034"
 3711      1C00 
 3712 02ca 3C40 3040 		.string	"<@0@<"
 3712      3C00 
 3713 02d0 4428 1028 		.string	"D(\020(D"
 3713      4400 
 3714 02d6 4C90 9090 		.string	"L\220\220\220|"
 3714      7C00 
 3715 02dc 4464 544C 		.string	"DdTLD"
 3715      4400 
 3716 02e2 00        		.string	""
 3717 02e3 0836 4100 		.string	"\b6A"
 3718 02e7 00        		.string	""
 3719 02e8 00        		.string	""
 3720 02e9 00        		.string	""
 3721 02ea 7700      		.string	"w"
 3722 02ec 00        		.string	""
 3723 02ed 00        		.string	""
 3724 02ee 00        		.string	""
 3725 02ef 4136 0800 		.string	"A6\b"
 3726 02f3 00        		.string	""
 3727 02f4 0201 0204 		.string	"\002\001\002\004\002"
 3727      0200 
 3728 02fa 3C26 2326 		.string	"<&#&<"
 3728      3C00 
 3729 0300 00        		.string	""
 3730 0301 00        		.string	""
 3731 0302 00        		.string	""
 3732 0303 00        		.string	""
 3733 0304 00        		.string	""
 3734 0305 00        		.string	""
 3735 0306 4040 40F0 		.string	"@@@\360\370\370\3778\377\370\370?\370\370\3778\377\370\370\360@@@"
 3735      F8F8 FF38 
 3735      FFF8 F83F 
 3735      F8F8 FF38 
 3735      FFF8 F8F0 
 3736 031e 00        		.string	""
 3737 031f 00        		.string	""
 3738 0320 00        		.string	""
 3739 0321 00        		.string	""
 3740 0322 00        		.string	""
 3741 0323 80C0 C0C0 		.string	"\200\300\300\300\200"
 3741      8000 
 3742 0329 00        		.string	""
 3743 032a C0C0 8000 		.string	"\300\300\200"
 3744 032e 00        		.string	""
 3745 032f 00        		.string	""
 3746 0330 80C0 C000 		.string	"\200\300\300"
 3747 0334 C0C0 00   		.string	"\300\300"
 3748 0337 00        		.string	""
 3749 0338 80C0 C000 		.string	"\200\300\300"
 3750 033c 00        		.string	""
 3751 033d 00        		.string	""
 3752 033e 00        		.string	""
 3753 033f 00        		.string	""
 3754 0340 C0C0 C0C0 		.string	"\300\300\300\300\300"
 3754      C000 
 3755 0346 C0C0 00   		.string	"\300\300"
 3756 0349 00        		.string	""
 3757 034a 00        		.string	""
 3758 034b 00        		.string	""
 3759 034c 00        		.string	""
 3760 034d 00        		.string	""
 3761 034e 00        		.string	""
 3762 034f 00        		.string	""
 3763 0350 00        		.string	""
 3764 0351 00        		.string	""
 3765 0352 00        		.string	""
 3766 0353 00        		.string	""
 3767 0354 00        		.string	""
 3768 0355 00        		.string	""
 3769 0356 00        		.string	""
 3770 0357 00        		.string	""
 3771 0358 00        		.string	""
 3772 0359 00        		.string	""
 3773 035a 00        		.string	""
 3774 035b 00        		.string	""
 3775 035c 00        		.string	""
 3776 035d 00        		.string	""
 3777 035e 00        		.string	""
 3778 035f 00        		.string	""
 3779 0360 00        		.string	""
 3780 0361 00        		.string	""
 3781 0362 00        		.string	""
 3782 0363 00        		.string	""
 3783 0364 00        		.string	""
 3784 0365 00        		.string	""
 3785 0366 00        		.string	""
 3786 0367 00        		.string	""
 3787 0368 00        		.string	""
 3788 0369 00        		.string	""
 3789 036a 00        		.string	""
 3790 036b 00        		.string	""
 3791 036c 00        		.string	""
 3792 036d 00        		.string	""
 3793 036e 00        		.string	""
 3794 036f 00        		.string	""
 3795 0370 00        		.string	""
 3796 0371 00        		.string	""
 3797 0372 00        		.string	""
 3798 0373 00        		.string	""
 3799 0374 00        		.string	""
 3800 0375 00        		.string	""
 3801 0376 00        		.string	""
 3802 0377 00        		.string	""
 3803 0378 00        		.string	""
 3804 0379 00        		.string	""
 3805 037a 00        		.string	""
 3806 037b 00        		.string	""
 3807 037c 00        		.string	""
 3808 037d 00        		.string	""
 3809 037e 00        		.string	""
 3810 037f C0F0 F8FC 		.string	"\300\360\370\374>\036\006\001"
 3810      3E1E 0601 
 3810      00
 3811 0388 00        		.string	""
 3812 0389 00        		.string	""
 3813 038a 7F41 4141 		.string	"\177AAA\177"
 3813      7F00 
 3814 0390 7F41 4141 		.string	"\177AAA\177"
 3814      7F00 
 3815 0396 00        		.string	""
 3816 0397 80C0 E07E 		.string	"\200\300\340~[O[\376\300"
 3816      5B4F 5BFE 
 3816      C000 
 3817 03a1 00        		.string	""
 3818 03a2 C000      		.string	"\300"
 3819 03a4 DCD7 DEDE 		.string	"\334\327\336\336\336\327\334"
 3819      DED7 DC00 
 3820 03ac C000      		.string	"\300"
 3821 03ae 00        		.string	""
 3822 03af 00        		.string	""
 3823 03b0 00        		.string	""
 3824 03b1 00        		.string	""
 3825 03b2 00        		.string	""
 3826 03b3 00        		.string	""
 3827 03b4 00        		.string	""
 3828 03b5 00        		.string	""
 3829 03b6 00        		.string	""
 3830 03b7 00        		.string	""
 3831 03b8 00        		.string	""
 3832 03b9 00        		.string	""
 3833 03ba 00        		.string	""
 3834 03bb 00        		.string	""
 3835 03bc 00        		.string	""
 3836 03bd 00        		.string	""
 3837 03be 00        		.string	""
 3838 03bf 00        		.string	""
 3839 03c0 00        		.string	""
 3840 03c1 00        		.string	""
 3841 03c2 00        		.string	""
 3842 03c3 00        		.string	""
 3843 03c4 00        		.string	""
 3844 03c5 00        		.string	""
 3845 03c6 4949 49FF 		.string	"III\377\377\377\377\340\337\277\277"
 3845      FFFF FFE0 
 3845      DFBF BF00 
 3846 03d2 BFBF DFE0 		.string	"\277\277\337\340\377\377\377\377III"
 3846      FFFF FFFF 
 3846      4949 4900 
 3847 03de 00        		.string	""
 3848 03df 00        		.string	""
 3849 03e0 00        		.string	""
 3850 03e1 00        		.string	""
 3851 03e2 1F3F 6060 		.string	"\037?``\340\277\037"
 3851      E0BF 1F00 
 3852 03ea 7F7F 071E 		.string	"\177\177\007\0368\036\007\177\177"
 3852      381E 077F 
 3852      7F00 
 3853 03f4 7F7F 0E1F 		.string	"\177\177\016\037;q`"
 3853      3B71 6000 
 3854 03fc 00        		.string	""
 3855 03fd 00        		.string	""
 3856 03fe 00        		.string	""
 3857 03ff 00        		.string	""
 3858 0400 7F7F 0C0C 		.string	"\177\177\f\f\f"
 3858      0C00 
 3859 0406 7E7E 00   		.string	"~~"
 3860 0409 7F7E 0303 		.string	"\177~\003\003"
 3860      00
 3861 040e 7F7E 0303 		.string	"\177~\003\003~~\003\003\177~"
 3861      7E7E 0303 
 3861      7F7E 00
 3862 0419 0F3E 703C 		.string	"\017>p<\006<p>\017"
 3862      063C 703E 
 3862      0F00 
 3863 0423 327B 4949 		.string	"2{II?~"
 3863      3F7E 00
 3864 042a 7F7E 0303 		.string	"\177~\003\003"
 3864      00
 3865 042f 1E3F 6969 		.string	"\036?iio&"
 3865      6F26 00
 3866 0436 00        		.string	""
 3867 0437 00        		.string	""
 3868 0438 00        		.string	""
 3869 0439 00        		.string	""
 3870 043a 00        		.string	""
 3871 043b 00        		.string	""
 3872 043c 00        		.string	""
 3873 043d 00        		.string	""
 3874 043e 00        		.string	""
 3875 043f 030F 1F3F 		.string	"\003\017\037?<xp`"
 3875      3C78 7060 
 3875      00
 3876 0448 00        		.string	""
 3877 0449 00        		.string	""
 3878 044a 7F41 4141 		.string	"\177AAA\177"
 3878      7F00 
 3879 0450 7F41 4141 		.string	"\177AAA\177"
 3879      7F00 
 3880 0456 307B 7F78 		.string	"0{\177x0  0x\177;"
 3880      3020 2030 
 3880      787F 3B00 
 3881 0462 0300      		.string	"\003"
 3882 0464 0F7F 0F0F 		.string	"\017\177\017\017\017\177\017"
 3882      0F7F 0F00 
 3883 046c 0300      		.string	"\003"
 3884 046e 00        		.string	""
 3885 046f 00        		.string	""
 3886 0470 00        		.string	""
 3887 0471 00        		.string	""
 3888 0472 00        		.string	""
 3889 0473 00        		.string	""
 3890 0474 00        		.string	""
 3891 0475 00        		.string	""
 3892 0476 00        		.string	""
 3893 0477 00        		.string	""
 3894 0478 00        		.string	""
 3895 0479 00        		.string	""
 3896 047a 00        		.string	""
 3897 047b 00        		.string	""
 3898 047c 00        		.string	""
 3899 047d 00        		.string	""
 3900 047e 00        		.string	""
 3901 047f 00        		.string	""
 3902 0480 00        		.string	""
 3903 0481 00        		.string	""
 3904 0482 00        		.string	""
 3905 0483 00        		.string	""
 3906 0484 00        		.string	""
 3907 0485 00        		.string	""
 3908 0486 0101 0107 		.string	"\001\001\001\007\017\017\177\017\177\017\017~\017\017\177\017\177\017\017\007\001\001\001
 3908      0F0F 7F0F 
 3908      7F0F 0F7E 
 3908      0F0F 7F0F 
 3908      7F0F 0F07 
 3909 049e 00        		.string	""
 3910 049f 00        		.string	""
 3911 04a0 00        		.string	""
 3912 04a1 00        		.string	""
 3913 04a2 00        		.string	""
 3914 04a3 00        		.string	""
 3915 04a4 00        		.string	""
 3916 04a5 00        		.string	""
 3917 04a6 00        		.string	""
 3918 04a7 0101 00   		.string	"\001\001"
 3919 04aa 00        		.string	""
 3920 04ab 00        		.string	""
 3921 04ac 00        		.string	""
 3922 04ad 00        		.string	""
 3923 04ae 00        		.string	""
 3924 04af 00        		.string	""
 3925 04b0 00        		.string	""
 3926 04b1 00        		.string	""
 3927 04b2 00        		.string	""
 3928 04b3 00        		.string	""
 3929 04b4 00        		.string	""
 3930 04b5 00        		.string	""
 3931 04b6 00        		.string	""
 3932 04b7 00        		.string	""
 3933 04b8 00        		.string	""
 3934 04b9 00        		.string	""
 3935 04ba 00        		.string	""
 3936 04bb 00        		.string	""
 3937 04bc 00        		.string	""
 3938 04bd 00        		.string	""
 3939 04be 00        		.string	""
 3940 04bf 00        		.string	""
 3941 04c0 00        		.string	""
 3942 04c1 00        		.string	""
 3943 04c2 00        		.string	""
 3944 04c3 00        		.string	""
 3945 04c4 00        		.string	""
 3946 04c5 00        		.string	""
 3947 04c6 00        		.string	""
 3948 04c7 00        		.string	""
 3949 04c8 00        		.string	""
 3950 04c9 00        		.string	""
 3951 04ca 00        		.string	""
 3952 04cb 00        		.string	""
 3953 04cc 00        		.string	""
 3954 04cd 00        		.string	""
 3955 04ce 00        		.string	""
 3956 04cf 00        		.string	""
 3957 04d0 00        		.string	""
 3958 04d1 00        		.string	""
 3959 04d2 00        		.string	""
 3960 04d3 00        		.string	""
 3961 04d4 00        		.string	""
 3962 04d5 00        		.string	""
 3963 04d6 00        		.string	""
 3964 04d7 00        		.string	""
 3965 04d8 00        		.string	""
 3966 04d9 00        		.string	""
 3967 04da 00        		.string	""
 3968 04db 00        		.string	""
 3969 04dc 00        		.string	""
 3970 04dd 00        		.string	""
 3971 04de 00        		.string	""
 3972 04df 00        		.string	""
 3973 04e0 00        		.string	""
 3974 04e1 00        		.string	""
 3975 04e2 00        		.string	""
 3976 04e3 00        		.string	""
 3977 04e4 00        		.string	""
 3978 04e5 00        		.string	""
 3979 04e6 00        		.string	""
 3980 04e7 00        		.string	""
 3981 04e8 00        		.string	""
 3982 04e9 00        		.string	""
 3983 04ea 00        		.string	""
 3984 04eb 00        		.string	""
 3985 04ec 00        		.string	""
 3986 04ed 00        		.string	""
 3987 04ee 00        		.string	""
 3988 04ef 00        		.string	""
 3989 04f0 00        		.string	""
 3990 04f1 00        		.string	""
 3991 04f2 00        		.string	""
 3992 04f3 00        		.string	""
 3993 04f4 00        		.string	""
 3994 04f5 00        		.string	""
 3995 04f6 00        		.string	""
 3996 04f7 00        		.string	""
 3997 04f8 00        		.string	""
 3998 04f9 00        		.string	""
 3999 04fa 00        		.string	""
 4000 04fb 00        		.string	""
 4001 04fc 00        		.string	""
 4002 04fd 00        		.string	""
 4003 04fe 00        		.string	""
 4004 04ff 00        		.string	""
 4005 0500 00        		.string	""
 4006 0501 00        		.string	""
 4007 0502 00        		.string	""
 4008 0503 00        		.string	""
 4009 0504 00        		.string	""
 4010 0505 00        		.string	""
 4011 0506 00        		.string	""
 4012 0507 00        		.string	""
 4013 0508 00        		.string	""
 4014 0509 00        		.string	""
 4015 050a 00        		.string	""
 4016 050b 00        		.string	""
 4017 050c 00        		.string	""
 4018 050d 00        		.string	""
 4019 050e 00        		.string	""
 4020 050f 00        		.string	""
 4021 0510 00        		.string	""
 4022 0511 00        		.string	""
 4023 0512 00        		.string	""
 4024 0513 00        		.string	""
 4025 0514 00        		.string	""
 4026 0515 00        		.string	""
 4027 0516 00        		.string	""
 4028 0517 00        		.string	""
 4029 0518 00        		.string	""
 4030 0519 00        		.string	""
 4031 051a 00        		.string	""
 4032 051b 00        		.string	""
 4033 051c 00        		.string	""
 4034 051d 00        		.string	""
 4035 051e 00        		.string	""
 4036 051f 00        		.string	""
 4037 0520 00        		.string	""
 4038 0521 00        		.string	""
 4039 0522 00        		.string	""
 4040 0523 00        		.string	""
 4041 0524 00        		.string	""
 4042 0525 00        		.string	""
 4043 0526 00        		.string	""
 4044 0527 00        		.string	""
 4045 0528 00        		.string	""
 4046 0529 00        		.string	""
 4047 052a 00        		.string	""
 4048 052b 00        		.string	""
 4049 052c 00        		.string	""
 4050 052d 00        		.string	""
 4051 052e 00        		.string	""
 4052 052f 00        		.string	""
 4053 0530 00        		.string	""
 4054 0531 00        		.string	""
 4055 0532 00        		.string	""
 4056 0533 00        		.string	""
 4057 0534 00        		.string	""
 4058 0535 00        		.string	""
 4059 0536 00        		.string	""
 4060 0537 00        		.string	""
 4061 0538 00        		.string	""
 4062 0539 00        		.string	""
 4063 053a 00        		.string	""
 4064 053b 00        		.string	""
 4065 053c 00        		.string	""
 4066 053d 00        		.string	""
 4067 053e 00        		.string	""
 4068 053f 00        		.string	""
 4069               		.text
 4070               	.Letext0:
 4071               		.file 2 "/usr/avr/include/stdint.h"
 4072               		.file 3 "platforms/avr/drivers/i2c_master.h"
 4073               		.file 4 "drivers/oled/oled_driver.h"
 4074               		.file 5 "/usr/lib/gcc/avr/11.2.0/include/stddef.h"
 4075               		.file 6 "tmk_core/common/timer.h"
 4076               		.file 7 "/usr/avr/include/string.h"
 4077               		.file 8 "/usr/avr/include/avr/pgmspace.h"
 4078               		.file 9 "drivers/oled/glcdfont.c"
 4079               		.file 10 "tmk_core/common/avr/xprintf.h"
 4080               		.file 11 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1306_sh1106.c
     /tmp/ccAUqBtc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAUqBtc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAUqBtc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAUqBtc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAUqBtc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAUqBtc.s:12     .text.i2c_transmit_P.constprop.0:0000000000000000 i2c_transmit_P.constprop.0
     /tmp/ccAUqBtc.s:149    .text.oled_init_user:0000000000000000 oled_init_user
     /tmp/ccAUqBtc.s:168    .text.oled_clear:0000000000000000 oled_clear
                            *COM*:0000000000000200 oled_buffer
                            *COM*:0000000000000002 oled_cursor
     /tmp/ccAUqBtc.s:3532   .bss.oled_dirty:0000000000000000 oled_dirty
     /tmp/ccAUqBtc.s:207    .text.oled_init:0000000000000000 oled_init
     /tmp/ccAUqBtc.s:3496   .bss.oled_rotation:0000000000000000 oled_rotation
     /tmp/ccAUqBtc.s:3490   .bss.oled_rotation_width:0000000000000000 oled_rotation_width
     /tmp/ccAUqBtc.s:3462   .progmem.data.display_setup1.29:0000000000000000 display_setup1.29
     /tmp/ccAUqBtc.s:3457   .progmem.data.__c.28:0000000000000000 __c.28
     /tmp/ccAUqBtc.s:3451   .progmem.data.display_normal.27:0000000000000000 display_normal.27
     /tmp/ccAUqBtc.s:3446   .progmem.data.__c.26:0000000000000000 __c.26
     /tmp/ccAUqBtc.s:3440   .progmem.data.display_flipped.25:0000000000000000 display_flipped.25
     /tmp/ccAUqBtc.s:3435   .progmem.data.__c.24:0000000000000000 __c.24
     /tmp/ccAUqBtc.s:3429   .progmem.data.display_setup2.23:0000000000000000 display_setup2.23
     /tmp/ccAUqBtc.s:3424   .progmem.data.__c.22:0000000000000000 __c.22
                            *COM*:0000000000000004 oled_timeout
     /tmp/ccAUqBtc.s:3526   .bss.oled_initialized:0000000000000000 oled_initialized
     /tmp/ccAUqBtc.s:3520   .bss.oled_active:0000000000000000 oled_active
     /tmp/ccAUqBtc.s:3514   .bss.oled_scrolling:0000000000000000 oled_scrolling
     /tmp/ccAUqBtc.s:399    .text.crot:0000000000000000 crot
     /tmp/ccAUqBtc.s:453    .text.oled_set_cursor:0000000000000000 oled_set_cursor
     /tmp/ccAUqBtc.s:504    .text.oled_advance_char:0000000000000000 oled_advance_char
     /tmp/ccAUqBtc.s:569    .text.oled_write_char:0000000000000000 oled_write_char
     /tmp/ccAUqBtc.s:799    .text.oled_advance_page:0000000000000000 oled_advance_page
     /tmp/ccAUqBtc.s:3380   .bss.oled_temp_buffer.14:0000000000000000 oled_temp_buffer.14
     /tmp/ccAUqBtc.s:3539   .progmem.data.font:0000000000000000 font
     /tmp/ccAUqBtc.s:905    .text.oled_write:0000000000000000 oled_write
     /tmp/ccAUqBtc.s:987    .text.oled_write_ln:0000000000000000 oled_write_ln
     /tmp/ccAUqBtc.s:1009   .text.oled_pan:0000000000000000 oled_pan
     /tmp/ccAUqBtc.s:1107   .text.oled_read_raw:0000000000000000 oled_read_raw
     /tmp/ccAUqBtc.s:1185   .text.oled_write_raw_byte:0000000000000000 oled_write_raw_byte
     /tmp/ccAUqBtc.s:1255   .text.oled_write_raw:0000000000000000 oled_write_raw
     /tmp/ccAUqBtc.s:1387   .text.oled_write_pixel:0000000000000000 oled_write_pixel
     /tmp/ccAUqBtc.s:1501   .text.oled_write_P:0000000000000000 oled_write_P
     /tmp/ccAUqBtc.s:1581   .text.oled_write_ln_P:0000000000000000 oled_write_ln_P
     /tmp/ccAUqBtc.s:1603   .text.oled_write_raw_P:0000000000000000 oled_write_raw_P
     /tmp/ccAUqBtc.s:1761   .text.oled_on:0000000000000000 oled_on
     /tmp/ccAUqBtc.s:3374   .progmem.data.display_on.13:0000000000000000 display_on.13
     /tmp/ccAUqBtc.s:3369   .progmem.data.__c.12:0000000000000000 __c.12
     /tmp/ccAUqBtc.s:1860   .text.oled_render:0000000000000000 oled_render
     /tmp/ccAUqBtc.s:3416   .data.display_start.21:0000000000000000 display_start.21
     /tmp/ccAUqBtc.s:3411   .progmem.data.__c.20:0000000000000000 __c.20
     /tmp/ccAUqBtc.s:3406   .progmem.data.__c.19:0000000000000000 __c.19
     /tmp/ccAUqBtc.s:3401   .bss.temp_buffer.18:0000000000000000 temp_buffer.18
     /tmp/ccAUqBtc.s:3396   .rodata.target_map.17:0000000000000000 target_map.17
     /tmp/ccAUqBtc.s:3390   .rodata.source_map.16:0000000000000000 source_map.16
     /tmp/ccAUqBtc.s:3385   .progmem.data.__c.15:0000000000000000 __c.15
     /tmp/ccAUqBtc.s:2415   .text.oled_off:0000000000000000 oled_off
     /tmp/ccAUqBtc.s:3363   .progmem.data.display_off.11:0000000000000000 display_off.11
     /tmp/ccAUqBtc.s:3358   .progmem.data.__c.10:0000000000000000 __c.10
     /tmp/ccAUqBtc.s:2481   .text.is_oled_on:0000000000000000 is_oled_on
     /tmp/ccAUqBtc.s:2500   .text.oled_set_brightness:0000000000000000 oled_set_brightness
     /tmp/ccAUqBtc.s:3502   .data.oled_brightness:0000000000000000 oled_brightness
     /tmp/ccAUqBtc.s:3353   .progmem.data.__c.9:0000000000000000 __c.9
     /tmp/ccAUqBtc.s:2602   .text.oled_get_brightness:0000000000000000 oled_get_brightness
     /tmp/ccAUqBtc.s:2621   .text.oled_scroll_set_area:0000000000000000 oled_scroll_set_area
     /tmp/ccAUqBtc.s:3478   .bss.oled_scroll_start:0000000000000000 oled_scroll_start
     /tmp/ccAUqBtc.s:3472   .data.oled_scroll_end:0000000000000000 oled_scroll_end
     /tmp/ccAUqBtc.s:2645   .text.oled_scroll_set_speed:0000000000000000 oled_scroll_set_speed
     /tmp/ccAUqBtc.s:3347   .rodata.scroll_remap.8:0000000000000000 scroll_remap.8
     /tmp/ccAUqBtc.s:3484   .bss.oled_scroll_speed:0000000000000000 oled_scroll_speed
     /tmp/ccAUqBtc.s:2675   .text.oled_scroll_right:0000000000000000 oled_scroll_right
     /tmp/ccAUqBtc.s:3342   .progmem.data.__c.7:0000000000000000 __c.7
     /tmp/ccAUqBtc.s:2793   .text.oled_scroll_left:0000000000000000 oled_scroll_left
     /tmp/ccAUqBtc.s:3337   .progmem.data.__c.6:0000000000000000 __c.6
     /tmp/ccAUqBtc.s:2911   .text.oled_scroll_off:0000000000000000 oled_scroll_off
     /tmp/ccAUqBtc.s:3331   .progmem.data.display_scroll_off.5:0000000000000000 display_scroll_off.5
     /tmp/ccAUqBtc.s:3326   .progmem.data.__c.4:0000000000000000 __c.4
     /tmp/ccAUqBtc.s:2985   .text.is_oled_scrolling:0000000000000000 is_oled_scrolling
     /tmp/ccAUqBtc.s:3004   .text.oled_invert:0000000000000000 oled_invert
     /tmp/ccAUqBtc.s:3508   .bss.oled_inverted:0000000000000000 oled_inverted
     /tmp/ccAUqBtc.s:3320   .progmem.data.display_inverted.3:0000000000000000 display_inverted.3
     /tmp/ccAUqBtc.s:3315   .progmem.data.__c.2:0000000000000000 __c.2
     /tmp/ccAUqBtc.s:3309   .progmem.data.display_normal.1:0000000000000000 display_normal.1
     /tmp/ccAUqBtc.s:3304   .progmem.data.__c.0:0000000000000000 __c.0
     /tmp/ccAUqBtc.s:3113   .text.oled_max_chars:0000000000000000 oled_max_chars
     /tmp/ccAUqBtc.s:3141   .text.oled_max_lines:0000000000000000 oled_max_lines
     /tmp/ccAUqBtc.s:3169   .text.oled_task_user:0000000000000000 oled_task_user
     /tmp/ccAUqBtc.s:3186   .text.oled_task:0000000000000000 oled_task
                            *COM*:0000000000000002 oled_update_timeout

UNDEFINED SYMBOLS
i2c_start
i2c_write
i2c_stop
i2c_init
xputs
timer_read32
__udivmodhi4
memcmp
memcpy_P
__udivmodqi4
memmove
i2c_transmit
i2c_writeReg
timer_elapsed
timer_read
__do_copy_data
__do_clear_bss
